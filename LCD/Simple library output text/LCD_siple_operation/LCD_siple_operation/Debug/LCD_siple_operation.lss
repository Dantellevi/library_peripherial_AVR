
LCD_siple_operation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000280  000002f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000280  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000300  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000330  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000148  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011f9  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000908  00000000  00000000  000016b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000894  00000000  00000000  00001fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f4  00000000  00000000  00002850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b4  00000000  00000000  00002b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008f2  00000000  00000000  000030f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000140  00000000  00000000  000039ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__ctors_end>
   4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
   c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
  64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	41 a0       	ldd	r4, Z+33	; 0x21
  6a:	42 a1       	ldd	r20, Z+34	; 0x22
  6c:	e0 45       	sbci	r30, 0x50	; 80
  6e:	a3 a4       	ldd	r10, Z+43	; 0x2b
  70:	a5 a6       	std	Z+45, r10	; 0x2d
  72:	4b a7       	std	Y+43, r20	; 0x2b
  74:	4d 48       	sbci	r20, 0x8D	; 141
  76:	4f a8       	ldd	r4, Y+55	; 0x37
  78:	50 43       	sbci	r21, 0x30	; 48
  7a:	54 a9       	ldd	r21, Z+52	; 0x34
  7c:	aa 58       	subi	r26, 0x8A	; 138
  7e:	e1 ab       	std	Z+49, r30	; 0x31
  80:	ac e2       	ldi	r26, 0x2C	; 44
  82:	ad ae       	std	Y+61, r10	; 0x3d
  84:	ad af       	std	Y+61, r26	; 0x3d
  86:	b0 b1       	in	r27, 0x00	; 0
  88:	61 b2       	in	r6, 0x11	; 17
  8a:	b3 b4       	in	r11, 0x23	; 35
  8c:	e3 65       	ori	r30, 0x53	; 83
  8e:	b6 b7       	in	r27, 0x36	; 54
  90:	b8 b9       	out	0x08, r27	; 8
  92:	ba bb       	out	0x1a, r27	; 26
  94:	bc bd       	out	0x2c, r27	; 44
  96:	6f be       	out	0x3f, r6	; 63
  98:	70 63       	ori	r23, 0x30	; 48
  9a:	bf 79       	andi	r27, 0x9F	; 159
  9c:	e4 78       	andi	r30, 0x84	; 132
  9e:	e5 c0       	rjmp	.+458    	; 0x26a <main+0x4>
  a0:	c1 e6       	ldi	r28, 0x61	; 97
  a2:	c2 c3       	rjmp	.+1924   	; 0x828 <__LOCK_REGION_LENGTH__+0x428>
  a4:	c4 c5       	rjmp	.+2952   	; 0xc2e <__stack+0x32f>
  a6:	c6 c7       	rjmp	.+3980   	; 0x1034 <__stack+0x735>

000000a8 <__ctors_end>:
  a8:	11 24       	eor	r1, r1
  aa:	1f be       	out	0x3f, r1	; 63
  ac:	cf ef       	ldi	r28, 0xFF	; 255
  ae:	d8 e0       	ldi	r29, 0x08	; 8
  b0:	de bf       	out	0x3e, r29	; 62
  b2:	cd bf       	out	0x3d, r28	; 61

000000b4 <__do_copy_data>:
  b4:	11 e0       	ldi	r17, 0x01	; 1
  b6:	a0 e0       	ldi	r26, 0x00	; 0
  b8:	b1 e0       	ldi	r27, 0x01	; 1
  ba:	e0 e8       	ldi	r30, 0x80	; 128
  bc:	f2 e0       	ldi	r31, 0x02	; 2
  be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x10>
  c0:	05 90       	lpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	ac 30       	cpi	r26, 0x0C	; 12
  c6:	b1 07       	cpc	r27, r17
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0xc>
  ca:	0e 94 33 01 	call	0x266	; 0x266 <main>
  ce:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

000000d2 <__bad_interrupt>:
  d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <OutPin>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDdata((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	80 6f       	ori	r24, 0xF0	; 240
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	8f 70       	andi	r24, 0x0F	; 15
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	08 95       	ret

000000e4 <Strob>:
  e4:	5a 9a       	sbi	0x0b, 2	; 11
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <Strob+0x4>
  ec:	00 c0       	rjmp	.+0      	; 0xee <Strob+0xa>
  ee:	5a 98       	cbi	0x0b, 2	; 11
  f0:	08 95       	ret

000000f2 <Busy_flag>:
  f2:	cf 93       	push	r28
  f4:	8a b1       	in	r24, 0x0a	; 10
  f6:	8f 70       	andi	r24, 0x0F	; 15
  f8:	8a b9       	out	0x0a, r24	; 10
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	80 6f       	ori	r24, 0xF0	; 240
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	59 9a       	sbi	0x0b, 1	; 11
 102:	5a 9a       	sbi	0x0b, 2	; 11
 104:	00 00       	nop
 106:	00 00       	nop
 108:	c9 b1       	in	r28, 0x09	; 9
 10a:	5a 98       	cbi	0x0b, 2	; 11
 10c:	00 00       	nop
 10e:	00 00       	nop
 110:	0e 94 72 00 	call	0xe4	; 0xe4 <Strob>
 114:	00 00       	nop
 116:	00 00       	nop
 118:	cc 23       	and	r28, r28
 11a:	9c f3       	brlt	.-26     	; 0x102 <Busy_flag+0x10>
 11c:	59 98       	cbi	0x0b, 1	; 11
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <Send_byte>:
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	d8 2f       	mov	r29, r24
 128:	0e 94 6b 00 	call	0xd6	; 0xd6 <OutPin>
 12c:	9d 2f       	mov	r25, r29
 12e:	92 95       	swap	r25
 130:	9f 70       	andi	r25, 0x0F	; 15
 132:	cd 2f       	mov	r28, r29
 134:	cf 70       	andi	r28, 0x0F	; 15
 136:	90 fd       	sbrc	r25, 0
 138:	5c 9a       	sbi	0x0b, 4	; 11
 13a:	96 95       	lsr	r25
 13c:	90 fd       	sbrc	r25, 0
 13e:	5d 9a       	sbi	0x0b, 5	; 11
 140:	96 95       	lsr	r25
 142:	90 fd       	sbrc	r25, 0
 144:	5e 9a       	sbi	0x0b, 6	; 11
 146:	96 95       	lsr	r25
 148:	09 f0       	breq	.+2      	; 0x14c <Send_byte+0x2a>
 14a:	5f 9a       	sbi	0x0b, 7	; 11
 14c:	0e 94 72 00 	call	0xe4	; 0xe4 <Strob>
 150:	0e 94 6b 00 	call	0xd6	; 0xd6 <OutPin>
 154:	d0 fd       	sbrc	r29, 0
 156:	5c 9a       	sbi	0x0b, 4	; 11
 158:	8c 2f       	mov	r24, r28
 15a:	86 95       	lsr	r24
 15c:	80 fd       	sbrc	r24, 0
 15e:	5d 9a       	sbi	0x0b, 5	; 11
 160:	86 95       	lsr	r24
 162:	80 fd       	sbrc	r24, 0
 164:	5e 9a       	sbi	0x0b, 6	; 11
 166:	86 95       	lsr	r24
 168:	09 f0       	breq	.+2      	; 0x16c <Send_byte+0x4a>
 16a:	5f 9a       	sbi	0x0b, 7	; 11
 16c:	0e 94 72 00 	call	0xe4	; 0xe4 <Strob>
 170:	8a b1       	in	r24, 0x0a	; 10
 172:	8f 70       	andi	r24, 0x0F	; 15
 174:	8a b9       	out	0x0a, r24	; 10
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	8f 70       	andi	r24, 0x0F	; 15
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <LCDcommand>:
 182:	cf 93       	push	r28
 184:	c8 2f       	mov	r28, r24
 186:	0e 94 79 00 	call	0xf2	; 0xf2 <Busy_flag>
 18a:	8c 2f       	mov	r24, r28
 18c:	0e 94 91 00 	call	0x122	; 0x122 <Send_byte>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <LCDdata>:
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
 198:	0e 94 79 00 	call	0xf2	; 0xf2 <Busy_flag>
 19c:	58 9a       	sbi	0x0b, 0	; 11
 19e:	c0 3c       	cpi	r28, 0xC0	; 192
 1a0:	30 f0       	brcs	.+12     	; 0x1ae <LCDdata+0x1a>
 1a2:	e0 e4       	ldi	r30, 0x40	; 64
 1a4:	ec 0f       	add	r30, r28
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e8 59       	subi	r30, 0x98	; 152
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	c4 91       	lpm	r28, Z
 1ae:	8c 2f       	mov	r24, r28
 1b0:	0e 94 91 00 	call	0x122	; 0x122 <Send_byte>
 1b4:	58 98       	cbi	0x0b, 0	; 11
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <LCDGotoXY>:
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <LCDGotoXY+0x6>
 1be:	80 5c       	subi	r24, 0xC0	; 192
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	0e 94 c1 00 	call	0x182	; 0x182 <LCDcommand>
 1c6:	08 95       	ret

000001c8 <LCDstringXY>:
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
 1ce:	86 2f       	mov	r24, r22
 1d0:	64 2f       	mov	r22, r20
 1d2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDGotoXY>
 1d6:	88 81       	ld	r24, Y
 1d8:	88 23       	and	r24, r24
 1da:	31 f0       	breq	.+12     	; 0x1e8 <LCDstringXY+0x20>
 1dc:	21 96       	adiw	r28, 0x01	; 1
 1de:	0e 94 ca 00 	call	0x194	; 0x194 <LCDdata>
 1e2:	89 91       	ld	r24, Y+
 1e4:	81 11       	cpse	r24, r1
 1e6:	fb cf       	rjmp	.-10     	; 0x1de <LCDstringXY+0x16>
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	08 95       	ret

000001ee <LCDinit>:
void LCDinit(void)							//Инициализируем дисплей
{
 1ee:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	2f ef       	ldi	r18, 0xFF	; 255
 1f2:	80 e7       	ldi	r24, 0x70	; 112
 1f4:	92 e0       	ldi	r25, 0x02	; 2
 1f6:	21 50       	subi	r18, 0x01	; 1
 1f8:	80 40       	sbci	r24, 0x00	; 0
 1fa:	90 40       	sbci	r25, 0x00	; 0
 1fc:	e1 f7       	brne	.-8      	; 0x1f6 <LCDinit+0x8>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <LCDinit+0x12>
 200:	00 00       	nop
	//Перед инициализацией LCD, надо в init задержку в 100 мсек сделать, чтоб питание устаканилось. 
	_delay_ms(100);
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
 202:	8a b1       	in	r24, 0x0a	; 10
 204:	87 60       	ori	r24, 0x07	; 7
 206:	8a b9       	out	0x0a, r24	; 10
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	88 7f       	andi	r24, 0xF8	; 248
 20c:	8b b9       	out	0x0b, r24	; 11
	OutPin();						   //Настройка портов
 20e:	0e 94 6b 00 	call	0xd6	; 0xd6 <OutPin>
 212:	c3 e0       	ldi	r28, 0x03	; 3
	while (i!=3)
	{
		#ifdef  LCD_8BIT       //отправка символа 0x30.
		        DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4)|(0<<DB3)|(0<<DB2)|(0<<DB1)|(0<<DB0);
		#else
				DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4);
 214:	8b b1       	in	r24, 0x0b	; 11
 216:	80 63       	ori	r24, 0x30	; 48
 218:	8b b9       	out	0x0b, r24	; 11
		#endif
		
		Strob();
 21a:	0e 94 72 00 	call	0xe4	; 0xe4 <Strob>
 21e:	8f e0       	ldi	r24, 0x0F	; 15
 220:	97 e2       	ldi	r25, 0x27	; 39
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <LCDinit+0x34>
 226:	00 c0       	rjmp	.+0      	; 0x228 <LCDinit+0x3a>
 228:	00 00       	nop
 22a:	c1 50       	subi	r28, 0x01	; 1
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
	OutPin();						   //Настройка портов
	
	uint8_t i=0;
	while (i!=3)
 22c:	99 f7       	brne	.-26     	; 0x214 <LCDinit+0x26>
	//Разминочный этап закончен, далее переходим к основным упражнениям.
	
	#ifdef  LCD_8BIT
			LCDcommand(0b00111000);//8ми битный интерфейс, две строки, 5x8 точек.
	#else   //Первый раз отправляем только пол старшей тетрады
			Busy_flag();
 22e:	0e 94 79 00 	call	0xf2	; 0xf2 <Busy_flag>
			OutPin();
 232:	0e 94 6b 00 	call	0xd6	; 0xd6 <OutPin>
			DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(0<<DB4);//4х битный интерфейс 
 236:	5d 9a       	sbi	0x0b, 5	; 11
			Strob();
 238:	0e 94 72 00 	call	0xe4	; 0xe4 <Strob>
			LCDcommand(0b00101000);//Две строки, 5x8 точек.
 23c:	88 e2       	ldi	r24, 0x28	; 40
 23e:	0e 94 c1 00 	call	0x182	; 0x182 <LCDcommand>
	#endif
	
	LCDcommand(0b1100);  //Включаем дисплей + без отображения курсоров.
 242:	8c e0       	ldi	r24, 0x0C	; 12
 244:	0e 94 c1 00 	call	0x182	; 0x182 <LCDcommand>
	LCDcommand(0b110);   //Счетчик адреса всегда будет смещаться на n+1
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 c1 00 	call	0x182	; 0x182 <LCDcommand>
	LCDcommand(0b10);    //курсор в позицию 0,0 + сброс всех сдвигов
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	0e 94 c1 00 	call	0x182	; 0x182 <LCDcommand>
	LCDcommand(0b1);     //очистка дисплея 
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	0e 94 c1 00 	call	0x182	; 0x182 <LCDcommand>
	//Основные упражнения закончены. Переходим к релаксации.
}
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <Port_init>:

 #include "Main.h"

 void Port_init(void)
 {
 DDRD=0xFF;
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	8a b9       	out	0x0a, r24	; 10
 PORTD=0x00;
 262:	1b b8       	out	0x0b, r1	; 11
 264:	08 95       	ret

00000266 <main>:
 }
 

int main(void)
{
	Port_init();
 266:	0e 94 2f 01 	call	0x25e	; 0x25e <Port_init>
	LCDinit();
 26a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCDinit>
	LCDstringXY("Hello World",0,1);
 26e:	41 e0       	ldi	r20, 0x01	; 1
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCDstringXY>
    
    while (1) 
    {

    }
 27a:	ff cf       	rjmp	.-2      	; 0x27a <main+0x14>

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>

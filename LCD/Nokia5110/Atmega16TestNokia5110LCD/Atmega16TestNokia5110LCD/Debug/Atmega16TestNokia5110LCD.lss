
Atmega16TestNokia5110LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000055e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000005d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001fd  00800060  00800060  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a73  00000000  00000000  00000718  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000958  00000000  00000000  0000218b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bef  00000000  00000000  00002ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000032c  00000000  00000000  000036d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b9  00000000  00000000  00003a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000199a  00000000  00000000  00003fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00005953  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	22 e0       	ldi	r18, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ad 35       	cpi	r26, 0x5D	; 93
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 ad 02 	jmp	0x55a	; 0x55a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:


int main(void)
{
Port_ini();
Lcd_init();
  7c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <Lcd_init>
Lcd_clear();
  80:	0e 94 78 00 	call	0xf0	; 0xf0 <Lcd_clear>
	//Lcd_rect(46,10,20,8,PIXEL_ON);
	//
	//_delay_ms(100);
	//Lcd_rect(54,10,ran,8,PIXEL_OFF);
	
	Lcd_pixel(0,0,PIXEL_ON);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
  8e:	c0 e0       	ldi	r28, 0x00	; 0
	//Lcd_rect_Fill(10,10,40,30,PIXEL_ON);
	for (int i=0;i<30;i++)
	{
	Lcd_rect_Fill(10,10,i,20,PIXEL_ON);
  90:	01 e0       	ldi	r16, 0x01	; 1
  92:	24 e1       	ldi	r18, 0x14	; 20
  94:	4c 2f       	mov	r20, r28
  96:	6a e0       	ldi	r22, 0x0A	; 10
  98:	8a e0       	ldi	r24, 0x0A	; 10
  9a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Lcd_rect_Fill>

	Lcd_update();
  9e:	0e 94 90 00 	call	0x120	; 0x120 <Lcd_update>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	80 e7       	ldi	r24, 0x70	; 112
  a6:	92 e0       	ldi	r25, 0x02	; 2
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x2c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x36>
  b2:	00 00       	nop
  b4:	cf 5f       	subi	r28, 0xFF	; 255
	//_delay_ms(100);
	//Lcd_rect(54,10,ran,8,PIXEL_OFF);
	
	Lcd_pixel(0,0,PIXEL_ON);
	//Lcd_rect_Fill(10,10,40,30,PIXEL_ON);
	for (int i=0;i<30;i++)
  b6:	ce 31       	cpi	r28, 0x1E	; 30
  b8:	59 f7       	brne	.-42     	; 0x90 <main+0x14>

	Lcd_update();
	_delay_ms(100);
	}

	Lcd_triangle(40, 10, 50, 20,50, 10,PIXEL_ON);
  ba:	cc 24       	eor	r12, r12
  bc:	c3 94       	inc	r12
  be:	0f 2e       	mov	r0, r31
  c0:	fa e0       	ldi	r31, 0x0A	; 10
  c2:	ef 2e       	mov	r14, r31
  c4:	f0 2d       	mov	r31, r0
  c6:	02 e3       	ldi	r16, 0x32	; 50
  c8:	24 e1       	ldi	r18, 0x14	; 20
  ca:	42 e3       	ldi	r20, 0x32	; 50
  cc:	6a e0       	ldi	r22, 0x0A	; 10
  ce:	88 e2       	ldi	r24, 0x28	; 40
  d0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Lcd_triangle>
	Lcd_update();
  d4:	0e 94 90 00 	call	0x120	; 0x120 <Lcd_update>
	

	

    }
  d8:	d5 cf       	rjmp	.-86     	; 0x84 <main+0x8>

000000da <LcdSend>:
    }

    // Установка флага изменений кэша
    UpdateLcd = TRUE;
    return OK;
}
  da:	c4 98       	cbi	0x18, 4	; 24
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	11 f4       	brne	.+4      	; 0xe4 <LcdSend+0xa>
  e0:	c1 9a       	sbi	0x18, 1	; 24
  e2:	01 c0       	rjmp	.+2      	; 0xe6 <LcdSend+0xc>
  e4:	c1 98       	cbi	0x18, 1	; 24
  e6:	8f b9       	out	0x0f, r24	; 15
  e8:	77 9b       	sbis	0x0e, 7	; 14
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <LcdSend+0xe>
  ec:	c4 9a       	sbi	0x18, 4	; 24
  ee:	08 95       	ret

000000f0 <Lcd_clear>:
  f0:	88 ef       	ldi	r24, 0xF8	; 248
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	e5 e6       	ldi	r30, 0x65	; 101
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	df 01       	movw	r26, r30
  fa:	9c 01       	movw	r18, r24
  fc:	1d 92       	st	X+, r1
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	30 40       	sbci	r19, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <Lcd_clear+0xc>
 104:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <LoWaterMark+0x1>
 108:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <LoWaterMark>
 10c:	87 ef       	ldi	r24, 0xF7	; 247
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <HiWaterMark+0x1>
 114:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <HiWaterMark>
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 11e:	08 95       	ret

00000120 <Lcd_update>:
 120:	0f 93       	push	r16
 122:	1f 93       	push	r17
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <LoWaterMark>
 12c:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <LoWaterMark+0x1>
 130:	99 23       	and	r25, r25
 132:	2c f4       	brge	.+10     	; 0x13e <Lcd_update+0x1e>
 134:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <LoWaterMark+0x1>
 138:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <LoWaterMark>
 13c:	09 c0       	rjmp	.+18     	; 0x150 <Lcd_update+0x30>
 13e:	88 3f       	cpi	r24, 0xF8	; 248
 140:	91 40       	sbci	r25, 0x01	; 1
 142:	34 f0       	brlt	.+12     	; 0x150 <Lcd_update+0x30>
 144:	87 ef       	ldi	r24, 0xF7	; 247
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <LoWaterMark+0x1>
 14c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LoWaterMark>
 150:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <HiWaterMark>
 154:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <HiWaterMark+0x1>
 158:	99 23       	and	r25, r25
 15a:	2c f4       	brge	.+10     	; 0x166 <Lcd_update+0x46>
 15c:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <HiWaterMark+0x1>
 160:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <HiWaterMark>
 164:	09 c0       	rjmp	.+18     	; 0x178 <Lcd_update+0x58>
 166:	88 3f       	cpi	r24, 0xF8	; 248
 168:	91 40       	sbci	r25, 0x01	; 1
 16a:	34 f0       	brlt	.+12     	; 0x178 <Lcd_update+0x58>
 16c:	87 ef       	ldi	r24, 0xF7	; 247
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <HiWaterMark+0x1>
 174:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <HiWaterMark>
 178:	c0 91 63 00 	lds	r28, 0x0063	; 0x800063 <LoWaterMark>
 17c:	d0 91 64 00 	lds	r29, 0x0064	; 0x800064 <LoWaterMark+0x1>
 180:	ce 01       	movw	r24, r28
 182:	64 e5       	ldi	r22, 0x54	; 84
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	0e 94 85 02 	call	0x50a	; 0x50a <__divmodhi4>
 18a:	16 2f       	mov	r17, r22
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 194:	60 e0       	ldi	r22, 0x00	; 0
 196:	81 2f       	mov	r24, r17
 198:	80 64       	ori	r24, 0x40	; 64
 19a:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 19e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <HiWaterMark>
 1a2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <HiWaterMark+0x1>
 1a6:	8c 17       	cp	r24, r28
 1a8:	9d 07       	cpc	r25, r29
 1aa:	8c f0       	brlt	.+34     	; 0x1ce <Lcd_update+0xae>
 1ac:	8e 01       	movw	r16, r28
 1ae:	0b 59       	subi	r16, 0x9B	; 155
 1b0:	1f 4f       	sbci	r17, 0xFF	; 255
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	f8 01       	movw	r30, r16
 1b6:	81 91       	ld	r24, Z+
 1b8:	8f 01       	movw	r16, r30
 1ba:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 1be:	21 96       	adiw	r28, 0x01	; 1
 1c0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <HiWaterMark>
 1c4:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <HiWaterMark+0x1>
 1c8:	8c 17       	cp	r24, r28
 1ca:	9d 07       	cpc	r25, r29
 1cc:	94 f7       	brge	.-28     	; 0x1b2 <Lcd_update+0x92>
 1ce:	87 ef       	ldi	r24, 0xF7	; 247
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <LoWaterMark+0x1>
 1d6:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LoWaterMark>
 1da:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <HiWaterMark+0x1>
 1de:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <HiWaterMark>
 1e2:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <Lcd_init>:
 1f0:	c6 9a       	sbi	0x18, 6	; 24
 1f2:	87 b3       	in	r24, 0x17	; 23
 1f4:	82 6f       	ori	r24, 0xF2	; 242
 1f6:	87 bb       	out	0x17, r24	; 23
 1f8:	c6 98       	cbi	0x18, 6	; 24
 1fa:	c6 9a       	sbi	0x18, 6	; 24
 1fc:	80 e5       	ldi	r24, 0x50	; 80
 1fe:	8d b9       	out	0x0d, r24	; 13
 200:	c4 9a       	sbi	0x18, 4	; 24
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	81 e2       	ldi	r24, 0x21	; 33
 206:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 20a:	60 e0       	ldi	r22, 0x00	; 0
 20c:	88 ec       	ldi	r24, 0xC8	; 200
 20e:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	86 e0       	ldi	r24, 0x06	; 6
 216:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 21a:	60 e0       	ldi	r22, 0x00	; 0
 21c:	83 e1       	ldi	r24, 0x13	; 19
 21e:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	80 e2       	ldi	r24, 0x20	; 32
 226:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8c e0       	ldi	r24, 0x0C	; 12
 22e:	0e 94 6d 00 	call	0xda	; 0xda <LcdSend>
 232:	0e 94 78 00 	call	0xf0	; 0xf0 <Lcd_clear>
 236:	0e 94 90 00 	call	0x120	; 0x120 <Lcd_update>
 23a:	08 95       	ret

0000023c <Lcd_pixel>:
 23c:	84 35       	cpi	r24, 0x54	; 84
 23e:	08 f0       	brcs	.+2      	; 0x242 <Lcd_pixel+0x6>
 240:	52 c0       	rjmp	.+164    	; 0x2e6 <Lcd_pixel+0xaa>
 242:	60 33       	cpi	r22, 0x30	; 48
 244:	08 f0       	brcs	.+2      	; 0x248 <Lcd_pixel+0xc>
 246:	51 c0       	rjmp	.+162    	; 0x2ea <Lcd_pixel+0xae>
 248:	26 2f       	mov	r18, r22
 24a:	26 95       	lsr	r18
 24c:	26 95       	lsr	r18
 24e:	26 95       	lsr	r18
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	34 e5       	ldi	r19, 0x54	; 84
 254:	23 9f       	mul	r18, r19
 256:	80 0d       	add	r24, r0
 258:	91 1d       	adc	r25, r1
 25a:	11 24       	eor	r1, r1
 25c:	22 0f       	add	r18, r18
 25e:	22 0f       	add	r18, r18
 260:	22 0f       	add	r18, r18
 262:	62 1b       	sub	r22, r18
 264:	fc 01       	movw	r30, r24
 266:	eb 59       	subi	r30, 0x9B	; 155
 268:	ff 4f       	sbci	r31, 0xFF	; 255
 26a:	20 81       	ld	r18, Z
 26c:	41 11       	cpse	r20, r1
 26e:	0a c0       	rjmp	.+20     	; 0x284 <Lcd_pixel+0x48>
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	50 e0       	ldi	r21, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <Lcd_pixel+0x3e>
 276:	44 0f       	add	r20, r20
 278:	55 1f       	adc	r21, r21
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <Lcd_pixel+0x3a>
 27e:	40 95       	com	r20
 280:	24 23       	and	r18, r20
 282:	15 c0       	rjmp	.+42     	; 0x2ae <Lcd_pixel+0x72>
 284:	41 30       	cpi	r20, 0x01	; 1
 286:	49 f4       	brne	.+18     	; 0x29a <Lcd_pixel+0x5e>
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <Lcd_pixel+0x56>
 28e:	44 0f       	add	r20, r20
 290:	55 1f       	adc	r21, r21
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <Lcd_pixel+0x52>
 296:	24 2b       	or	r18, r20
 298:	0a c0       	rjmp	.+20     	; 0x2ae <Lcd_pixel+0x72>
 29a:	42 30       	cpi	r20, 0x02	; 2
 29c:	41 f4       	brne	.+16     	; 0x2ae <Lcd_pixel+0x72>
 29e:	41 e0       	ldi	r20, 0x01	; 1
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <Lcd_pixel+0x6c>
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <Lcd_pixel+0x68>
 2ac:	24 27       	eor	r18, r20
 2ae:	fc 01       	movw	r30, r24
 2b0:	eb 59       	subi	r30, 0x9B	; 155
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	20 83       	st	Z, r18
 2b6:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <LoWaterMark>
 2ba:	30 91 64 00 	lds	r19, 0x0064	; 0x800064 <LoWaterMark+0x1>
 2be:	82 17       	cp	r24, r18
 2c0:	93 07       	cpc	r25, r19
 2c2:	24 f4       	brge	.+8      	; 0x2cc <Lcd_pixel+0x90>
 2c4:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <LoWaterMark+0x1>
 2c8:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <LoWaterMark>
 2cc:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <HiWaterMark>
 2d0:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <HiWaterMark+0x1>
 2d4:	28 17       	cp	r18, r24
 2d6:	39 07       	cpc	r19, r25
 2d8:	54 f4       	brge	.+20     	; 0x2ee <Lcd_pixel+0xb2>
 2da:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <HiWaterMark+0x1>
 2de:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <HiWaterMark>
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	08 95       	ret
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	08 95       	ret
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	08 95       	ret
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	08 95       	ret

000002f2 <Lcd_line>:
 2f2:	7f 92       	push	r7
 2f4:	8f 92       	push	r8
 2f6:	9f 92       	push	r9
 2f8:	af 92       	push	r10
 2fa:	bf 92       	push	r11
 2fc:	cf 92       	push	r12
 2fe:	df 92       	push	r13
 300:	ef 92       	push	r14
 302:	ff 92       	push	r15
 304:	0f 93       	push	r16
 306:	1f 93       	push	r17
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	d8 2f       	mov	r29, r24
 30e:	c6 2f       	mov	r28, r22
 310:	74 2e       	mov	r7, r20
 312:	82 2e       	mov	r8, r18
 314:	a2 2e       	mov	r10, r18
 316:	b1 2c       	mov	r11, r1
 318:	a6 1a       	sub	r10, r22
 31a:	b1 08       	sbc	r11, r1
 31c:	c4 2e       	mov	r12, r20
 31e:	d1 2c       	mov	r13, r1
 320:	c8 1a       	sub	r12, r24
 322:	d1 08       	sbc	r13, r1
 324:	bb 20       	and	r11, r11
 326:	34 f4       	brge	.+12     	; 0x334 <Lcd_line+0x42>
 328:	b1 94       	neg	r11
 32a:	a1 94       	neg	r10
 32c:	b1 08       	sbc	r11, r1
 32e:	99 24       	eor	r9, r9
 330:	9a 94       	dec	r9
 332:	02 c0       	rjmp	.+4      	; 0x338 <Lcd_line+0x46>
 334:	99 24       	eor	r9, r9
 336:	93 94       	inc	r9
 338:	dd 20       	and	r13, r13
 33a:	2c f4       	brge	.+10     	; 0x346 <Lcd_line+0x54>
 33c:	d1 94       	neg	r13
 33e:	c1 94       	neg	r12
 340:	d1 08       	sbc	r13, r1
 342:	1f ef       	ldi	r17, 0xFF	; 255
 344:	01 c0       	rjmp	.+2      	; 0x348 <Lcd_line+0x56>
 346:	11 e0       	ldi	r17, 0x01	; 1
 348:	40 2f       	mov	r20, r16
 34a:	6c 2f       	mov	r22, r28
 34c:	8d 2f       	mov	r24, r29
 34e:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
 352:	81 11       	cpse	r24, r1
 354:	3e c0       	rjmp	.+124    	; 0x3d2 <Lcd_line+0xe0>
 356:	cc 0c       	add	r12, r12
 358:	dd 1c       	adc	r13, r13
 35a:	aa 0c       	add	r10, r10
 35c:	bb 1c       	adc	r11, r11
 35e:	ac 14       	cp	r10, r12
 360:	bd 04       	cpc	r11, r13
 362:	d4 f4       	brge	.+52     	; 0x398 <Lcd_line+0xa6>
 364:	c6 01       	movw	r24, r12
 366:	95 95       	asr	r25
 368:	87 95       	ror	r24
 36a:	75 01       	movw	r14, r10
 36c:	e8 1a       	sub	r14, r24
 36e:	f9 0a       	sbc	r15, r25
 370:	7d 16       	cp	r7, r29
 372:	59 f1       	breq	.+86     	; 0x3ca <Lcd_line+0xd8>
 374:	ff 20       	and	r15, r15
 376:	1c f0       	brlt	.+6      	; 0x37e <Lcd_line+0x8c>
 378:	c9 0d       	add	r28, r9
 37a:	ec 18       	sub	r14, r12
 37c:	fd 08       	sbc	r15, r13
 37e:	d1 0f       	add	r29, r17
 380:	ea 0c       	add	r14, r10
 382:	fb 1c       	adc	r15, r11
 384:	40 2f       	mov	r20, r16
 386:	6c 2f       	mov	r22, r28
 388:	8d 2f       	mov	r24, r29
 38a:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
 38e:	81 11       	cpse	r24, r1
 390:	20 c0       	rjmp	.+64     	; 0x3d2 <Lcd_line+0xe0>
 392:	d7 11       	cpse	r29, r7
 394:	ef cf       	rjmp	.-34     	; 0x374 <Lcd_line+0x82>
 396:	19 c0       	rjmp	.+50     	; 0x3ca <Lcd_line+0xd8>
 398:	c5 01       	movw	r24, r10
 39a:	95 95       	asr	r25
 39c:	87 95       	ror	r24
 39e:	76 01       	movw	r14, r12
 3a0:	e8 1a       	sub	r14, r24
 3a2:	f9 0a       	sbc	r15, r25
 3a4:	8c 16       	cp	r8, r28
 3a6:	89 f0       	breq	.+34     	; 0x3ca <Lcd_line+0xd8>
 3a8:	ff 20       	and	r15, r15
 3aa:	1c f0       	brlt	.+6      	; 0x3b2 <Lcd_line+0xc0>
 3ac:	d1 0f       	add	r29, r17
 3ae:	ea 18       	sub	r14, r10
 3b0:	fb 08       	sbc	r15, r11
 3b2:	c9 0d       	add	r28, r9
 3b4:	ec 0c       	add	r14, r12
 3b6:	fd 1c       	adc	r15, r13
 3b8:	40 2f       	mov	r20, r16
 3ba:	6c 2f       	mov	r22, r28
 3bc:	8d 2f       	mov	r24, r29
 3be:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
 3c2:	81 11       	cpse	r24, r1
 3c4:	06 c0       	rjmp	.+12     	; 0x3d2 <Lcd_line+0xe0>
 3c6:	c8 11       	cpse	r28, r8
 3c8:	ef cf       	rjmp	.-34     	; 0x3a8 <Lcd_line+0xb6>
 3ca:	81 e0       	ldi	r24, 0x01	; 1
 3cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	df 91       	pop	r29
 3d4:	cf 91       	pop	r28
 3d6:	1f 91       	pop	r17
 3d8:	0f 91       	pop	r16
 3da:	ff 90       	pop	r15
 3dc:	ef 90       	pop	r14
 3de:	df 90       	pop	r13
 3e0:	cf 90       	pop	r12
 3e2:	bf 90       	pop	r11
 3e4:	af 90       	pop	r10
 3e6:	9f 90       	pop	r9
 3e8:	8f 90       	pop	r8
 3ea:	7f 90       	pop	r7
 3ec:	08 95       	ret

000003ee <Lcd_rect_Fill>:
 *                          y2    -> абсолютная координата y правого нижнего угла
 *                          mode  -> Off, On или Xor. Смотри enum в n5110.h
 * Возвращаемое значение :  смотри возвращаемое значение в n5110lcd.h
 */
byte Lcd_rect_Fill ( byte x1, byte y1, byte x2, byte y2, LcdPixelMode mode )
{
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	0f 93       	push	r16
 3f6:	1f 93       	push	r17
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
byte FilltmpIdx;
byte FilltmpIdy;
FilltmpIdy=y1+1;
FilltmpIdx=x1+1;
 // Проверка границ
 if ( ( x1 >= LCD_X_RES) ||  ( x2 >= LCD_X_RES) || ( y1 >= LCD_Y_RES) || ( y2 >= LCD_Y_RES) )
 3fc:	84 35       	cpi	r24, 0x54	; 84
 3fe:	08 f0       	brcs	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	4c c0       	rjmp	.+152    	; 0x49a <__stack+0x3b>
 402:	44 35       	cpi	r20, 0x54	; 84
 404:	08 f0       	brcs	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	4b c0       	rjmp	.+150    	; 0x49e <__stack+0x3f>
 408:	60 33       	cpi	r22, 0x30	; 48
 40a:	08 f0       	brcs	.+2      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40c:	4a c0       	rjmp	.+148    	; 0x4a2 <__stack+0x43>
 40e:	20 33       	cpi	r18, 0x30	; 48
 410:	08 f0       	brcs	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	49 c0       	rjmp	.+146    	; 0x4a6 <__stack+0x47>
 return OUT_OF_BORDER;

 if ( ( x2 > x1 ) && ( y2 > y1 ) )
 414:	84 17       	cp	r24, r20
 416:	e0 f5       	brcc	.+120    	; 0x490 <__stack+0x31>
 418:	62 17       	cp	r22, r18
 41a:	d0 f5       	brcc	.+116    	; 0x490 <__stack+0x31>
 41c:	e2 2e       	mov	r14, r18
 41e:	d4 2f       	mov	r29, r20
 420:	16 2f       	mov	r17, r22
 422:	c8 2f       	mov	r28, r24
 424:	f8 2e       	mov	r15, r24
 {

	 // Рисуем горизонтальные линии
	 for ( tmpIdx = x1; tmpIdx <= x2; tmpIdx++ )
	 {
		 Lcd_pixel( tmpIdx, y1, mode );
 426:	40 2f       	mov	r20, r16
 428:	61 2f       	mov	r22, r17
 42a:	8f 2d       	mov	r24, r15
 42c:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
		 Lcd_pixel( tmpIdx, y2, mode );
 430:	40 2f       	mov	r20, r16
 432:	6e 2d       	mov	r22, r14
 434:	8f 2d       	mov	r24, r15
 436:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>

 if ( ( x2 > x1 ) && ( y2 > y1 ) )
 {

	 // Рисуем горизонтальные линии
	 for ( tmpIdx = x1; tmpIdx <= x2; tmpIdx++ )
 43a:	f3 94       	inc	r15
 43c:	df 15       	cp	r29, r15
 43e:	98 f7       	brcc	.-26     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 440:	f1 2e       	mov	r15, r17
	 

	 // Рисуем вертикальные линии
	 for ( tmpIdx = y1; tmpIdx <= y2; tmpIdx++ )
	 {
		 Lcd_pixel( x1, tmpIdx, mode );
 442:	40 2f       	mov	r20, r16
 444:	6f 2d       	mov	r22, r15
 446:	8c 2f       	mov	r24, r28
 448:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
		 Lcd_pixel( x2, tmpIdx, mode );
 44c:	40 2f       	mov	r20, r16
 44e:	6f 2d       	mov	r22, r15
 450:	8d 2f       	mov	r24, r29
 452:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
		 
	 }
	 

	 // Рисуем вертикальные линии
	 for ( tmpIdx = y1; tmpIdx <= y2; tmpIdx++ )
 456:	f3 94       	inc	r15
 458:	ef 14       	cp	r14, r15
 45a:	98 f7       	brcc	.-26     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
byte Lcd_rect_Fill ( byte x1, byte y1, byte x2, byte y2, LcdPixelMode mode )
{
byte tmpIdx;
byte FilltmpIdx;
byte FilltmpIdy;
FilltmpIdy=y1+1;
 45c:	1f 5f       	subi	r17, 0xFF	; 255
	 {
		 Lcd_pixel( x1, tmpIdx, mode );
		 Lcd_pixel( x2, tmpIdx, mode );
	 }
	 //Рисуем внутреннию область
	 for(;FilltmpIdy<=y2;FilltmpIdy++)
 45e:	e1 16       	cp	r14, r17
 460:	b8 f0       	brcs	.+46     	; 0x490 <__stack+0x31>
{
byte tmpIdx;
byte FilltmpIdx;
byte FilltmpIdy;
FilltmpIdy=y1+1;
FilltmpIdx=x1+1;
 462:	ff 24       	eor	r15, r15
 464:	f3 94       	inc	r15
 466:	fc 0e       	add	r15, r28
 468:	cf 2d       	mov	r28, r15
	 //Рисуем внутреннию область
	 for(;FilltmpIdy<=y2;FilltmpIdy++)
	 {
	  if (FilltmpIdx>x2)
	  {
		  FilltmpIdx=x1+1;
 46a:	df 2c       	mov	r13, r15
		 Lcd_pixel( x2, tmpIdx, mode );
	 }
	 //Рисуем внутреннию область
	 for(;FilltmpIdy<=y2;FilltmpIdy++)
	 {
	  if (FilltmpIdx>x2)
 46c:	dc 17       	cp	r29, r28
 46e:	18 f4       	brcc	.+6      	; 0x476 <__stack+0x17>
	  {
		  FilltmpIdx=x1+1;
	  }
		 for(;FilltmpIdx<=x2;FilltmpIdx++)
 470:	df 15       	cp	r29, r15
 472:	50 f0       	brcs	.+20     	; 0x488 <__stack+0x29>
	 //Рисуем внутреннию область
	 for(;FilltmpIdy<=y2;FilltmpIdy++)
	 {
	  if (FilltmpIdx>x2)
	  {
		  FilltmpIdx=x1+1;
 474:	cd 2d       	mov	r28, r13
	  }
		 for(;FilltmpIdx<=x2;FilltmpIdx++)
		 {
		 Lcd_pixel(FilltmpIdx,FilltmpIdy, mode );
 476:	40 2f       	mov	r20, r16
 478:	61 2f       	mov	r22, r17
 47a:	8c 2f       	mov	r24, r28
 47c:	0e 94 1e 01 	call	0x23c	; 0x23c <Lcd_pixel>
	 {
	  if (FilltmpIdx>x2)
	  {
		  FilltmpIdx=x1+1;
	  }
		 for(;FilltmpIdx<=x2;FilltmpIdx++)
 480:	cf 5f       	subi	r28, 0xFF	; 255
 482:	dc 17       	cp	r29, r28
 484:	c0 f7       	brcc	.-16     	; 0x476 <__stack+0x17>
 486:	01 c0       	rjmp	.+2      	; 0x48a <__stack+0x2b>
	 //Рисуем внутреннию область
	 for(;FilltmpIdy<=y2;FilltmpIdy++)
	 {
	  if (FilltmpIdx>x2)
	  {
		  FilltmpIdx=x1+1;
 488:	cd 2d       	mov	r28, r13
	 {
		 Lcd_pixel( x1, tmpIdx, mode );
		 Lcd_pixel( x2, tmpIdx, mode );
	 }
	 //Рисуем внутреннию область
	 for(;FilltmpIdy<=y2;FilltmpIdy++)
 48a:	1f 5f       	subi	r17, 0xFF	; 255
 48c:	e1 16       	cp	r14, r17
 48e:	70 f7       	brcc	.-36     	; 0x46c <__stack+0xd>


	 
 }
 // Установка флага изменений кэша
 UpdateLcd = TRUE;
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 return OK;
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <__stack+0x49>
byte FilltmpIdy;
FilltmpIdy=y1+1;
FilltmpIdx=x1+1;
 // Проверка границ
 if ( ( x1 >= LCD_X_RES) ||  ( x2 >= LCD_X_RES) || ( y1 >= LCD_Y_RES) || ( y2 >= LCD_Y_RES) )
 return OUT_OF_BORDER;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	05 c0       	rjmp	.+10     	; 0x4a8 <__stack+0x49>
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <__stack+0x49>
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <__stack+0x49>
 4a6:	81 e0       	ldi	r24, 0x01	; 1
	 
 }
 // Установка флага изменений кэша
 UpdateLcd = TRUE;
 return OK;
}
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	1f 91       	pop	r17
 4ae:	0f 91       	pop	r16
 4b0:	ff 90       	pop	r15
 4b2:	ef 90       	pop	r14
 4b4:	df 90       	pop	r13
 4b6:	08 95       	ret

000004b8 <Lcd_triangle>:
 *                          y3    -> абсолютная координата y третьего угла треугольника
 *                          mode  -> Off, On или Xor. Смотри enum в n5110.h
 * Возвращаемое значение :  смотри возвращаемое значение в n5110lcd.h
 */
byte Lcd_triangle(byte x1, byte y1, byte x2, byte y2,byte x3, byte y3,LcdPixelMode mode)
{
 4b8:	cf 92       	push	r12
 4ba:	df 92       	push	r13
 4bc:	ef 92       	push	r14
 4be:	ff 92       	push	r15
 4c0:	0f 93       	push	r16
 4c2:	1f 93       	push	r17
 4c4:	cf 93       	push	r28
 4c6:	df 93       	push	r29
 4c8:	d8 2f       	mov	r29, r24
 4ca:	16 2f       	mov	r17, r22
 4cc:	f4 2e       	mov	r15, r20
 4ce:	d2 2e       	mov	r13, r18
 4d0:	c0 2f       	mov	r28, r16
Lcd_line(x1,y1,x2,y2,mode);
 4d2:	0c 2d       	mov	r16, r12
 4d4:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_line>
Lcd_line(x2,y2,x3,y3,mode);
 4d8:	2e 2d       	mov	r18, r14
 4da:	4c 2f       	mov	r20, r28
 4dc:	6d 2d       	mov	r22, r13
 4de:	8f 2d       	mov	r24, r15
 4e0:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_line>
Lcd_line(x3,y3,x1,y1,mode);
 4e4:	21 2f       	mov	r18, r17
 4e6:	4d 2f       	mov	r20, r29
 4e8:	6e 2d       	mov	r22, r14
 4ea:	8c 2f       	mov	r24, r28
 4ec:	0e 94 79 01 	call	0x2f2	; 0x2f2 <Lcd_line>


UpdateLcd = TRUE;
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
return OK;
}
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	1f 91       	pop	r17
 4fe:	0f 91       	pop	r16
 500:	ff 90       	pop	r15
 502:	ef 90       	pop	r14
 504:	df 90       	pop	r13
 506:	cf 90       	pop	r12
 508:	08 95       	ret

0000050a <__divmodhi4>:
 50a:	97 fb       	bst	r25, 7
 50c:	07 2e       	mov	r0, r23
 50e:	16 f4       	brtc	.+4      	; 0x514 <__divmodhi4+0xa>
 510:	00 94       	com	r0
 512:	07 d0       	rcall	.+14     	; 0x522 <__divmodhi4_neg1>
 514:	77 fd       	sbrc	r23, 7
 516:	09 d0       	rcall	.+18     	; 0x52a <__divmodhi4_neg2>
 518:	0e 94 99 02 	call	0x532	; 0x532 <__udivmodhi4>
 51c:	07 fc       	sbrc	r0, 7
 51e:	05 d0       	rcall	.+10     	; 0x52a <__divmodhi4_neg2>
 520:	3e f4       	brtc	.+14     	; 0x530 <__divmodhi4_exit>

00000522 <__divmodhi4_neg1>:
 522:	90 95       	com	r25
 524:	81 95       	neg	r24
 526:	9f 4f       	sbci	r25, 0xFF	; 255
 528:	08 95       	ret

0000052a <__divmodhi4_neg2>:
 52a:	70 95       	com	r23
 52c:	61 95       	neg	r22
 52e:	7f 4f       	sbci	r23, 0xFF	; 255

00000530 <__divmodhi4_exit>:
 530:	08 95       	ret

00000532 <__udivmodhi4>:
 532:	aa 1b       	sub	r26, r26
 534:	bb 1b       	sub	r27, r27
 536:	51 e1       	ldi	r21, 0x11	; 17
 538:	07 c0       	rjmp	.+14     	; 0x548 <__udivmodhi4_ep>

0000053a <__udivmodhi4_loop>:
 53a:	aa 1f       	adc	r26, r26
 53c:	bb 1f       	adc	r27, r27
 53e:	a6 17       	cp	r26, r22
 540:	b7 07       	cpc	r27, r23
 542:	10 f0       	brcs	.+4      	; 0x548 <__udivmodhi4_ep>
 544:	a6 1b       	sub	r26, r22
 546:	b7 0b       	sbc	r27, r23

00000548 <__udivmodhi4_ep>:
 548:	88 1f       	adc	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	5a 95       	dec	r21
 54e:	a9 f7       	brne	.-22     	; 0x53a <__udivmodhi4_loop>
 550:	80 95       	com	r24
 552:	90 95       	com	r25
 554:	bc 01       	movw	r22, r24
 556:	cd 01       	movw	r24, r26
 558:	08 95       	ret

0000055a <_exit>:
 55a:	f8 94       	cli

0000055c <__stop_program>:
 55c:	ff cf       	rjmp	.-2      	; 0x55c <__stop_program>

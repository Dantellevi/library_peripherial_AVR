
HC-05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  0080006c  0080006c  0000055e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000055e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000590  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a6b  00000000  00000000  000007cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d64  00000000  00000000  00002237  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d91  00000000  00000000  00002f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000050c  00000000  00000000  00003d2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001031  00000000  00000000  000048c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000058f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  8a:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <IndexNumber>:
	//
	//-------------------------------------------------------------------------

	char IndexNumber(void)
	{
		if (IndexIN >= IndexOUT)
  92:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <IndexIN>
  96:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <IndexOUT>
  9a:	89 17       	cp	r24, r25
  9c:	10 f0       	brcs	.+4      	; 0xa2 <IndexNumber+0x10>
		{
			return (IndexIN - IndexOUT);
  9e:	89 1b       	sub	r24, r25
  a0:	08 95       	ret
  a2:	80 58       	subi	r24, 0x80	; 128
		}
		else
		{
			return ((BUFFER_SIZE - IndexOUT) + IndexIN);
  a4:	89 1b       	sub	r24, r25
		}
	}
  a6:	08 95       	ret

000000a8 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  a8:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <IndexIN>
  ac:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  ae:	ef 77       	andi	r30, 0x7F	; 127
  b0:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <IndexIN>
		buffer[IndexIN] = val;
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	e0 59       	subi	r30, 0x90	; 144
  b8:	ff 4f       	sbci	r31, 0xFF	; 255
  ba:	80 83       	st	Z, r24
  bc:	08 95       	ret

000000be <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	2f 93       	push	r18
  ca:	3f 93       	push	r19
  cc:	4f 93       	push	r20
  ce:	5f 93       	push	r21
  d0:	6f 93       	push	r22
  d2:	7f 93       	push	r23
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
  dc:	ef 93       	push	r30
  de:	ff 93       	push	r31
	uart_old = UDR;
  e0:	8c b1       	in	r24, 0x0c	; 12
  e2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	uart_flag = 1;
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <uart_flag>
	InBuffer(uart_old);
  ec:	0e 94 54 00 	call	0xa8	; 0xa8 <InBuffer>
}
  f0:	ff 91       	pop	r31
  f2:	ef 91       	pop	r30
  f4:	bf 91       	pop	r27
  f6:	af 91       	pop	r26
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	7f 91       	pop	r23
  fe:	6f 91       	pop	r22
 100:	5f 91       	pop	r21
 102:	4f 91       	pop	r20
 104:	3f 91       	pop	r19
 106:	2f 91       	pop	r18
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <OutBufferStr>:
	//	буфера.
	//
	//-------------------------------------------------------------------------

	char OutBufferStr(char *str, char lenght)
	{
 112:	dc 01       	movw	r26, r24
 114:	86 2f       	mov	r24, r22
		for(char i=0; i<lenght; i++)
 116:	66 23       	and	r22, r22
 118:	a9 f0       	breq	.+42     	; 0x144 <OutBufferStr+0x32>
 11a:	2f ef       	ldi	r18, 0xFF	; 255
 11c:	26 0f       	add	r18, r22
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	2f 5f       	subi	r18, 0xFF	; 255
 122:	3f 4f       	sbci	r19, 0xFF	; 255
 124:	2a 0f       	add	r18, r26
 126:	3b 1f       	adc	r19, r27
		{
			IndexOUT++;
 128:	e0 91 6e 00 	lds	r30, 0x006E	; 0x80006e <IndexOUT>
 12c:	ef 5f       	subi	r30, 0xFF	; 255
			IndexOUT &= BUFFER_MASK;
 12e:	ef 77       	andi	r30, 0x7F	; 127
 130:	e0 93 6e 00 	sts	0x006E, r30	; 0x80006e <IndexOUT>
			*str = buffer[IndexOUT];
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	e0 59       	subi	r30, 0x90	; 144
 138:	ff 4f       	sbci	r31, 0xFF	; 255
 13a:	90 81       	ld	r25, Z
 13c:	9d 93       	st	X+, r25
	//
	//-------------------------------------------------------------------------

	char OutBufferStr(char *str, char lenght)
	{
		for(char i=0; i<lenght; i++)
 13e:	a2 17       	cp	r26, r18
 140:	b3 07       	cpc	r27, r19
 142:	91 f7       	brne	.-28     	; 0x128 <OutBufferStr+0x16>
			IndexOUT++;
			IndexOUT &= BUFFER_MASK;
			*str = buffer[IndexOUT];
			str++;
		}
		uart_flag = 0;
 144:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <uart_flag>
		
		return lenght;
	}
 148:	08 95       	ret

0000014a <GetData>:
	//
	//-------------------------------------------------------------------------

	char GetData(void)
	{
		if(IndexIN != IndexOUT)
 14a:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <IndexIN>
 14e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <IndexOUT>
 152:	98 17       	cp	r25, r24
 154:	19 f0       	breq	.+6      	; 0x15c <GetData+0x12>
		{
			return IndexNumber();
 156:	0e 94 49 00 	call	0x92	; 0x92 <IndexNumber>
 15a:	08 95       	ret
		}
		return 0;
 15c:	80 e0       	ldi	r24, 0x00	; 0
	}
 15e:	08 95       	ret

00000160 <OutPin>:
	{
	 Send_byte(Kmal[d]);
	
	}
	
}
 160:	8a b3       	in	r24, 0x1a	; 26
 162:	80 6f       	ori	r24, 0xF0	; 240
 164:	8a bb       	out	0x1a, r24	; 26
 166:	8b b3       	in	r24, 0x1b	; 27
 168:	8f 70       	andi	r24, 0x0F	; 15
 16a:	8b bb       	out	0x1b, r24	; 27
 16c:	08 95       	ret

0000016e <Strob>:
 16e:	da 9a       	sbi	0x1b, 2	; 27
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <Strob+0x4>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Strob+0xa>
 178:	da 98       	cbi	0x1b, 2	; 27
 17a:	08 95       	ret

0000017c <Busy_flag>:
 17c:	cf 93       	push	r28
 17e:	8a b3       	in	r24, 0x1a	; 26
 180:	8f 70       	andi	r24, 0x0F	; 15
 182:	8a bb       	out	0x1a, r24	; 26
 184:	8b b3       	in	r24, 0x1b	; 27
 186:	80 6f       	ori	r24, 0xF0	; 240
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	d9 9a       	sbi	0x1b, 1	; 27
 18c:	da 9a       	sbi	0x1b, 2	; 27
 18e:	00 00       	nop
 190:	00 00       	nop
 192:	c9 b3       	in	r28, 0x19	; 25
 194:	da 98       	cbi	0x1b, 2	; 27
 196:	00 00       	nop
 198:	00 00       	nop
 19a:	0e 94 b7 00 	call	0x16e	; 0x16e <Strob>
 19e:	00 00       	nop
 1a0:	00 00       	nop
 1a2:	cc 23       	and	r28, r28
 1a4:	9c f3       	brlt	.-26     	; 0x18c <Busy_flag+0x10>
 1a6:	d9 98       	cbi	0x1b, 1	; 27
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <Send_byte>:
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	d8 2f       	mov	r29, r24
 1b2:	0e 94 b0 00 	call	0x160	; 0x160 <OutPin>
 1b6:	9d 2f       	mov	r25, r29
 1b8:	92 95       	swap	r25
 1ba:	9f 70       	andi	r25, 0x0F	; 15
 1bc:	cd 2f       	mov	r28, r29
 1be:	cf 70       	andi	r28, 0x0F	; 15
 1c0:	90 fd       	sbrc	r25, 0
 1c2:	dc 9a       	sbi	0x1b, 4	; 27
 1c4:	96 95       	lsr	r25
 1c6:	90 fd       	sbrc	r25, 0
 1c8:	dd 9a       	sbi	0x1b, 5	; 27
 1ca:	96 95       	lsr	r25
 1cc:	90 fd       	sbrc	r25, 0
 1ce:	de 9a       	sbi	0x1b, 6	; 27
 1d0:	96 95       	lsr	r25
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <Send_byte+0x2a>
 1d4:	df 9a       	sbi	0x1b, 7	; 27
 1d6:	0e 94 b7 00 	call	0x16e	; 0x16e <Strob>
 1da:	0e 94 b0 00 	call	0x160	; 0x160 <OutPin>
 1de:	d0 fd       	sbrc	r29, 0
 1e0:	dc 9a       	sbi	0x1b, 4	; 27
 1e2:	8c 2f       	mov	r24, r28
 1e4:	86 95       	lsr	r24
 1e6:	80 fd       	sbrc	r24, 0
 1e8:	dd 9a       	sbi	0x1b, 5	; 27
 1ea:	86 95       	lsr	r24
 1ec:	80 fd       	sbrc	r24, 0
 1ee:	de 9a       	sbi	0x1b, 6	; 27
 1f0:	86 95       	lsr	r24
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <Send_byte+0x4a>
 1f4:	df 9a       	sbi	0x1b, 7	; 27
 1f6:	0e 94 b7 00 	call	0x16e	; 0x16e <Strob>
 1fa:	8a b3       	in	r24, 0x1a	; 26
 1fc:	8f 70       	andi	r24, 0x0F	; 15
 1fe:	8a bb       	out	0x1a, r24	; 26
 200:	8b b3       	in	r24, 0x1b	; 27
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	8b bb       	out	0x1b, r24	; 27
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	08 95       	ret

0000020c <LCDcommand>:
 20c:	cf 93       	push	r28
 20e:	c8 2f       	mov	r28, r24
 210:	0e 94 be 00 	call	0x17c	; 0x17c <Busy_flag>
 214:	8c 2f       	mov	r24, r28
 216:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Send_byte>
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <LCDdata>:
 21e:	cf 93       	push	r28
 220:	c8 2f       	mov	r28, r24
 222:	0e 94 be 00 	call	0x17c	; 0x17c <Busy_flag>
 226:	d8 9a       	sbi	0x1b, 0	; 27
 228:	8c 2f       	mov	r24, r28
 22a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <Send_byte>
 22e:	d8 98       	cbi	0x1b, 0	; 27
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <LCDGotoXY>:
 234:	62 30       	cpi	r22, 0x02	; 2
 236:	31 f0       	breq	.+12     	; 0x244 <LCDGotoXY+0x10>
 238:	63 30       	cpi	r22, 0x03	; 3
 23a:	31 f0       	breq	.+12     	; 0x248 <LCDGotoXY+0x14>
 23c:	61 30       	cpi	r22, 0x01	; 1
 23e:	29 f4       	brne	.+10     	; 0x24a <LCDGotoXY+0x16>
 240:	80 5c       	subi	r24, 0xC0	; 192
 242:	03 c0       	rjmp	.+6      	; 0x24a <LCDGotoXY+0x16>
 244:	8c 5e       	subi	r24, 0xEC	; 236
 246:	01 c0       	rjmp	.+2      	; 0x24a <LCDGotoXY+0x16>
 248:	8c 5a       	subi	r24, 0xAC	; 172
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	0e 94 06 01 	call	0x20c	; 0x20c <LCDcommand>
 250:	08 95       	ret

00000252 <LCDstringXY>:
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	ec 01       	movw	r28, r24
 258:	86 2f       	mov	r24, r22
 25a:	64 2f       	mov	r22, r20
 25c:	0e 94 1a 01 	call	0x234	; 0x234 <LCDGotoXY>
 260:	88 81       	ld	r24, Y
 262:	88 23       	and	r24, r24
 264:	31 f0       	breq	.+12     	; 0x272 <LCDstringXY+0x20>
 266:	21 96       	adiw	r28, 0x01	; 1
 268:	0e 94 0f 01 	call	0x21e	; 0x21e <LCDdata>
 26c:	89 91       	ld	r24, Y+
 26e:	81 11       	cpse	r24, r1
 270:	fb cf       	rjmp	.-10     	; 0x268 <LCDstringXY+0x16>
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret

00000278 <LCDinit>:
 278:	cf 93       	push	r28
 27a:	2f ef       	ldi	r18, 0xFF	; 255
 27c:	80 e7       	ldi	r24, 0x70	; 112
 27e:	92 e0       	ldi	r25, 0x02	; 2
 280:	21 50       	subi	r18, 0x01	; 1
 282:	80 40       	sbci	r24, 0x00	; 0
 284:	90 40       	sbci	r25, 0x00	; 0
 286:	e1 f7       	brne	.-8      	; 0x280 <LCDinit+0x8>
 288:	00 c0       	rjmp	.+0      	; 0x28a <LCDinit+0x12>
 28a:	00 00       	nop
 28c:	8a b3       	in	r24, 0x1a	; 26
 28e:	87 60       	ori	r24, 0x07	; 7
 290:	8a bb       	out	0x1a, r24	; 26
 292:	8b b3       	in	r24, 0x1b	; 27
 294:	88 7f       	andi	r24, 0xF8	; 248
 296:	8b bb       	out	0x1b, r24	; 27
 298:	0e 94 b0 00 	call	0x160	; 0x160 <OutPin>
 29c:	c3 e0       	ldi	r28, 0x03	; 3
 29e:	8b b3       	in	r24, 0x1b	; 27
 2a0:	80 63       	ori	r24, 0x30	; 48
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	0e 94 b7 00 	call	0x16e	; 0x16e <Strob>
 2a8:	8f e0       	ldi	r24, 0x0F	; 15
 2aa:	97 e2       	ldi	r25, 0x27	; 39
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <LCDinit+0x34>
 2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <LCDinit+0x3a>
 2b2:	00 00       	nop
 2b4:	c1 50       	subi	r28, 0x01	; 1
 2b6:	99 f7       	brne	.-26     	; 0x29e <LCDinit+0x26>
 2b8:	0e 94 be 00 	call	0x17c	; 0x17c <Busy_flag>
 2bc:	0e 94 b0 00 	call	0x160	; 0x160 <OutPin>
 2c0:	dd 9a       	sbi	0x1b, 5	; 27
 2c2:	0e 94 b7 00 	call	0x16e	; 0x16e <Strob>
 2c6:	88 e2       	ldi	r24, 0x28	; 40
 2c8:	0e 94 06 01 	call	0x20c	; 0x20c <LCDcommand>
 2cc:	8c e0       	ldi	r24, 0x0C	; 12
 2ce:	0e 94 06 01 	call	0x20c	; 0x20c <LCDcommand>
 2d2:	86 e0       	ldi	r24, 0x06	; 6
 2d4:	0e 94 06 01 	call	0x20c	; 0x20c <LCDcommand>
 2d8:	82 e0       	ldi	r24, 0x02	; 2
 2da:	0e 94 06 01 	call	0x20c	; 0x20c <LCDcommand>
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 06 01 	call	0x20c	; 0x20c <LCDcommand>
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <LCDputsIntGotoXY>:
	_delay_us(1);
	CPORT&=~(1<<E);//Выключили строб.
}

void LCDputsIntGotoXY(int val,uint8_t x,uint8_t y)		//преобразование целого в вещественное число
{
 2e8:	0f 93       	push	r16
 2ea:	1f 93       	push	r17
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	a8 97       	sbiw	r28, 0x28	; 40
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	f8 94       	cli
 2fa:	de bf       	out	0x3e, r29	; 62
 2fc:	0f be       	out	0x3f, r0	; 63
 2fe:	cd bf       	out	0x3d, r28	; 61
 300:	16 2f       	mov	r17, r22
 302:	04 2f       	mov	r16, r20
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 304:	4a e0       	ldi	r20, 0x0A	; 10
 306:	be 01       	movw	r22, r28
 308:	6f 5f       	subi	r22, 0xFF	; 255
 30a:	7f 4f       	sbci	r23, 0xFF	; 255
 30c:	0e 94 28 02 	call	0x450	; 0x450 <__itoa_ncheck>
char str[40];
itoa(val,str,10);

LCDstringXY(str,x,y);
 310:	40 2f       	mov	r20, r16
 312:	61 2f       	mov	r22, r17
 314:	ce 01       	movw	r24, r28
 316:	01 96       	adiw	r24, 0x01	; 1
 318:	0e 94 29 01 	call	0x252	; 0x252 <LCDstringXY>

}
 31c:	a8 96       	adiw	r28, 0x28	; 40
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <Port_init>:

 #include "Main.h"

 void Port_init(void)
 {
	DDRA=0xFF;
 332:	8f ef       	ldi	r24, 0xFF	; 255
 334:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 336:	1b ba       	out	0x1b, r1	; 27
 338:	08 95       	ret

0000033a <main>:
 }


int main(void)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	cd b7       	in	r28, 0x3d	; 61
 340:	de b7       	in	r29, 0x3e	; 62
 342:	64 97       	sbiw	r28, 0x14	; 20
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	de bf       	out	0x3e, r29	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	cd bf       	out	0x3d, r28	; 61
	int s;
	char buf[20];

	Port_init();
 34e:	0e 94 99 01 	call	0x332	; 0x332 <Port_init>
	LCDinit();
 352:	0e 94 3c 01 	call	0x278	; 0x278 <LCDinit>
	LCDstringXY("Hello Sania",0,1);
 356:	41 e0       	ldi	r20, 0x01	; 1
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	80 e6       	ldi	r24, 0x60	; 96
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	0e 94 29 01 	call	0x252	; 0x252 <LCDstringXY>
	Usart_Init(9600);
 362:	60 e8       	ldi	r22, 0x80	; 128
 364:	75 e2       	ldi	r23, 0x25	; 37
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <Usart_Init>
    
	sei();
 36e:	78 94       	sei

    while (1) 
    {
		 //Usart_str_rn("Hello world!!!");
		 s=Usart_str_in(buf,10);
 370:	6a e0       	ldi	r22, 0x0A	; 10
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <Usart_str_in>
		 LCDputsIntGotoXY(s,1,2);
 37a:	42 e0       	ldi	r20, 0x02	; 2
 37c:	61 e0       	ldi	r22, 0x01	; 1
 37e:	0e 94 74 01 	call	0x2e8	; 0x2e8 <LCDputsIntGotoXY>
		 //
		 //
		 LCDstringXY(buf,1,3);
 382:	43 e0       	ldi	r20, 0x03	; 3
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	ce 01       	movw	r24, r28
 388:	01 96       	adiw	r24, 0x01	; 1
 38a:	0e 94 29 01 	call	0x252	; 0x252 <LCDstringXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 38e:	2f ef       	ldi	r18, 0xFF	; 255
 390:	84 e3       	ldi	r24, 0x34	; 52
 392:	9c e0       	ldi	r25, 0x0C	; 12
 394:	21 50       	subi	r18, 0x01	; 1
 396:	80 40       	sbci	r24, 0x00	; 0
 398:	90 40       	sbci	r25, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <main+0x5a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <main+0x64>
 39e:	00 00       	nop
 3a0:	e7 cf       	rjmp	.-50     	; 0x370 <main+0x36>

000003a2 <Usart_Init>:
		Usart_char_out(*str);
		str++;
		i++;
	}

}
 3a2:	9b 01       	movw	r18, r22
 3a4:	ac 01       	movw	r20, r24
 3a6:	60 e2       	ldi	r22, 0x20	; 32
 3a8:	71 ea       	ldi	r23, 0xA1	; 161
 3aa:	87 e0       	ldi	r24, 0x07	; 7
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 06 02 	call	0x40c	; 0x40c <__udivmodsi4>
 3b2:	da 01       	movw	r26, r20
 3b4:	c9 01       	movw	r24, r18
 3b6:	01 97       	sbiw	r24, 0x01	; 1
 3b8:	a1 09       	sbc	r26, r1
 3ba:	b1 09       	sbc	r27, r1
 3bc:	89 2f       	mov	r24, r25
 3be:	9a 2f       	mov	r25, r26
 3c0:	ab 2f       	mov	r26, r27
 3c2:	bb 27       	eor	r27, r27
 3c4:	80 bd       	out	0x20, r24	; 32
 3c6:	21 50       	subi	r18, 0x01	; 1
 3c8:	29 b9       	out	0x09, r18	; 9
 3ca:	1b b8       	out	0x0b, r1	; 11
 3cc:	8a b1       	in	r24, 0x0a	; 10
 3ce:	88 69       	ori	r24, 0x98	; 152
 3d0:	8a b9       	out	0x0a, r24	; 10
 3d2:	86 e8       	ldi	r24, 0x86	; 134
 3d4:	80 bd       	out	0x20, r24	; 32
 3d6:	08 95       	ret

000003d8 <Usart_str_in>:
//							  переполнение массива. Либо нужно точно знать
//							  что полученная строка умещается в массив.
//-------------------------------------------------------------------------

int Usart_str_in(char *str, char count)
{
 3d8:	0f 93       	push	r16
 3da:	1f 93       	push	r17
 3dc:	cf 93       	push	r28
 3de:	8c 01       	movw	r16, r24
 3e0:	c6 2f       	mov	r28, r22
	char out = 0;
	char data = 0;
	char timeout = 0;
	
	while(count > data)
 3e2:	66 23       	and	r22, r22
 3e4:	51 f0       	breq	.+20     	; 0x3fa <Usart_str_in+0x22>
	{
		data = GetData();
 3e6:	0e 94 a5 00 	call	0x14a	; 0x14a <GetData>
 3ea:	ef ec       	ldi	r30, 0xCF	; 207
 3ec:	f7 e0       	ldi	r31, 0x07	; 7
 3ee:	31 97       	sbiw	r30, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <Usart_str_in+0x16>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <Usart_str_in+0x1c>
 3f4:	00 00       	nop
{
	char out = 0;
	char data = 0;
	char timeout = 0;
	
	while(count > data)
 3f6:	8c 17       	cp	r24, r28
 3f8:	b0 f3       	brcs	.-20     	; 0x3e6 <Usart_str_in+0xe>
		
		timeout++;
		_delay_ms(1);
	}
	
	out = OutBufferStr(str, count);
 3fa:	6c 2f       	mov	r22, r28
 3fc:	c8 01       	movw	r24, r16
 3fe:	0e 94 89 00 	call	0x112	; 0x112 <OutBufferStr>
	return out;
}
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <__udivmodsi4>:
 40c:	a1 e2       	ldi	r26, 0x21	; 33
 40e:	1a 2e       	mov	r1, r26
 410:	aa 1b       	sub	r26, r26
 412:	bb 1b       	sub	r27, r27
 414:	fd 01       	movw	r30, r26
 416:	0d c0       	rjmp	.+26     	; 0x432 <__udivmodsi4_ep>

00000418 <__udivmodsi4_loop>:
 418:	aa 1f       	adc	r26, r26
 41a:	bb 1f       	adc	r27, r27
 41c:	ee 1f       	adc	r30, r30
 41e:	ff 1f       	adc	r31, r31
 420:	a2 17       	cp	r26, r18
 422:	b3 07       	cpc	r27, r19
 424:	e4 07       	cpc	r30, r20
 426:	f5 07       	cpc	r31, r21
 428:	20 f0       	brcs	.+8      	; 0x432 <__udivmodsi4_ep>
 42a:	a2 1b       	sub	r26, r18
 42c:	b3 0b       	sbc	r27, r19
 42e:	e4 0b       	sbc	r30, r20
 430:	f5 0b       	sbc	r31, r21

00000432 <__udivmodsi4_ep>:
 432:	66 1f       	adc	r22, r22
 434:	77 1f       	adc	r23, r23
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	1a 94       	dec	r1
 43c:	69 f7       	brne	.-38     	; 0x418 <__udivmodsi4_loop>
 43e:	60 95       	com	r22
 440:	70 95       	com	r23
 442:	80 95       	com	r24
 444:	90 95       	com	r25
 446:	9b 01       	movw	r18, r22
 448:	ac 01       	movw	r20, r24
 44a:	bd 01       	movw	r22, r26
 44c:	cf 01       	movw	r24, r30
 44e:	08 95       	ret

00000450 <__itoa_ncheck>:
 450:	bb 27       	eor	r27, r27
 452:	4a 30       	cpi	r20, 0x0A	; 10
 454:	31 f4       	brne	.+12     	; 0x462 <__stack+0x3>
 456:	99 23       	and	r25, r25
 458:	22 f4       	brpl	.+8      	; 0x462 <__stack+0x3>
 45a:	bd e2       	ldi	r27, 0x2D	; 45
 45c:	90 95       	com	r25
 45e:	81 95       	neg	r24
 460:	9f 4f       	sbci	r25, 0xFF	; 255
 462:	0c 94 34 02 	jmp	0x468	; 0x468 <__utoa_common>

00000466 <__utoa_ncheck>:
 466:	bb 27       	eor	r27, r27

00000468 <__utoa_common>:
 468:	fb 01       	movw	r30, r22
 46a:	55 27       	eor	r21, r21
 46c:	aa 27       	eor	r26, r26
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	aa 1f       	adc	r26, r26
 474:	a4 17       	cp	r26, r20
 476:	10 f0       	brcs	.+4      	; 0x47c <__utoa_common+0x14>
 478:	a4 1b       	sub	r26, r20
 47a:	83 95       	inc	r24
 47c:	50 51       	subi	r21, 0x10	; 16
 47e:	b9 f7       	brne	.-18     	; 0x46e <__utoa_common+0x6>
 480:	a0 5d       	subi	r26, 0xD0	; 208
 482:	aa 33       	cpi	r26, 0x3A	; 58
 484:	08 f0       	brcs	.+2      	; 0x488 <__utoa_common+0x20>
 486:	a9 5d       	subi	r26, 0xD9	; 217
 488:	a1 93       	st	Z+, r26
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	79 f7       	brne	.-34     	; 0x46c <__utoa_common+0x4>
 48e:	b1 11       	cpse	r27, r1
 490:	b1 93       	st	Z+, r27
 492:	11 92       	st	Z+, r1
 494:	cb 01       	movw	r24, r22
 496:	0c 94 4d 02 	jmp	0x49a	; 0x49a <strrev>

0000049a <strrev>:
 49a:	dc 01       	movw	r26, r24
 49c:	fc 01       	movw	r30, r24
 49e:	67 2f       	mov	r22, r23
 4a0:	71 91       	ld	r23, Z+
 4a2:	77 23       	and	r23, r23
 4a4:	e1 f7       	brne	.-8      	; 0x49e <strrev+0x4>
 4a6:	32 97       	sbiw	r30, 0x02	; 2
 4a8:	04 c0       	rjmp	.+8      	; 0x4b2 <strrev+0x18>
 4aa:	7c 91       	ld	r23, X
 4ac:	6d 93       	st	X+, r22
 4ae:	70 83       	st	Z, r23
 4b0:	62 91       	ld	r22, -Z
 4b2:	ae 17       	cp	r26, r30
 4b4:	bf 07       	cpc	r27, r31
 4b6:	c8 f3       	brcs	.-14     	; 0x4aa <strrev+0x10>
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>

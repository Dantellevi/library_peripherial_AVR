
HC-05.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000388  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  00000388  0000041c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  0080007c  0080007c  00000438  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000468  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a00  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d3e  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d7d  00000000  00000000  00002de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00003b60  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000688  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fd2  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  000056b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e8       	ldi	r30, 0x88	; 136
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac e7       	ldi	r26, 0x7C	; 124
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 30       	cpi	r26, 0x00	; 0
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  8a:	0c 94 c2 01 	jmp	0x384	; 0x384 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  92:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <IndexIN>
  96:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  98:	ef 77       	andi	r30, 0x7F	; 127
  9a:	e0 93 7f 00 	sts	0x007F, r30	; 0x80007f <IndexIN>
		buffer[IndexIN] = val;
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e0 58       	subi	r30, 0x80	; 128
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart_old = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__data_end>
	uart_flag = 1;
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <uart_flag>
	InBuffer(uart_old);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <InBuffer>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <OutPin>:
	LCDGotoXY(x,y);
	for(i=0;(uint8_t)pgm_read_byte(&FlashLoc[i]);i++)
	{
		LCDdata((uint8_t)pgm_read_byte(&FlashLoc[i]));
	}
}
  fc:	8a b3       	in	r24, 0x1a	; 26
  fe:	80 6f       	ori	r24, 0xF0	; 240
 100:	8a bb       	out	0x1a, r24	; 26
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	8b bb       	out	0x1b, r24	; 27
 108:	08 95       	ret

0000010a <Strob>:
 10a:	da 9a       	sbi	0x1b, 2	; 27
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	8a 95       	dec	r24
 110:	f1 f7       	brne	.-4      	; 0x10e <Strob+0x4>
 112:	00 c0       	rjmp	.+0      	; 0x114 <Strob+0xa>
 114:	da 98       	cbi	0x1b, 2	; 27
 116:	08 95       	ret

00000118 <Busy_flag>:
 118:	cf 93       	push	r28
 11a:	8a b3       	in	r24, 0x1a	; 26
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	8a bb       	out	0x1a, r24	; 26
 120:	8b b3       	in	r24, 0x1b	; 27
 122:	80 6f       	ori	r24, 0xF0	; 240
 124:	8b bb       	out	0x1b, r24	; 27
 126:	d9 9a       	sbi	0x1b, 1	; 27
 128:	da 9a       	sbi	0x1b, 2	; 27
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	c9 b3       	in	r28, 0x19	; 25
 130:	da 98       	cbi	0x1b, 2	; 27
 132:	00 00       	nop
 134:	00 00       	nop
 136:	0e 94 85 00 	call	0x10a	; 0x10a <Strob>
 13a:	00 00       	nop
 13c:	00 00       	nop
 13e:	cc 23       	and	r28, r28
 140:	9c f3       	brlt	.-26     	; 0x128 <Busy_flag+0x10>
 142:	d9 98       	cbi	0x1b, 1	; 27
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <Send_byte>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	d8 2f       	mov	r29, r24
 14e:	0e 94 7e 00 	call	0xfc	; 0xfc <OutPin>
 152:	9d 2f       	mov	r25, r29
 154:	92 95       	swap	r25
 156:	9f 70       	andi	r25, 0x0F	; 15
 158:	cd 2f       	mov	r28, r29
 15a:	cf 70       	andi	r28, 0x0F	; 15
 15c:	90 fd       	sbrc	r25, 0
 15e:	dc 9a       	sbi	0x1b, 4	; 27
 160:	96 95       	lsr	r25
 162:	90 fd       	sbrc	r25, 0
 164:	dd 9a       	sbi	0x1b, 5	; 27
 166:	96 95       	lsr	r25
 168:	90 fd       	sbrc	r25, 0
 16a:	de 9a       	sbi	0x1b, 6	; 27
 16c:	96 95       	lsr	r25
 16e:	09 f0       	breq	.+2      	; 0x172 <Send_byte+0x2a>
 170:	df 9a       	sbi	0x1b, 7	; 27
 172:	0e 94 85 00 	call	0x10a	; 0x10a <Strob>
 176:	0e 94 7e 00 	call	0xfc	; 0xfc <OutPin>
 17a:	d0 fd       	sbrc	r29, 0
 17c:	dc 9a       	sbi	0x1b, 4	; 27
 17e:	8c 2f       	mov	r24, r28
 180:	86 95       	lsr	r24
 182:	80 fd       	sbrc	r24, 0
 184:	dd 9a       	sbi	0x1b, 5	; 27
 186:	86 95       	lsr	r24
 188:	80 fd       	sbrc	r24, 0
 18a:	de 9a       	sbi	0x1b, 6	; 27
 18c:	86 95       	lsr	r24
 18e:	09 f0       	breq	.+2      	; 0x192 <Send_byte+0x4a>
 190:	df 9a       	sbi	0x1b, 7	; 27
 192:	0e 94 85 00 	call	0x10a	; 0x10a <Strob>
 196:	8a b3       	in	r24, 0x1a	; 26
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	8a bb       	out	0x1a, r24	; 26
 19c:	8b b3       	in	r24, 0x1b	; 27
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	8b bb       	out	0x1b, r24	; 27
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <LCDcommand>:
 1a8:	cf 93       	push	r28
 1aa:	c8 2f       	mov	r28, r24
 1ac:	0e 94 8c 00 	call	0x118	; 0x118 <Busy_flag>
 1b0:	8c 2f       	mov	r24, r28
 1b2:	0e 94 a4 00 	call	0x148	; 0x148 <Send_byte>
 1b6:	cf 91       	pop	r28
 1b8:	08 95       	ret

000001ba <LCDdata>:
 1ba:	cf 93       	push	r28
 1bc:	c8 2f       	mov	r28, r24
 1be:	0e 94 8c 00 	call	0x118	; 0x118 <Busy_flag>
 1c2:	d8 9a       	sbi	0x1b, 0	; 27
 1c4:	8c 2f       	mov	r24, r28
 1c6:	0e 94 a4 00 	call	0x148	; 0x148 <Send_byte>
 1ca:	d8 98       	cbi	0x1b, 0	; 27
 1cc:	cf 91       	pop	r28
 1ce:	08 95       	ret

000001d0 <LCDGotoXY>:
 1d0:	62 30       	cpi	r22, 0x02	; 2
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <LCDGotoXY+0x10>
 1d4:	63 30       	cpi	r22, 0x03	; 3
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <LCDGotoXY+0x14>
 1d8:	61 30       	cpi	r22, 0x01	; 1
 1da:	29 f4       	brne	.+10     	; 0x1e6 <LCDGotoXY+0x16>
 1dc:	80 5c       	subi	r24, 0xC0	; 192
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <LCDGotoXY+0x16>
 1e0:	8c 5e       	subi	r24, 0xEC	; 236
 1e2:	01 c0       	rjmp	.+2      	; 0x1e6 <LCDGotoXY+0x16>
 1e4:	8c 5a       	subi	r24, 0xAC	; 172
 1e6:	80 68       	ori	r24, 0x80	; 128
 1e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDcommand>
 1ec:	08 95       	ret

000001ee <LCDstringXY>:
 1ee:	cf 93       	push	r28
 1f0:	df 93       	push	r29
 1f2:	ec 01       	movw	r28, r24
 1f4:	86 2f       	mov	r24, r22
 1f6:	64 2f       	mov	r22, r20
 1f8:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <LCDGotoXY>
 1fc:	88 81       	ld	r24, Y
 1fe:	88 23       	and	r24, r24
 200:	31 f0       	breq	.+12     	; 0x20e <LCDstringXY+0x20>
 202:	21 96       	adiw	r28, 0x01	; 1
 204:	0e 94 dd 00 	call	0x1ba	; 0x1ba <LCDdata>
 208:	89 91       	ld	r24, Y+
 20a:	81 11       	cpse	r24, r1
 20c:	fb cf       	rjmp	.-10     	; 0x204 <LCDstringXY+0x16>
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	08 95       	ret

00000214 <LCDinit>:
void LCDinit(void)							//Инициализируем дисплей
{
 214:	cf 93       	push	r28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 216:	2f ef       	ldi	r18, 0xFF	; 255
 218:	80 e7       	ldi	r24, 0x70	; 112
 21a:	92 e0       	ldi	r25, 0x02	; 2
 21c:	21 50       	subi	r18, 0x01	; 1
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	90 40       	sbci	r25, 0x00	; 0
 222:	e1 f7       	brne	.-8      	; 0x21c <LCDinit+0x8>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCDinit+0x12>
 226:	00 00       	nop
	//Перед инициализацией LCD, надо в init задержку в 100 мсек сделать, чтоб питание устаканилось. 
	_delay_ms(100);
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
 228:	8a b3       	in	r24, 0x1a	; 26
 22a:	87 60       	ori	r24, 0x07	; 7
 22c:	8a bb       	out	0x1a, r24	; 26
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
 22e:	8b b3       	in	r24, 0x1b	; 27
 230:	88 7f       	andi	r24, 0xF8	; 248
 232:	8b bb       	out	0x1b, r24	; 27
	OutPin();						   //Настройка портов
 234:	0e 94 7e 00 	call	0xfc	; 0xfc <OutPin>
 238:	c3 e0       	ldi	r28, 0x03	; 3
	while (i!=3)
	{
		#ifdef  LCD_8BIT       //отправка символа 0x30.
		        DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4)|(0<<DB3)|(0<<DB2)|(0<<DB1)|(0<<DB0);
		#else
				DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(1<<DB4);
 23a:	8b b3       	in	r24, 0x1b	; 27
 23c:	80 63       	ori	r24, 0x30	; 48
 23e:	8b bb       	out	0x1b, r24	; 27
		#endif
		
		Strob();
 240:	0e 94 85 00 	call	0x10a	; 0x10a <Strob>
 244:	8f e0       	ldi	r24, 0x0F	; 15
 246:	97 e2       	ldi	r25, 0x27	; 39
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <LCDinit+0x34>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <LCDinit+0x3a>
 24e:	00 00       	nop
 250:	c1 50       	subi	r28, 0x01	; 1
	CDDR |=  (1<<RS)|(1<<E)|(1<<RW);   //Настройка портов 
	CPORT&=~((1<<RS)|(1<<E)|(1<<RW));  //Настройка портов 
	OutPin();						   //Настройка портов
	
	uint8_t i=0;
	while (i!=3)
 252:	99 f7       	brne	.-26     	; 0x23a <LCDinit+0x26>
	//Разминочный этап закончен, далее переходим к основным упражнениям.
	
	#ifdef  LCD_8BIT
			LCDcommand(0b00111000);//8ми битный интерфейс, две строки, 5x8 точек.
	#else   //Первый раз отправляем только пол старшей тетрады
			Busy_flag();
 254:	0e 94 8c 00 	call	0x118	; 0x118 <Busy_flag>
			OutPin();
 258:	0e 94 7e 00 	call	0xfc	; 0xfc <OutPin>
			DPORT|=(0<<DB7)|(0<<DB6)|(1<<DB5)|(0<<DB4);//4х битный интерфейс 
 25c:	dd 9a       	sbi	0x1b, 5	; 27
			Strob();
 25e:	0e 94 85 00 	call	0x10a	; 0x10a <Strob>
			LCDcommand(0b00101000);//Две строки, 5x8 точек.
 262:	88 e2       	ldi	r24, 0x28	; 40
 264:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDcommand>
	#endif
	
	LCDcommand(0b1100);  //Включаем дисплей + без отображения курсоров.
 268:	8c e0       	ldi	r24, 0x0C	; 12
 26a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDcommand>
	LCDcommand(0b110);   //Счетчик адреса всегда будет смещаться на n+1
 26e:	86 e0       	ldi	r24, 0x06	; 6
 270:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDcommand>
	LCDcommand(0b10);    //курсор в позицию 0,0 + сброс всех сдвигов
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDcommand>
	LCDcommand(0b1);     //очистка дисплея 
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <LCDcommand>
	//Основные упражнения закончены. Переходим к релаксации.
}
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <Port_init>:

 #include "Main.h"

 void Port_init(void)
 {
	DDRA=0xFF;
 284:	8f ef       	ldi	r24, 0xFF	; 255
 286:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00;
 288:	1b ba       	out	0x1b, r1	; 27
 28a:	08 95       	ret

0000028c <main>:
int main(void)
{
	int s;
	char buf[20];

	Port_init();
 28c:	0e 94 42 01 	call	0x284	; 0x284 <Port_init>
	LCDinit();
 290:	0e 94 0a 01 	call	0x214	; 0x214 <LCDinit>
	LCDstringXY("Hello Sania",0,1);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	80 e6       	ldi	r24, 0x60	; 96
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <LCDstringXY>
	Usart_Init(9600);
 2a0:	60 e8       	ldi	r22, 0x80	; 128
 2a2:	75 e2       	ldi	r23, 0x25	; 37
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 65 01 	call	0x2ca	; 0x2ca <Usart_Init>
    
	sei();
 2ac:	78 94       	sei

    while (1) 
    {
		 Usart_str_rn("Hello world!!!");
 2ae:	8c e6       	ldi	r24, 0x6C	; 108
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 84 01 	call	0x308	; 0x308 <Usart_str_rn>
 2b6:	2f ef       	ldi	r18, 0xFF	; 255
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	9c e0       	ldi	r25, 0x0C	; 12
 2bc:	21 50       	subi	r18, 0x01	; 1
 2be:	80 40       	sbci	r24, 0x00	; 0
 2c0:	90 40       	sbci	r25, 0x00	; 0
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <main+0x30>
 2c4:	00 c0       	rjmp	.+0      	; 0x2c6 <main+0x3a>
 2c6:	00 00       	nop
 2c8:	f2 cf       	rjmp	.-28     	; 0x2ae <main+0x22>

000002ca <Usart_Init>:
		_delay_ms(1);
	}
	
	out = OutBufferStr(str, count);
	return out;
}
 2ca:	9b 01       	movw	r18, r22
 2cc:	ac 01       	movw	r20, r24
 2ce:	60 e2       	ldi	r22, 0x20	; 32
 2d0:	71 ea       	ldi	r23, 0xA1	; 161
 2d2:	87 e0       	ldi	r24, 0x07	; 7
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 a0 01 	call	0x340	; 0x340 <__udivmodsi4>
 2da:	da 01       	movw	r26, r20
 2dc:	c9 01       	movw	r24, r18
 2de:	01 97       	sbiw	r24, 0x01	; 1
 2e0:	a1 09       	sbc	r26, r1
 2e2:	b1 09       	sbc	r27, r1
 2e4:	89 2f       	mov	r24, r25
 2e6:	9a 2f       	mov	r25, r26
 2e8:	ab 2f       	mov	r26, r27
 2ea:	bb 27       	eor	r27, r27
 2ec:	80 bd       	out	0x20, r24	; 32
 2ee:	21 50       	subi	r18, 0x01	; 1
 2f0:	29 b9       	out	0x09, r18	; 9
 2f2:	1b b8       	out	0x0b, r1	; 11
 2f4:	8a b1       	in	r24, 0x0a	; 10
 2f6:	88 69       	ori	r24, 0x98	; 152
 2f8:	8a b9       	out	0x0a, r24	; 10
 2fa:	86 e8       	ldi	r24, 0x86	; 134
 2fc:	80 bd       	out	0x20, r24	; 32
 2fe:	08 95       	ret

00000300 <Usart_char_out>:
 300:	5d 9b       	sbis	0x0b, 5	; 11
 302:	fe cf       	rjmp	.-4      	; 0x300 <Usart_char_out>
 304:	8c b9       	out	0x0c, r24	; 12
 306:	08 95       	ret

00000308 <Usart_str_rn>:
//						  нулевым символом \0. После передачи строки в порт
//						  передается два служебных символа \r\n.
//-------------------------------------------------------------------------

void Usart_str_rn(char *str)
{
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while(str[i])
 310:	fc 01       	movw	r30, r24
 312:	80 81       	ld	r24, Z
 314:	88 23       	and	r24, r24
 316:	51 f0       	breq	.+20     	; 0x32c <Usart_str_rn+0x24>
 318:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Usart_char_out(str[i]);
 31a:	0e 94 80 01 	call	0x300	; 0x300 <Usart_char_out>
		i++;
 31e:	cf 5f       	subi	r28, 0xFF	; 255
//-------------------------------------------------------------------------

void Usart_str_rn(char *str)
{
	unsigned char i=0;
	while(str[i])
 320:	f8 01       	movw	r30, r16
 322:	ec 0f       	add	r30, r28
 324:	f1 1d       	adc	r31, r1
 326:	80 81       	ld	r24, Z
 328:	81 11       	cpse	r24, r1
 32a:	f7 cf       	rjmp	.-18     	; 0x31a <Usart_str_rn+0x12>
	{
		Usart_char_out(str[i]);
		i++;
	}
	Usart_char_out('\r');
 32c:	8d e0       	ldi	r24, 0x0D	; 13
 32e:	0e 94 80 01 	call	0x300	; 0x300 <Usart_char_out>
	Usart_char_out('\n');
 332:	8a e0       	ldi	r24, 0x0A	; 10
 334:	0e 94 80 01 	call	0x300	; 0x300 <Usart_char_out>
	
}
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	08 95       	ret

00000340 <__udivmodsi4>:
 340:	a1 e2       	ldi	r26, 0x21	; 33
 342:	1a 2e       	mov	r1, r26
 344:	aa 1b       	sub	r26, r26
 346:	bb 1b       	sub	r27, r27
 348:	fd 01       	movw	r30, r26
 34a:	0d c0       	rjmp	.+26     	; 0x366 <__udivmodsi4_ep>

0000034c <__udivmodsi4_loop>:
 34c:	aa 1f       	adc	r26, r26
 34e:	bb 1f       	adc	r27, r27
 350:	ee 1f       	adc	r30, r30
 352:	ff 1f       	adc	r31, r31
 354:	a2 17       	cp	r26, r18
 356:	b3 07       	cpc	r27, r19
 358:	e4 07       	cpc	r30, r20
 35a:	f5 07       	cpc	r31, r21
 35c:	20 f0       	brcs	.+8      	; 0x366 <__udivmodsi4_ep>
 35e:	a2 1b       	sub	r26, r18
 360:	b3 0b       	sbc	r27, r19
 362:	e4 0b       	sbc	r30, r20
 364:	f5 0b       	sbc	r31, r21

00000366 <__udivmodsi4_ep>:
 366:	66 1f       	adc	r22, r22
 368:	77 1f       	adc	r23, r23
 36a:	88 1f       	adc	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	1a 94       	dec	r1
 370:	69 f7       	brne	.-38     	; 0x34c <__udivmodsi4_loop>
 372:	60 95       	com	r22
 374:	70 95       	com	r23
 376:	80 95       	com	r24
 378:	90 95       	com	r25
 37a:	9b 01       	movw	r18, r22
 37c:	ac 01       	movw	r20, r24
 37e:	bd 01       	movw	r22, r26
 380:	cf 01       	movw	r24, r30
 382:	08 95       	ret

00000384 <_exit>:
 384:	f8 94       	cli

00000386 <__stop_program>:
 386:	ff cf       	rjmp	.-2      	; 0x386 <__stop_program>

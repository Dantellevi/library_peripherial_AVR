
Sim300demo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000196  00800060  00005588  0000561c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c2  008001f6  008001f6  000057b2  2**0
                  ALLOC
  3 .stab         00000858  00000000  00000000  000057b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000001ab  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  000061b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000003f7  00000000  00000000  00006397  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003c27  00000000  00000000  0000678e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014dd  00000000  00000000  0000a3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000033b2  00000000  00000000  0000b892  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000360  00000000  00000000  0000ec44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000060f  00000000  00000000  0000efa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000c25  00000000  00000000  0000f5b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 000006bb  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000128  00000000  00000000  00010893  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f5 e5       	ldi	r31, 0x55	; 85
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 3b       	cpi	r26, 0xB8	; 184
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 1b 	call	0x362e	; 0x362e <main>
      8a:	0c 94 c2 2a 	jmp	0x5584	; 0x5584 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCDByte>:
	#define LCD_TYPE_204
#endif


void LCDByte(uint8_t c,uint8_t isdata)
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	cd 57       	subi	r28, 0x7D	; 125
      a0:	d0 40       	sbci	r29, 0x00	; 0
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	9e 01       	movw	r18, r28
      ae:	24 58       	subi	r18, 0x84	; 132
      b0:	3f 4f       	sbci	r19, 0xFF	; 255
      b2:	f9 01       	movw	r30, r18
      b4:	80 83       	st	Z, r24
      b6:	ce 01       	movw	r24, r28
      b8:	83 58       	subi	r24, 0x83	; 131
      ba:	9f 4f       	sbci	r25, 0xFF	; 255
      bc:	fc 01       	movw	r30, r24
      be:	60 83       	st	Z, r22
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
      c0:	ce 01       	movw	r24, r28
      c2:	84 58       	subi	r24, 0x84	; 132
      c4:	9f 4f       	sbci	r25, 0xFF	; 255
      c6:	fc 01       	movw	r30, r24
      c8:	80 81       	ld	r24, Z
      ca:	82 95       	swap	r24
      cc:	8f 70       	andi	r24, 0x0F	; 15
      ce:	89 83       	std	Y+1, r24	; 0x01
ln=(c & 0x0F);
      d0:	ce 01       	movw	r24, r28
      d2:	84 58       	subi	r24, 0x84	; 132
      d4:	9f 4f       	sbci	r25, 0xFF	; 255
      d6:	fc 01       	movw	r30, r24
      d8:	80 81       	ld	r24, Z
      da:	8f 70       	andi	r24, 0x0F	; 15
      dc:	8a 83       	std	Y+2, r24	; 0x02

if(isdata==0)
      de:	ce 01       	movw	r24, r28
      e0:	83 58       	subi	r24, 0x83	; 131
      e2:	9f 4f       	sbci	r25, 0xFF	; 255
      e4:	fc 01       	movw	r30, r24
      e6:	80 81       	ld	r24, Z
      e8:	88 23       	and	r24, r24
      ea:	51 f4       	brne	.+20     	; 0x100 <LCDByte+0x6e>
	CLEAR_RS();
      ec:	82 e3       	ldi	r24, 0x32	; 50
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	22 e3       	ldi	r18, 0x32	; 50
      f2:	30 e0       	ldi	r19, 0x00	; 0
      f4:	f9 01       	movw	r30, r18
      f6:	20 81       	ld	r18, Z
      f8:	27 7f       	andi	r18, 0xF7	; 247
      fa:	fc 01       	movw	r30, r24
      fc:	20 83       	st	Z, r18
      fe:	09 c0       	rjmp	.+18     	; 0x112 <LCDByte+0x80>
else
	SET_RS();
     100:	82 e3       	ldi	r24, 0x32	; 50
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	22 e3       	ldi	r18, 0x32	; 50
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	f9 01       	movw	r30, r18
     10a:	20 81       	ld	r18, Z
     10c:	28 60       	ori	r18, 0x08	; 8
     10e:	fc 01       	movw	r30, r24
     110:	20 83       	st	Z, r18
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	bf e3       	ldi	r27, 0x3F	; 63
     11a:	8c 83       	std	Y+4, r24	; 0x04
     11c:	9d 83       	std	Y+5, r25	; 0x05
     11e:	ae 83       	std	Y+6, r26	; 0x06
     120:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     122:	6c 81       	ldd	r22, Y+4	; 0x04
     124:	7d 81       	ldd	r23, Y+5	; 0x05
     126:	8e 81       	ldd	r24, Y+6	; 0x06
     128:	9f 81       	ldd	r25, Y+7	; 0x07
     12a:	2b ea       	ldi	r18, 0xAB	; 171
     12c:	3a ea       	ldi	r19, 0xAA	; 170
     12e:	4a ea       	ldi	r20, 0xAA	; 170
     130:	50 e4       	ldi	r21, 0x40	; 64
     132:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     136:	dc 01       	movw	r26, r24
     138:	cb 01       	movw	r24, r22
     13a:	88 87       	std	Y+8, r24	; 0x08
     13c:	99 87       	std	Y+9, r25	; 0x09
     13e:	aa 87       	std	Y+10, r26	; 0x0a
     140:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     142:	11 e0       	ldi	r17, 0x01	; 1
     144:	68 85       	ldd	r22, Y+8	; 0x08
     146:	79 85       	ldd	r23, Y+9	; 0x09
     148:	8a 85       	ldd	r24, Y+10	; 0x0a
     14a:	9b 85       	ldd	r25, Y+11	; 0x0b
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e8       	ldi	r20, 0x80	; 128
     152:	5f e3       	ldi	r21, 0x3F	; 63
     154:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     158:	88 23       	and	r24, r24
     15a:	0c f0       	brlt	.+2      	; 0x15e <LCDByte+0xcc>
     15c:	10 e0       	ldi	r17, 0x00	; 0
     15e:	11 23       	and	r17, r17
     160:	19 f0       	breq	.+6      	; 0x168 <LCDByte+0xd6>
		__ticks = 1;
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	8c 87       	std	Y+12, r24	; 0x0c
     166:	a3 c0       	rjmp	.+326    	; 0x2ae <LCDByte+0x21c>
	else if (__tmp > 255)
     168:	11 e0       	ldi	r17, 0x01	; 1
     16a:	68 85       	ldd	r22, Y+8	; 0x08
     16c:	79 85       	ldd	r23, Y+9	; 0x09
     16e:	8a 85       	ldd	r24, Y+10	; 0x0a
     170:	9b 85       	ldd	r25, Y+11	; 0x0b
     172:	20 e0       	ldi	r18, 0x00	; 0
     174:	30 e0       	ldi	r19, 0x00	; 0
     176:	4f e7       	ldi	r20, 0x7F	; 127
     178:	53 e4       	ldi	r21, 0x43	; 67
     17a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     17e:	18 16       	cp	r1, r24
     180:	0c f0       	brlt	.+2      	; 0x184 <LCDByte+0xf2>
     182:	10 e0       	ldi	r17, 0x00	; 0
     184:	11 23       	and	r17, r17
     186:	09 f4       	brne	.+2      	; 0x18a <LCDByte+0xf8>
     188:	89 c0       	rjmp	.+274    	; 0x29c <LCDByte+0x20a>
	{
		_delay_ms(__us / 1000.0);
     18a:	6c 81       	ldd	r22, Y+4	; 0x04
     18c:	7d 81       	ldd	r23, Y+5	; 0x05
     18e:	8e 81       	ldd	r24, Y+6	; 0x06
     190:	9f 81       	ldd	r25, Y+7	; 0x07
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	4a e7       	ldi	r20, 0x7A	; 122
     198:	54 e4       	ldi	r21, 0x44	; 68
     19a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     19e:	dc 01       	movw	r26, r24
     1a0:	cb 01       	movw	r24, r22
     1a2:	8d 87       	std	Y+13, r24	; 0x0d
     1a4:	9e 87       	std	Y+14, r25	; 0x0e
     1a6:	af 87       	std	Y+15, r26	; 0x0f
     1a8:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     1aa:	6d 85       	ldd	r22, Y+13	; 0x0d
     1ac:	7e 85       	ldd	r23, Y+14	; 0x0e
     1ae:	8f 85       	ldd	r24, Y+15	; 0x0f
     1b0:	98 89       	ldd	r25, Y+16	; 0x10
     1b2:	20 e0       	ldi	r18, 0x00	; 0
     1b4:	30 e0       	ldi	r19, 0x00	; 0
     1b6:	4a e7       	ldi	r20, 0x7A	; 122
     1b8:	55 e4       	ldi	r21, 0x45	; 69
     1ba:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     1be:	dc 01       	movw	r26, r24
     1c0:	cb 01       	movw	r24, r22
     1c2:	89 8b       	std	Y+17, r24	; 0x11
     1c4:	9a 8b       	std	Y+18, r25	; 0x12
     1c6:	ab 8b       	std	Y+19, r26	; 0x13
     1c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     1ca:	11 e0       	ldi	r17, 0x01	; 1
     1cc:	69 89       	ldd	r22, Y+17	; 0x11
     1ce:	7a 89       	ldd	r23, Y+18	; 0x12
     1d0:	8b 89       	ldd	r24, Y+19	; 0x13
     1d2:	9c 89       	ldd	r25, Y+20	; 0x14
     1d4:	20 e0       	ldi	r18, 0x00	; 0
     1d6:	30 e0       	ldi	r19, 0x00	; 0
     1d8:	40 e8       	ldi	r20, 0x80	; 128
     1da:	5f e3       	ldi	r21, 0x3F	; 63
     1dc:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     1e0:	88 23       	and	r24, r24
     1e2:	0c f0       	brlt	.+2      	; 0x1e6 <LCDByte+0x154>
     1e4:	10 e0       	ldi	r17, 0x00	; 0
     1e6:	11 23       	and	r17, r17
     1e8:	29 f0       	breq	.+10     	; 0x1f4 <LCDByte+0x162>
		__ticks = 1;
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	9e 8b       	std	Y+22, r25	; 0x16
     1f0:	8d 8b       	std	Y+21, r24	; 0x15
     1f2:	46 c0       	rjmp	.+140    	; 0x280 <LCDByte+0x1ee>
	else if (__tmp > 65535)
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	69 89       	ldd	r22, Y+17	; 0x11
     1f8:	7a 89       	ldd	r23, Y+18	; 0x12
     1fa:	8b 89       	ldd	r24, Y+19	; 0x13
     1fc:	9c 89       	ldd	r25, Y+20	; 0x14
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	3f ef       	ldi	r19, 0xFF	; 255
     202:	4f e7       	ldi	r20, 0x7F	; 127
     204:	57 e4       	ldi	r21, 0x47	; 71
     206:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     20a:	18 16       	cp	r1, r24
     20c:	0c f0       	brlt	.+2      	; 0x210 <LCDByte+0x17e>
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	11 23       	and	r17, r17
     212:	61 f1       	breq	.+88     	; 0x26c <LCDByte+0x1da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     214:	6d 85       	ldd	r22, Y+13	; 0x0d
     216:	7e 85       	ldd	r23, Y+14	; 0x0e
     218:	8f 85       	ldd	r24, Y+15	; 0x0f
     21a:	98 89       	ldd	r25, Y+16	; 0x10
     21c:	20 e0       	ldi	r18, 0x00	; 0
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	40 e2       	ldi	r20, 0x20	; 32
     222:	51 e4       	ldi	r21, 0x41	; 65
     224:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     228:	dc 01       	movw	r26, r24
     22a:	cb 01       	movw	r24, r22
     22c:	bc 01       	movw	r22, r24
     22e:	cd 01       	movw	r24, r26
     230:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     234:	dc 01       	movw	r26, r24
     236:	cb 01       	movw	r24, r22
     238:	9e 8b       	std	Y+22, r25	; 0x16
     23a:	8d 8b       	std	Y+21, r24	; 0x15
     23c:	12 c0       	rjmp	.+36     	; 0x262 <LCDByte+0x1d0>
     23e:	80 e9       	ldi	r24, 0x90	; 144
     240:	91 e0       	ldi	r25, 0x01	; 1
     242:	98 8f       	std	Y+24, r25	; 0x18
     244:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     246:	8f 89       	ldd	r24, Y+23	; 0x17
     248:	98 8d       	ldd	r25, Y+24	; 0x18
     24a:	8c 01       	movw	r16, r24
     24c:	c8 01       	movw	r24, r16
     24e:	01 97       	sbiw	r24, 0x01	; 1
     250:	f1 f7       	brne	.-4      	; 0x24e <LCDByte+0x1bc>
     252:	8c 01       	movw	r16, r24
     254:	18 8f       	std	Y+24, r17	; 0x18
     256:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     258:	8d 89       	ldd	r24, Y+21	; 0x15
     25a:	9e 89       	ldd	r25, Y+22	; 0x16
     25c:	01 97       	sbiw	r24, 0x01	; 1
     25e:	9e 8b       	std	Y+22, r25	; 0x16
     260:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     262:	8d 89       	ldd	r24, Y+21	; 0x15
     264:	9e 89       	ldd	r25, Y+22	; 0x16
     266:	00 97       	sbiw	r24, 0x00	; 0
     268:	51 f7       	brne	.-44     	; 0x23e <LCDByte+0x1ac>
     26a:	28 c0       	rjmp	.+80     	; 0x2bc <LCDByte+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     26c:	69 89       	ldd	r22, Y+17	; 0x11
     26e:	7a 89       	ldd	r23, Y+18	; 0x12
     270:	8b 89       	ldd	r24, Y+19	; 0x13
     272:	9c 89       	ldd	r25, Y+20	; 0x14
     274:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     278:	dc 01       	movw	r26, r24
     27a:	cb 01       	movw	r24, r22
     27c:	9e 8b       	std	Y+22, r25	; 0x16
     27e:	8d 8b       	std	Y+21, r24	; 0x15
     280:	8d 89       	ldd	r24, Y+21	; 0x15
     282:	9e 89       	ldd	r25, Y+22	; 0x16
     284:	9a 8f       	std	Y+26, r25	; 0x1a
     286:	89 8f       	std	Y+25, r24	; 0x19
     288:	89 8d       	ldd	r24, Y+25	; 0x19
     28a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     28c:	8c 01       	movw	r16, r24
     28e:	f8 01       	movw	r30, r16
     290:	31 97       	sbiw	r30, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <LCDByte+0x1fe>
     294:	8f 01       	movw	r16, r30
     296:	1a 8f       	std	Y+26, r17	; 0x1a
     298:	09 8f       	std	Y+25, r16	; 0x19
     29a:	10 c0       	rjmp	.+32     	; 0x2bc <LCDByte+0x22a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     29c:	68 85       	ldd	r22, Y+8	; 0x08
     29e:	79 85       	ldd	r23, Y+9	; 0x09
     2a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     2a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     2a4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     2a8:	dc 01       	movw	r26, r24
     2aa:	cb 01       	movw	r24, r22
     2ac:	8c 87       	std	Y+12, r24	; 0x0c
     2ae:	8c 85       	ldd	r24, Y+12	; 0x0c
     2b0:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     2b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2b4:	18 2f       	mov	r17, r24
     2b6:	1a 95       	dec	r17
     2b8:	f1 f7       	brne	.-4      	; 0x2b6 <LCDByte+0x224>
     2ba:	1b 8f       	std	Y+27, r17	; 0x1b

_delay_us(0.500);		//tAS

SET_E();
     2bc:	88 e3       	ldi	r24, 0x38	; 56
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	28 e3       	ldi	r18, 0x38	; 56
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	f9 01       	movw	r30, r18
     2c6:	20 81       	ld	r18, Z
     2c8:	20 61       	ori	r18, 0x10	; 16
     2ca:	fc 01       	movw	r30, r24
     2cc:	20 83       	st	Z, r18

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     2ce:	88 e3       	ldi	r24, 0x38	; 56
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	98 2f       	mov	r25, r24
     2d8:	90 7f       	andi	r25, 0xF0	; 240
     2da:	89 81       	ldd	r24, Y+1	; 0x01
     2dc:	89 2b       	or	r24, r25
     2de:	8b 83       	std	Y+3, r24	; 0x03
LCD_DATA_PORT=temp;
     2e0:	88 e3       	ldi	r24, 0x38	; 56
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	2b 81       	ldd	r18, Y+3	; 0x03
     2e6:	fc 01       	movw	r30, r24
     2e8:	20 83       	st	Z, r18
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	a0 e8       	ldi	r26, 0x80	; 128
     2f0:	bf e3       	ldi	r27, 0x3F	; 63
     2f2:	8c 8f       	std	Y+28, r24	; 0x1c
     2f4:	9d 8f       	std	Y+29, r25	; 0x1d
     2f6:	ae 8f       	std	Y+30, r26	; 0x1e
     2f8:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     2fa:	6c 8d       	ldd	r22, Y+28	; 0x1c
     2fc:	7d 8d       	ldd	r23, Y+29	; 0x1d
     2fe:	8e 8d       	ldd	r24, Y+30	; 0x1e
     300:	9f 8d       	ldd	r25, Y+31	; 0x1f
     302:	2b ea       	ldi	r18, 0xAB	; 171
     304:	3a ea       	ldi	r19, 0xAA	; 170
     306:	4a ea       	ldi	r20, 0xAA	; 170
     308:	50 e4       	ldi	r21, 0x40	; 64
     30a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     30e:	dc 01       	movw	r26, r24
     310:	cb 01       	movw	r24, r22
     312:	88 a3       	std	Y+32, r24	; 0x20
     314:	99 a3       	std	Y+33, r25	; 0x21
     316:	aa a3       	std	Y+34, r26	; 0x22
     318:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     31a:	11 e0       	ldi	r17, 0x01	; 1
     31c:	68 a1       	ldd	r22, Y+32	; 0x20
     31e:	79 a1       	ldd	r23, Y+33	; 0x21
     320:	8a a1       	ldd	r24, Y+34	; 0x22
     322:	9b a1       	ldd	r25, Y+35	; 0x23
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
     328:	40 e8       	ldi	r20, 0x80	; 128
     32a:	5f e3       	ldi	r21, 0x3F	; 63
     32c:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     330:	88 23       	and	r24, r24
     332:	0c f0       	brlt	.+2      	; 0x336 <LCDByte+0x2a4>
     334:	10 e0       	ldi	r17, 0x00	; 0
     336:	11 23       	and	r17, r17
     338:	19 f0       	breq	.+6      	; 0x340 <LCDByte+0x2ae>
		__ticks = 1;
     33a:	81 e0       	ldi	r24, 0x01	; 1
     33c:	8c a3       	std	Y+36, r24	; 0x24
     33e:	a3 c0       	rjmp	.+326    	; 0x486 <LCDByte+0x3f4>
	else if (__tmp > 255)
     340:	11 e0       	ldi	r17, 0x01	; 1
     342:	68 a1       	ldd	r22, Y+32	; 0x20
     344:	79 a1       	ldd	r23, Y+33	; 0x21
     346:	8a a1       	ldd	r24, Y+34	; 0x22
     348:	9b a1       	ldd	r25, Y+35	; 0x23
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	53 e4       	ldi	r21, 0x43	; 67
     352:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     356:	18 16       	cp	r1, r24
     358:	0c f0       	brlt	.+2      	; 0x35c <LCDByte+0x2ca>
     35a:	10 e0       	ldi	r17, 0x00	; 0
     35c:	11 23       	and	r17, r17
     35e:	09 f4       	brne	.+2      	; 0x362 <LCDByte+0x2d0>
     360:	89 c0       	rjmp	.+274    	; 0x474 <LCDByte+0x3e2>
	{
		_delay_ms(__us / 1000.0);
     362:	6c 8d       	ldd	r22, Y+28	; 0x1c
     364:	7d 8d       	ldd	r23, Y+29	; 0x1d
     366:	8e 8d       	ldd	r24, Y+30	; 0x1e
     368:	9f 8d       	ldd	r25, Y+31	; 0x1f
     36a:	20 e0       	ldi	r18, 0x00	; 0
     36c:	30 e0       	ldi	r19, 0x00	; 0
     36e:	4a e7       	ldi	r20, 0x7A	; 122
     370:	54 e4       	ldi	r21, 0x44	; 68
     372:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     376:	dc 01       	movw	r26, r24
     378:	cb 01       	movw	r24, r22
     37a:	8d a3       	std	Y+37, r24	; 0x25
     37c:	9e a3       	std	Y+38, r25	; 0x26
     37e:	af a3       	std	Y+39, r26	; 0x27
     380:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     382:	6d a1       	ldd	r22, Y+37	; 0x25
     384:	7e a1       	ldd	r23, Y+38	; 0x26
     386:	8f a1       	ldd	r24, Y+39	; 0x27
     388:	98 a5       	ldd	r25, Y+40	; 0x28
     38a:	20 e0       	ldi	r18, 0x00	; 0
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	4a e7       	ldi	r20, 0x7A	; 122
     390:	55 e4       	ldi	r21, 0x45	; 69
     392:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     396:	dc 01       	movw	r26, r24
     398:	cb 01       	movw	r24, r22
     39a:	89 a7       	std	Y+41, r24	; 0x29
     39c:	9a a7       	std	Y+42, r25	; 0x2a
     39e:	ab a7       	std	Y+43, r26	; 0x2b
     3a0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     3a2:	11 e0       	ldi	r17, 0x01	; 1
     3a4:	69 a5       	ldd	r22, Y+41	; 0x29
     3a6:	7a a5       	ldd	r23, Y+42	; 0x2a
     3a8:	8b a5       	ldd	r24, Y+43	; 0x2b
     3aa:	9c a5       	ldd	r25, Y+44	; 0x2c
     3ac:	20 e0       	ldi	r18, 0x00	; 0
     3ae:	30 e0       	ldi	r19, 0x00	; 0
     3b0:	40 e8       	ldi	r20, 0x80	; 128
     3b2:	5f e3       	ldi	r21, 0x3F	; 63
     3b4:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     3b8:	88 23       	and	r24, r24
     3ba:	0c f0       	brlt	.+2      	; 0x3be <LCDByte+0x32c>
     3bc:	10 e0       	ldi	r17, 0x00	; 0
     3be:	11 23       	and	r17, r17
     3c0:	29 f0       	breq	.+10     	; 0x3cc <LCDByte+0x33a>
		__ticks = 1;
     3c2:	81 e0       	ldi	r24, 0x01	; 1
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	9e a7       	std	Y+46, r25	; 0x2e
     3c8:	8d a7       	std	Y+45, r24	; 0x2d
     3ca:	46 c0       	rjmp	.+140    	; 0x458 <LCDByte+0x3c6>
	else if (__tmp > 65535)
     3cc:	11 e0       	ldi	r17, 0x01	; 1
     3ce:	69 a5       	ldd	r22, Y+41	; 0x29
     3d0:	7a a5       	ldd	r23, Y+42	; 0x2a
     3d2:	8b a5       	ldd	r24, Y+43	; 0x2b
     3d4:	9c a5       	ldd	r25, Y+44	; 0x2c
     3d6:	20 e0       	ldi	r18, 0x00	; 0
     3d8:	3f ef       	ldi	r19, 0xFF	; 255
     3da:	4f e7       	ldi	r20, 0x7F	; 127
     3dc:	57 e4       	ldi	r21, 0x47	; 71
     3de:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     3e2:	18 16       	cp	r1, r24
     3e4:	0c f0       	brlt	.+2      	; 0x3e8 <LCDByte+0x356>
     3e6:	10 e0       	ldi	r17, 0x00	; 0
     3e8:	11 23       	and	r17, r17
     3ea:	61 f1       	breq	.+88     	; 0x444 <LCDByte+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3ec:	6d a1       	ldd	r22, Y+37	; 0x25
     3ee:	7e a1       	ldd	r23, Y+38	; 0x26
     3f0:	8f a1       	ldd	r24, Y+39	; 0x27
     3f2:	98 a5       	ldd	r25, Y+40	; 0x28
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	30 e0       	ldi	r19, 0x00	; 0
     3f8:	40 e2       	ldi	r20, 0x20	; 32
     3fa:	51 e4       	ldi	r21, 0x41	; 65
     3fc:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     400:	dc 01       	movw	r26, r24
     402:	cb 01       	movw	r24, r22
     404:	bc 01       	movw	r22, r24
     406:	cd 01       	movw	r24, r26
     408:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     40c:	dc 01       	movw	r26, r24
     40e:	cb 01       	movw	r24, r22
     410:	9e a7       	std	Y+46, r25	; 0x2e
     412:	8d a7       	std	Y+45, r24	; 0x2d
     414:	12 c0       	rjmp	.+36     	; 0x43a <LCDByte+0x3a8>
     416:	80 e9       	ldi	r24, 0x90	; 144
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	98 ab       	std	Y+48, r25	; 0x30
     41c:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     41e:	8f a5       	ldd	r24, Y+47	; 0x2f
     420:	98 a9       	ldd	r25, Y+48	; 0x30
     422:	8c 01       	movw	r16, r24
     424:	c8 01       	movw	r24, r16
     426:	01 97       	sbiw	r24, 0x01	; 1
     428:	f1 f7       	brne	.-4      	; 0x426 <LCDByte+0x394>
     42a:	8c 01       	movw	r16, r24
     42c:	18 ab       	std	Y+48, r17	; 0x30
     42e:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     430:	8d a5       	ldd	r24, Y+45	; 0x2d
     432:	9e a5       	ldd	r25, Y+46	; 0x2e
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	9e a7       	std	Y+46, r25	; 0x2e
     438:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     43a:	8d a5       	ldd	r24, Y+45	; 0x2d
     43c:	9e a5       	ldd	r25, Y+46	; 0x2e
     43e:	00 97       	sbiw	r24, 0x00	; 0
     440:	51 f7       	brne	.-44     	; 0x416 <LCDByte+0x384>
     442:	28 c0       	rjmp	.+80     	; 0x494 <LCDByte+0x402>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     444:	69 a5       	ldd	r22, Y+41	; 0x29
     446:	7a a5       	ldd	r23, Y+42	; 0x2a
     448:	8b a5       	ldd	r24, Y+43	; 0x2b
     44a:	9c a5       	ldd	r25, Y+44	; 0x2c
     44c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     450:	dc 01       	movw	r26, r24
     452:	cb 01       	movw	r24, r22
     454:	9e a7       	std	Y+46, r25	; 0x2e
     456:	8d a7       	std	Y+45, r24	; 0x2d
     458:	8d a5       	ldd	r24, Y+45	; 0x2d
     45a:	9e a5       	ldd	r25, Y+46	; 0x2e
     45c:	9a ab       	std	Y+50, r25	; 0x32
     45e:	89 ab       	std	Y+49, r24	; 0x31
     460:	89 a9       	ldd	r24, Y+49	; 0x31
     462:	9a a9       	ldd	r25, Y+50	; 0x32
     464:	8c 01       	movw	r16, r24
     466:	f8 01       	movw	r30, r16
     468:	31 97       	sbiw	r30, 0x01	; 1
     46a:	f1 f7       	brne	.-4      	; 0x468 <LCDByte+0x3d6>
     46c:	8f 01       	movw	r16, r30
     46e:	1a ab       	std	Y+50, r17	; 0x32
     470:	09 ab       	std	Y+49, r16	; 0x31
     472:	10 c0       	rjmp	.+32     	; 0x494 <LCDByte+0x402>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     474:	68 a1       	ldd	r22, Y+32	; 0x20
     476:	79 a1       	ldd	r23, Y+33	; 0x21
     478:	8a a1       	ldd	r24, Y+34	; 0x22
     47a:	9b a1       	ldd	r25, Y+35	; 0x23
     47c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     480:	dc 01       	movw	r26, r24
     482:	cb 01       	movw	r24, r22
     484:	8c a3       	std	Y+36, r24	; 0x24
     486:	8c a1       	ldd	r24, Y+36	; 0x24
     488:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     48a:	8b a9       	ldd	r24, Y+51	; 0x33
     48c:	18 2f       	mov	r17, r24
     48e:	1a 95       	dec	r17
     490:	f1 f7       	brne	.-4      	; 0x48e <LCDByte+0x3fc>
     492:	1b ab       	std	Y+51, r17	; 0x33

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     494:	88 e3       	ldi	r24, 0x38	; 56
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	28 e3       	ldi	r18, 0x38	; 56
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	f9 01       	movw	r30, r18
     49e:	20 81       	ld	r18, Z
     4a0:	2f 7e       	andi	r18, 0xEF	; 239
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 83       	st	Z, r18
     4a6:	80 e0       	ldi	r24, 0x00	; 0
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	a0 e8       	ldi	r26, 0x80	; 128
     4ac:	bf e3       	ldi	r27, 0x3F	; 63
     4ae:	8c ab       	std	Y+52, r24	; 0x34
     4b0:	9d ab       	std	Y+53, r25	; 0x35
     4b2:	ae ab       	std	Y+54, r26	; 0x36
     4b4:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     4b6:	6c a9       	ldd	r22, Y+52	; 0x34
     4b8:	7d a9       	ldd	r23, Y+53	; 0x35
     4ba:	8e a9       	ldd	r24, Y+54	; 0x36
     4bc:	9f a9       	ldd	r25, Y+55	; 0x37
     4be:	2b ea       	ldi	r18, 0xAB	; 171
     4c0:	3a ea       	ldi	r19, 0xAA	; 170
     4c2:	4a ea       	ldi	r20, 0xAA	; 170
     4c4:	50 e4       	ldi	r21, 0x40	; 64
     4c6:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     4ca:	dc 01       	movw	r26, r24
     4cc:	cb 01       	movw	r24, r22
     4ce:	88 af       	std	Y+56, r24	; 0x38
     4d0:	99 af       	std	Y+57, r25	; 0x39
     4d2:	aa af       	std	Y+58, r26	; 0x3a
     4d4:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     4d6:	11 e0       	ldi	r17, 0x01	; 1
     4d8:	68 ad       	ldd	r22, Y+56	; 0x38
     4da:	79 ad       	ldd	r23, Y+57	; 0x39
     4dc:	8a ad       	ldd	r24, Y+58	; 0x3a
     4de:	9b ad       	ldd	r25, Y+59	; 0x3b
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e8       	ldi	r20, 0x80	; 128
     4e6:	5f e3       	ldi	r21, 0x3F	; 63
     4e8:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     4ec:	88 23       	and	r24, r24
     4ee:	0c f0       	brlt	.+2      	; 0x4f2 <LCDByte+0x460>
     4f0:	10 e0       	ldi	r17, 0x00	; 0
     4f2:	11 23       	and	r17, r17
     4f4:	19 f0       	breq	.+6      	; 0x4fc <LCDByte+0x46a>
		__ticks = 1;
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	8c af       	std	Y+60, r24	; 0x3c
     4fa:	f3 c0       	rjmp	.+486    	; 0x6e2 <LCDByte+0x650>
	else if (__tmp > 255)
     4fc:	11 e0       	ldi	r17, 0x01	; 1
     4fe:	68 ad       	ldd	r22, Y+56	; 0x38
     500:	79 ad       	ldd	r23, Y+57	; 0x39
     502:	8a ad       	ldd	r24, Y+58	; 0x3a
     504:	9b ad       	ldd	r25, Y+59	; 0x3b
     506:	20 e0       	ldi	r18, 0x00	; 0
     508:	30 e0       	ldi	r19, 0x00	; 0
     50a:	4f e7       	ldi	r20, 0x7F	; 127
     50c:	53 e4       	ldi	r21, 0x43	; 67
     50e:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     512:	18 16       	cp	r1, r24
     514:	0c f0       	brlt	.+2      	; 0x518 <LCDByte+0x486>
     516:	10 e0       	ldi	r17, 0x00	; 0
     518:	11 23       	and	r17, r17
     51a:	09 f4       	brne	.+2      	; 0x51e <LCDByte+0x48c>
     51c:	d9 c0       	rjmp	.+434    	; 0x6d0 <LCDByte+0x63e>
	{
		_delay_ms(__us / 1000.0);
     51e:	6c a9       	ldd	r22, Y+52	; 0x34
     520:	7d a9       	ldd	r23, Y+53	; 0x35
     522:	8e a9       	ldd	r24, Y+54	; 0x36
     524:	9f a9       	ldd	r25, Y+55	; 0x37
     526:	20 e0       	ldi	r18, 0x00	; 0
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	4a e7       	ldi	r20, 0x7A	; 122
     52c:	54 e4       	ldi	r21, 0x44	; 68
     52e:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     532:	dc 01       	movw	r26, r24
     534:	cb 01       	movw	r24, r22
     536:	9e 01       	movw	r18, r28
     538:	23 5c       	subi	r18, 0xC3	; 195
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	f9 01       	movw	r30, r18
     53e:	80 83       	st	Z, r24
     540:	91 83       	std	Z+1, r25	; 0x01
     542:	a2 83       	std	Z+2, r26	; 0x02
     544:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     546:	8e 01       	movw	r16, r28
     548:	0f 5b       	subi	r16, 0xBF	; 191
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	ce 01       	movw	r24, r28
     54e:	cd 96       	adiw	r24, 0x3d	; 61
     550:	fc 01       	movw	r30, r24
     552:	60 81       	ld	r22, Z
     554:	71 81       	ldd	r23, Z+1	; 0x01
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	4a e7       	ldi	r20, 0x7A	; 122
     560:	55 e4       	ldi	r21, 0x45	; 69
     562:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     566:	dc 01       	movw	r26, r24
     568:	cb 01       	movw	r24, r22
     56a:	f8 01       	movw	r30, r16
     56c:	80 83       	st	Z, r24
     56e:	91 83       	std	Z+1, r25	; 0x01
     570:	a2 83       	std	Z+2, r26	; 0x02
     572:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     574:	ce 01       	movw	r24, r28
     576:	8f 5b       	subi	r24, 0xBF	; 191
     578:	9f 4f       	sbci	r25, 0xFF	; 255
     57a:	11 e0       	ldi	r17, 0x01	; 1
     57c:	fc 01       	movw	r30, r24
     57e:	60 81       	ld	r22, Z
     580:	71 81       	ldd	r23, Z+1	; 0x01
     582:	82 81       	ldd	r24, Z+2	; 0x02
     584:	93 81       	ldd	r25, Z+3	; 0x03
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e8       	ldi	r20, 0x80	; 128
     58c:	5f e3       	ldi	r21, 0x3F	; 63
     58e:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     592:	88 23       	and	r24, r24
     594:	0c f0       	brlt	.+2      	; 0x598 <LCDByte+0x506>
     596:	10 e0       	ldi	r17, 0x00	; 0
     598:	11 23       	and	r17, r17
     59a:	49 f0       	breq	.+18     	; 0x5ae <LCDByte+0x51c>
		__ticks = 1;
     59c:	ce 01       	movw	r24, r28
     59e:	8b 5b       	subi	r24, 0xBB	; 187
     5a0:	9f 4f       	sbci	r25, 0xFF	; 255
     5a2:	21 e0       	ldi	r18, 0x01	; 1
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	fc 01       	movw	r30, r24
     5a8:	31 83       	std	Z+1, r19	; 0x01
     5aa:	20 83       	st	Z, r18
     5ac:	73 c0       	rjmp	.+230    	; 0x694 <LCDByte+0x602>
	else if (__tmp > 65535)
     5ae:	ce 01       	movw	r24, r28
     5b0:	8f 5b       	subi	r24, 0xBF	; 191
     5b2:	9f 4f       	sbci	r25, 0xFF	; 255
     5b4:	11 e0       	ldi	r17, 0x01	; 1
     5b6:	fc 01       	movw	r30, r24
     5b8:	60 81       	ld	r22, Z
     5ba:	71 81       	ldd	r23, Z+1	; 0x01
     5bc:	82 81       	ldd	r24, Z+2	; 0x02
     5be:	93 81       	ldd	r25, Z+3	; 0x03
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	4f e7       	ldi	r20, 0x7F	; 127
     5c6:	57 e4       	ldi	r21, 0x47	; 71
     5c8:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     5cc:	18 16       	cp	r1, r24
     5ce:	0c f0       	brlt	.+2      	; 0x5d2 <LCDByte+0x540>
     5d0:	10 e0       	ldi	r17, 0x00	; 0
     5d2:	11 23       	and	r17, r17
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <LCDByte+0x546>
     5d6:	4c c0       	rjmp	.+152    	; 0x670 <LCDByte+0x5de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5d8:	ce 01       	movw	r24, r28
     5da:	cd 96       	adiw	r24, 0x3d	; 61
     5dc:	fc 01       	movw	r30, r24
     5de:	60 81       	ld	r22, Z
     5e0:	71 81       	ldd	r23, Z+1	; 0x01
     5e2:	82 81       	ldd	r24, Z+2	; 0x02
     5e4:	93 81       	ldd	r25, Z+3	; 0x03
     5e6:	20 e0       	ldi	r18, 0x00	; 0
     5e8:	30 e0       	ldi	r19, 0x00	; 0
     5ea:	40 e2       	ldi	r20, 0x20	; 32
     5ec:	51 e4       	ldi	r21, 0x41	; 65
     5ee:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     5f2:	dc 01       	movw	r26, r24
     5f4:	cb 01       	movw	r24, r22
     5f6:	8e 01       	movw	r16, r28
     5f8:	0b 5b       	subi	r16, 0xBB	; 187
     5fa:	1f 4f       	sbci	r17, 0xFF	; 255
     5fc:	bc 01       	movw	r22, r24
     5fe:	cd 01       	movw	r24, r26
     600:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     604:	dc 01       	movw	r26, r24
     606:	cb 01       	movw	r24, r22
     608:	f8 01       	movw	r30, r16
     60a:	91 83       	std	Z+1, r25	; 0x01
     60c:	80 83       	st	Z, r24
     60e:	27 c0       	rjmp	.+78     	; 0x65e <LCDByte+0x5cc>
     610:	ce 01       	movw	r24, r28
     612:	89 5b       	subi	r24, 0xB9	; 185
     614:	9f 4f       	sbci	r25, 0xFF	; 255
     616:	20 e9       	ldi	r18, 0x90	; 144
     618:	31 e0       	ldi	r19, 0x01	; 1
     61a:	fc 01       	movw	r30, r24
     61c:	31 83       	std	Z+1, r19	; 0x01
     61e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     620:	ce 01       	movw	r24, r28
     622:	89 5b       	subi	r24, 0xB9	; 185
     624:	9f 4f       	sbci	r25, 0xFF	; 255
     626:	fc 01       	movw	r30, r24
     628:	80 81       	ld	r24, Z
     62a:	91 81       	ldd	r25, Z+1	; 0x01
     62c:	8c 01       	movw	r16, r24
     62e:	c8 01       	movw	r24, r16
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	f1 f7       	brne	.-4      	; 0x630 <LCDByte+0x59e>
     634:	8c 01       	movw	r16, r24
     636:	ce 01       	movw	r24, r28
     638:	89 5b       	subi	r24, 0xB9	; 185
     63a:	9f 4f       	sbci	r25, 0xFF	; 255
     63c:	fc 01       	movw	r30, r24
     63e:	11 83       	std	Z+1, r17	; 0x01
     640:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     642:	ce 01       	movw	r24, r28
     644:	8b 5b       	subi	r24, 0xBB	; 187
     646:	9f 4f       	sbci	r25, 0xFF	; 255
     648:	9e 01       	movw	r18, r28
     64a:	2b 5b       	subi	r18, 0xBB	; 187
     64c:	3f 4f       	sbci	r19, 0xFF	; 255
     64e:	f9 01       	movw	r30, r18
     650:	20 81       	ld	r18, Z
     652:	31 81       	ldd	r19, Z+1	; 0x01
     654:	21 50       	subi	r18, 0x01	; 1
     656:	30 40       	sbci	r19, 0x00	; 0
     658:	fc 01       	movw	r30, r24
     65a:	31 83       	std	Z+1, r19	; 0x01
     65c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     65e:	ce 01       	movw	r24, r28
     660:	8b 5b       	subi	r24, 0xBB	; 187
     662:	9f 4f       	sbci	r25, 0xFF	; 255
     664:	fc 01       	movw	r30, r24
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	00 97       	sbiw	r24, 0x00	; 0
     66c:	89 f6       	brne	.-94     	; 0x610 <LCDByte+0x57e>
     66e:	4c c0       	rjmp	.+152    	; 0x708 <LCDByte+0x676>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     670:	8e 01       	movw	r16, r28
     672:	0b 5b       	subi	r16, 0xBB	; 187
     674:	1f 4f       	sbci	r17, 0xFF	; 255
     676:	ce 01       	movw	r24, r28
     678:	8f 5b       	subi	r24, 0xBF	; 191
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	fc 01       	movw	r30, r24
     67e:	60 81       	ld	r22, Z
     680:	71 81       	ldd	r23, Z+1	; 0x01
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	93 81       	ldd	r25, Z+3	; 0x03
     686:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	f8 01       	movw	r30, r16
     690:	91 83       	std	Z+1, r25	; 0x01
     692:	80 83       	st	Z, r24
     694:	ce 01       	movw	r24, r28
     696:	87 5b       	subi	r24, 0xB7	; 183
     698:	9f 4f       	sbci	r25, 0xFF	; 255
     69a:	9e 01       	movw	r18, r28
     69c:	2b 5b       	subi	r18, 0xBB	; 187
     69e:	3f 4f       	sbci	r19, 0xFF	; 255
     6a0:	f9 01       	movw	r30, r18
     6a2:	20 81       	ld	r18, Z
     6a4:	31 81       	ldd	r19, Z+1	; 0x01
     6a6:	fc 01       	movw	r30, r24
     6a8:	31 83       	std	Z+1, r19	; 0x01
     6aa:	20 83       	st	Z, r18
     6ac:	ce 01       	movw	r24, r28
     6ae:	87 5b       	subi	r24, 0xB7	; 183
     6b0:	9f 4f       	sbci	r25, 0xFF	; 255
     6b2:	fc 01       	movw	r30, r24
     6b4:	80 81       	ld	r24, Z
     6b6:	91 81       	ldd	r25, Z+1	; 0x01
     6b8:	8c 01       	movw	r16, r24
     6ba:	c8 01       	movw	r24, r16
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	f1 f7       	brne	.-4      	; 0x6bc <LCDByte+0x62a>
     6c0:	8c 01       	movw	r16, r24
     6c2:	ce 01       	movw	r24, r28
     6c4:	87 5b       	subi	r24, 0xB7	; 183
     6c6:	9f 4f       	sbci	r25, 0xFF	; 255
     6c8:	fc 01       	movw	r30, r24
     6ca:	11 83       	std	Z+1, r17	; 0x01
     6cc:	00 83       	st	Z, r16
     6ce:	1c c0       	rjmp	.+56     	; 0x708 <LCDByte+0x676>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6d0:	68 ad       	ldd	r22, Y+56	; 0x38
     6d2:	79 ad       	ldd	r23, Y+57	; 0x39
     6d4:	8a ad       	ldd	r24, Y+58	; 0x3a
     6d6:	9b ad       	ldd	r25, Y+59	; 0x3b
     6d8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     6dc:	dc 01       	movw	r26, r24
     6de:	cb 01       	movw	r24, r22
     6e0:	8c af       	std	Y+60, r24	; 0x3c
     6e2:	ce 01       	movw	r24, r28
     6e4:	85 5b       	subi	r24, 0xB5	; 181
     6e6:	9f 4f       	sbci	r25, 0xFF	; 255
     6e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     6ea:	fc 01       	movw	r30, r24
     6ec:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6ee:	ce 01       	movw	r24, r28
     6f0:	85 5b       	subi	r24, 0xB5	; 181
     6f2:	9f 4f       	sbci	r25, 0xFF	; 255
     6f4:	fc 01       	movw	r30, r24
     6f6:	80 81       	ld	r24, Z
     6f8:	18 2f       	mov	r17, r24
     6fa:	1a 95       	dec	r17
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <LCDByte+0x668>
     6fe:	ce 01       	movw	r24, r28
     700:	85 5b       	subi	r24, 0xB5	; 181
     702:	9f 4f       	sbci	r25, 0xFF	; 255
     704:	fc 01       	movw	r30, r24
     706:	10 83       	st	Z, r17

_delay_us(1);

//Send the lower nibble
SET_E();
     708:	88 e3       	ldi	r24, 0x38	; 56
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	28 e3       	ldi	r18, 0x38	; 56
     70e:	30 e0       	ldi	r19, 0x00	; 0
     710:	f9 01       	movw	r30, r18
     712:	20 81       	ld	r18, Z
     714:	20 61       	ori	r18, 0x10	; 16
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     71a:	88 e3       	ldi	r24, 0x38	; 56
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	fc 01       	movw	r30, r24
     720:	80 81       	ld	r24, Z
     722:	98 2f       	mov	r25, r24
     724:	90 7f       	andi	r25, 0xF0	; 240
     726:	8a 81       	ldd	r24, Y+2	; 0x02
     728:	89 2b       	or	r24, r25
     72a:	8b 83       	std	Y+3, r24	; 0x03

LCD_DATA_PORT=temp;
     72c:	88 e3       	ldi	r24, 0x38	; 56
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2b 81       	ldd	r18, Y+3	; 0x03
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
     736:	9e 01       	movw	r18, r28
     738:	24 5b       	subi	r18, 0xB4	; 180
     73a:	3f 4f       	sbci	r19, 0xFF	; 255
     73c:	80 e0       	ldi	r24, 0x00	; 0
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	a0 e8       	ldi	r26, 0x80	; 128
     742:	bf e3       	ldi	r27, 0x3F	; 63
     744:	f9 01       	movw	r30, r18
     746:	80 83       	st	Z, r24
     748:	91 83       	std	Z+1, r25	; 0x01
     74a:	a2 83       	std	Z+2, r26	; 0x02
     74c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     74e:	8e 01       	movw	r16, r28
     750:	00 5b       	subi	r16, 0xB0	; 176
     752:	1f 4f       	sbci	r17, 0xFF	; 255
     754:	ce 01       	movw	r24, r28
     756:	84 5b       	subi	r24, 0xB4	; 180
     758:	9f 4f       	sbci	r25, 0xFF	; 255
     75a:	fc 01       	movw	r30, r24
     75c:	60 81       	ld	r22, Z
     75e:	71 81       	ldd	r23, Z+1	; 0x01
     760:	82 81       	ldd	r24, Z+2	; 0x02
     762:	93 81       	ldd	r25, Z+3	; 0x03
     764:	2b ea       	ldi	r18, 0xAB	; 171
     766:	3a ea       	ldi	r19, 0xAA	; 170
     768:	4a ea       	ldi	r20, 0xAA	; 170
     76a:	50 e4       	ldi	r21, 0x40	; 64
     76c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     770:	dc 01       	movw	r26, r24
     772:	cb 01       	movw	r24, r22
     774:	f8 01       	movw	r30, r16
     776:	80 83       	st	Z, r24
     778:	91 83       	std	Z+1, r25	; 0x01
     77a:	a2 83       	std	Z+2, r26	; 0x02
     77c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     77e:	ce 01       	movw	r24, r28
     780:	80 5b       	subi	r24, 0xB0	; 176
     782:	9f 4f       	sbci	r25, 0xFF	; 255
     784:	11 e0       	ldi	r17, 0x01	; 1
     786:	fc 01       	movw	r30, r24
     788:	60 81       	ld	r22, Z
     78a:	71 81       	ldd	r23, Z+1	; 0x01
     78c:	82 81       	ldd	r24, Z+2	; 0x02
     78e:	93 81       	ldd	r25, Z+3	; 0x03
     790:	20 e0       	ldi	r18, 0x00	; 0
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	40 e8       	ldi	r20, 0x80	; 128
     796:	5f e3       	ldi	r21, 0x3F	; 63
     798:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     79c:	88 23       	and	r24, r24
     79e:	0c f0       	brlt	.+2      	; 0x7a2 <LCDByte+0x710>
     7a0:	10 e0       	ldi	r17, 0x00	; 0
     7a2:	11 23       	and	r17, r17
     7a4:	39 f0       	breq	.+14     	; 0x7b4 <LCDByte+0x722>
		__ticks = 1;
     7a6:	ce 01       	movw	r24, r28
     7a8:	8c 5a       	subi	r24, 0xAC	; 172
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	fc 01       	movw	r30, r24
     7b0:	20 83       	st	Z, r18
     7b2:	05 c1       	rjmp	.+522    	; 0x9be <__stack+0x15f>
	else if (__tmp > 255)
     7b4:	ce 01       	movw	r24, r28
     7b6:	80 5b       	subi	r24, 0xB0	; 176
     7b8:	9f 4f       	sbci	r25, 0xFF	; 255
     7ba:	11 e0       	ldi	r17, 0x01	; 1
     7bc:	fc 01       	movw	r30, r24
     7be:	60 81       	ld	r22, Z
     7c0:	71 81       	ldd	r23, Z+1	; 0x01
     7c2:	82 81       	ldd	r24, Z+2	; 0x02
     7c4:	93 81       	ldd	r25, Z+3	; 0x03
     7c6:	20 e0       	ldi	r18, 0x00	; 0
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	4f e7       	ldi	r20, 0x7F	; 127
     7cc:	53 e4       	ldi	r21, 0x43	; 67
     7ce:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     7d2:	18 16       	cp	r1, r24
     7d4:	0c f0       	brlt	.+2      	; 0x7d8 <LCDByte+0x746>
     7d6:	10 e0       	ldi	r17, 0x00	; 0
     7d8:	11 23       	and	r17, r17
     7da:	09 f4       	brne	.+2      	; 0x7de <LCDByte+0x74c>
     7dc:	df c0       	rjmp	.+446    	; 0x99c <__stack+0x13d>
	{
		_delay_ms(__us / 1000.0);
     7de:	ce 01       	movw	r24, r28
     7e0:	84 5b       	subi	r24, 0xB4	; 180
     7e2:	9f 4f       	sbci	r25, 0xFF	; 255
     7e4:	fc 01       	movw	r30, r24
     7e6:	60 81       	ld	r22, Z
     7e8:	71 81       	ldd	r23, Z+1	; 0x01
     7ea:	82 81       	ldd	r24, Z+2	; 0x02
     7ec:	93 81       	ldd	r25, Z+3	; 0x03
     7ee:	20 e0       	ldi	r18, 0x00	; 0
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	4a e7       	ldi	r20, 0x7A	; 122
     7f4:	54 e4       	ldi	r21, 0x44	; 68
     7f6:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     7fa:	dc 01       	movw	r26, r24
     7fc:	cb 01       	movw	r24, r22
     7fe:	9e 01       	movw	r18, r28
     800:	2b 5a       	subi	r18, 0xAB	; 171
     802:	3f 4f       	sbci	r19, 0xFF	; 255
     804:	f9 01       	movw	r30, r18
     806:	80 83       	st	Z, r24
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	a2 83       	std	Z+2, r26	; 0x02
     80c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     80e:	8e 01       	movw	r16, r28
     810:	07 5a       	subi	r16, 0xA7	; 167
     812:	1f 4f       	sbci	r17, 0xFF	; 255
     814:	ce 01       	movw	r24, r28
     816:	8b 5a       	subi	r24, 0xAB	; 171
     818:	9f 4f       	sbci	r25, 0xFF	; 255
     81a:	fc 01       	movw	r30, r24
     81c:	60 81       	ld	r22, Z
     81e:	71 81       	ldd	r23, Z+1	; 0x01
     820:	82 81       	ldd	r24, Z+2	; 0x02
     822:	93 81       	ldd	r25, Z+3	; 0x03
     824:	20 e0       	ldi	r18, 0x00	; 0
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	4a e7       	ldi	r20, 0x7A	; 122
     82a:	55 e4       	ldi	r21, 0x45	; 69
     82c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     830:	dc 01       	movw	r26, r24
     832:	cb 01       	movw	r24, r22
     834:	f8 01       	movw	r30, r16
     836:	80 83       	st	Z, r24
     838:	91 83       	std	Z+1, r25	; 0x01
     83a:	a2 83       	std	Z+2, r26	; 0x02
     83c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     83e:	ce 01       	movw	r24, r28
     840:	87 5a       	subi	r24, 0xA7	; 167
     842:	9f 4f       	sbci	r25, 0xFF	; 255
     844:	11 e0       	ldi	r17, 0x01	; 1
     846:	fc 01       	movw	r30, r24
     848:	60 81       	ld	r22, Z
     84a:	71 81       	ldd	r23, Z+1	; 0x01
     84c:	82 81       	ldd	r24, Z+2	; 0x02
     84e:	93 81       	ldd	r25, Z+3	; 0x03
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     85c:	88 23       	and	r24, r24
     85e:	0c f0       	brlt	.+2      	; 0x862 <__stack+0x3>
     860:	10 e0       	ldi	r17, 0x00	; 0
     862:	11 23       	and	r17, r17
     864:	49 f0       	breq	.+18     	; 0x878 <__stack+0x19>
		__ticks = 1;
     866:	ce 01       	movw	r24, r28
     868:	83 5a       	subi	r24, 0xA3	; 163
     86a:	9f 4f       	sbci	r25, 0xFF	; 255
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	fc 01       	movw	r30, r24
     872:	31 83       	std	Z+1, r19	; 0x01
     874:	20 83       	st	Z, r18
     876:	74 c0       	rjmp	.+232    	; 0x960 <__stack+0x101>
	else if (__tmp > 65535)
     878:	ce 01       	movw	r24, r28
     87a:	87 5a       	subi	r24, 0xA7	; 167
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	11 e0       	ldi	r17, 0x01	; 1
     880:	fc 01       	movw	r30, r24
     882:	60 81       	ld	r22, Z
     884:	71 81       	ldd	r23, Z+1	; 0x01
     886:	82 81       	ldd	r24, Z+2	; 0x02
     888:	93 81       	ldd	r25, Z+3	; 0x03
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	3f ef       	ldi	r19, 0xFF	; 255
     88e:	4f e7       	ldi	r20, 0x7F	; 127
     890:	57 e4       	ldi	r21, 0x47	; 71
     892:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     896:	18 16       	cp	r1, r24
     898:	0c f0       	brlt	.+2      	; 0x89c <__stack+0x3d>
     89a:	10 e0       	ldi	r17, 0x00	; 0
     89c:	11 23       	and	r17, r17
     89e:	09 f4       	brne	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	4d c0       	rjmp	.+154    	; 0x93c <__stack+0xdd>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     8a2:	ce 01       	movw	r24, r28
     8a4:	8b 5a       	subi	r24, 0xAB	; 171
     8a6:	9f 4f       	sbci	r25, 0xFF	; 255
     8a8:	fc 01       	movw	r30, r24
     8aa:	60 81       	ld	r22, Z
     8ac:	71 81       	ldd	r23, Z+1	; 0x01
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	93 81       	ldd	r25, Z+3	; 0x03
     8b2:	20 e0       	ldi	r18, 0x00	; 0
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	40 e2       	ldi	r20, 0x20	; 32
     8b8:	51 e4       	ldi	r21, 0x41	; 65
     8ba:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     8be:	dc 01       	movw	r26, r24
     8c0:	cb 01       	movw	r24, r22
     8c2:	8e 01       	movw	r16, r28
     8c4:	03 5a       	subi	r16, 0xA3	; 163
     8c6:	1f 4f       	sbci	r17, 0xFF	; 255
     8c8:	bc 01       	movw	r22, r24
     8ca:	cd 01       	movw	r24, r26
     8cc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     8d0:	dc 01       	movw	r26, r24
     8d2:	cb 01       	movw	r24, r22
     8d4:	f8 01       	movw	r30, r16
     8d6:	91 83       	std	Z+1, r25	; 0x01
     8d8:	80 83       	st	Z, r24
     8da:	27 c0       	rjmp	.+78     	; 0x92a <__stack+0xcb>
     8dc:	ce 01       	movw	r24, r28
     8de:	81 5a       	subi	r24, 0xA1	; 161
     8e0:	9f 4f       	sbci	r25, 0xFF	; 255
     8e2:	20 e9       	ldi	r18, 0x90	; 144
     8e4:	31 e0       	ldi	r19, 0x01	; 1
     8e6:	fc 01       	movw	r30, r24
     8e8:	31 83       	std	Z+1, r19	; 0x01
     8ea:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ec:	ce 01       	movw	r24, r28
     8ee:	81 5a       	subi	r24, 0xA1	; 161
     8f0:	9f 4f       	sbci	r25, 0xFF	; 255
     8f2:	fc 01       	movw	r30, r24
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	8c 01       	movw	r16, r24
     8fa:	c8 01       	movw	r24, r16
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <__stack+0x9d>
     900:	8c 01       	movw	r16, r24
     902:	ce 01       	movw	r24, r28
     904:	81 5a       	subi	r24, 0xA1	; 161
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	fc 01       	movw	r30, r24
     90a:	11 83       	std	Z+1, r17	; 0x01
     90c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     90e:	ce 01       	movw	r24, r28
     910:	83 5a       	subi	r24, 0xA3	; 163
     912:	9f 4f       	sbci	r25, 0xFF	; 255
     914:	9e 01       	movw	r18, r28
     916:	23 5a       	subi	r18, 0xA3	; 163
     918:	3f 4f       	sbci	r19, 0xFF	; 255
     91a:	f9 01       	movw	r30, r18
     91c:	20 81       	ld	r18, Z
     91e:	31 81       	ldd	r19, Z+1	; 0x01
     920:	21 50       	subi	r18, 0x01	; 1
     922:	30 40       	sbci	r19, 0x00	; 0
     924:	fc 01       	movw	r30, r24
     926:	31 83       	std	Z+1, r19	; 0x01
     928:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     92a:	ce 01       	movw	r24, r28
     92c:	83 5a       	subi	r24, 0xA3	; 163
     92e:	9f 4f       	sbci	r25, 0xFF	; 255
     930:	fc 01       	movw	r30, r24
     932:	80 81       	ld	r24, Z
     934:	91 81       	ldd	r25, Z+1	; 0x01
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	89 f6       	brne	.-94     	; 0x8dc <__stack+0x7d>
     93a:	58 c0       	rjmp	.+176    	; 0x9ec <__stack+0x18d>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     93c:	8e 01       	movw	r16, r28
     93e:	03 5a       	subi	r16, 0xA3	; 163
     940:	1f 4f       	sbci	r17, 0xFF	; 255
     942:	ce 01       	movw	r24, r28
     944:	87 5a       	subi	r24, 0xA7	; 167
     946:	9f 4f       	sbci	r25, 0xFF	; 255
     948:	fc 01       	movw	r30, r24
     94a:	60 81       	ld	r22, Z
     94c:	71 81       	ldd	r23, Z+1	; 0x01
     94e:	82 81       	ldd	r24, Z+2	; 0x02
     950:	93 81       	ldd	r25, Z+3	; 0x03
     952:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	f8 01       	movw	r30, r16
     95c:	91 83       	std	Z+1, r25	; 0x01
     95e:	80 83       	st	Z, r24
     960:	ce 01       	movw	r24, r28
     962:	8f 59       	subi	r24, 0x9F	; 159
     964:	9f 4f       	sbci	r25, 0xFF	; 255
     966:	9e 01       	movw	r18, r28
     968:	23 5a       	subi	r18, 0xA3	; 163
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	f9 01       	movw	r30, r18
     96e:	20 81       	ld	r18, Z
     970:	31 81       	ldd	r19, Z+1	; 0x01
     972:	fc 01       	movw	r30, r24
     974:	31 83       	std	Z+1, r19	; 0x01
     976:	20 83       	st	Z, r18
     978:	ce 01       	movw	r24, r28
     97a:	8f 59       	subi	r24, 0x9F	; 159
     97c:	9f 4f       	sbci	r25, 0xFF	; 255
     97e:	fc 01       	movw	r30, r24
     980:	80 81       	ld	r24, Z
     982:	91 81       	ldd	r25, Z+1	; 0x01
     984:	8c 01       	movw	r16, r24
     986:	c8 01       	movw	r24, r16
     988:	01 97       	sbiw	r24, 0x01	; 1
     98a:	f1 f7       	brne	.-4      	; 0x988 <__stack+0x129>
     98c:	8c 01       	movw	r16, r24
     98e:	ce 01       	movw	r24, r28
     990:	8f 59       	subi	r24, 0x9F	; 159
     992:	9f 4f       	sbci	r25, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	11 83       	std	Z+1, r17	; 0x01
     998:	00 83       	st	Z, r16
     99a:	28 c0       	rjmp	.+80     	; 0x9ec <__stack+0x18d>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     99c:	8e 01       	movw	r16, r28
     99e:	0c 5a       	subi	r16, 0xAC	; 172
     9a0:	1f 4f       	sbci	r17, 0xFF	; 255
     9a2:	ce 01       	movw	r24, r28
     9a4:	80 5b       	subi	r24, 0xB0	; 176
     9a6:	9f 4f       	sbci	r25, 0xFF	; 255
     9a8:	fc 01       	movw	r30, r24
     9aa:	60 81       	ld	r22, Z
     9ac:	71 81       	ldd	r23, Z+1	; 0x01
     9ae:	82 81       	ldd	r24, Z+2	; 0x02
     9b0:	93 81       	ldd	r25, Z+3	; 0x03
     9b2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     9b6:	dc 01       	movw	r26, r24
     9b8:	cb 01       	movw	r24, r22
     9ba:	f8 01       	movw	r30, r16
     9bc:	80 83       	st	Z, r24
     9be:	ce 01       	movw	r24, r28
     9c0:	8d 59       	subi	r24, 0x9D	; 157
     9c2:	9f 4f       	sbci	r25, 0xFF	; 255
     9c4:	9e 01       	movw	r18, r28
     9c6:	2c 5a       	subi	r18, 0xAC	; 172
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	fc 01       	movw	r30, r24
     9d0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9d2:	ce 01       	movw	r24, r28
     9d4:	8d 59       	subi	r24, 0x9D	; 157
     9d6:	9f 4f       	sbci	r25, 0xFF	; 255
     9d8:	fc 01       	movw	r30, r24
     9da:	80 81       	ld	r24, Z
     9dc:	18 2f       	mov	r17, r24
     9de:	1a 95       	dec	r17
     9e0:	f1 f7       	brne	.-4      	; 0x9de <__stack+0x17f>
     9e2:	ce 01       	movw	r24, r28
     9e4:	8d 59       	subi	r24, 0x9D	; 157
     9e6:	9f 4f       	sbci	r25, 0xFF	; 255
     9e8:	fc 01       	movw	r30, r24
     9ea:	10 83       	st	Z, r17

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     9ec:	88 e3       	ldi	r24, 0x38	; 56
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	28 e3       	ldi	r18, 0x38	; 56
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	f9 01       	movw	r30, r18
     9f6:	20 81       	ld	r18, Z
     9f8:	2f 7e       	andi	r18, 0xEF	; 239
     9fa:	fc 01       	movw	r30, r24
     9fc:	20 83       	st	Z, r18
     9fe:	9e 01       	movw	r18, r28
     a00:	2c 59       	subi	r18, 0x9C	; 156
     a02:	3f 4f       	sbci	r19, 0xFF	; 255
     a04:	80 e0       	ldi	r24, 0x00	; 0
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e8       	ldi	r26, 0x80	; 128
     a0a:	bf e3       	ldi	r27, 0x3F	; 63
     a0c:	f9 01       	movw	r30, r18
     a0e:	80 83       	st	Z, r24
     a10:	91 83       	std	Z+1, r25	; 0x01
     a12:	a2 83       	std	Z+2, r26	; 0x02
     a14:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     a16:	8e 01       	movw	r16, r28
     a18:	08 59       	subi	r16, 0x98	; 152
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	8c 59       	subi	r24, 0x9C	; 156
     a20:	9f 4f       	sbci	r25, 0xFF	; 255
     a22:	fc 01       	movw	r30, r24
     a24:	60 81       	ld	r22, Z
     a26:	71 81       	ldd	r23, Z+1	; 0x01
     a28:	82 81       	ldd	r24, Z+2	; 0x02
     a2a:	93 81       	ldd	r25, Z+3	; 0x03
     a2c:	2b ea       	ldi	r18, 0xAB	; 171
     a2e:	3a ea       	ldi	r19, 0xAA	; 170
     a30:	4a ea       	ldi	r20, 0xAA	; 170
     a32:	50 e4       	ldi	r21, 0x40	; 64
     a34:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     a38:	dc 01       	movw	r26, r24
     a3a:	cb 01       	movw	r24, r22
     a3c:	f8 01       	movw	r30, r16
     a3e:	80 83       	st	Z, r24
     a40:	91 83       	std	Z+1, r25	; 0x01
     a42:	a2 83       	std	Z+2, r26	; 0x02
     a44:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     a46:	ce 01       	movw	r24, r28
     a48:	88 59       	subi	r24, 0x98	; 152
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	11 e0       	ldi	r17, 0x01	; 1
     a4e:	fc 01       	movw	r30, r24
     a50:	60 81       	ld	r22, Z
     a52:	71 81       	ldd	r23, Z+1	; 0x01
     a54:	82 81       	ldd	r24, Z+2	; 0x02
     a56:	93 81       	ldd	r25, Z+3	; 0x03
     a58:	20 e0       	ldi	r18, 0x00	; 0
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	40 e8       	ldi	r20, 0x80	; 128
     a5e:	5f e3       	ldi	r21, 0x3F	; 63
     a60:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     a64:	88 23       	and	r24, r24
     a66:	0c f0       	brlt	.+2      	; 0xa6a <__stack+0x20b>
     a68:	10 e0       	ldi	r17, 0x00	; 0
     a6a:	11 23       	and	r17, r17
     a6c:	39 f0       	breq	.+14     	; 0xa7c <__stack+0x21d>
		__ticks = 1;
     a6e:	ce 01       	movw	r24, r28
     a70:	84 59       	subi	r24, 0x94	; 148
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	21 e0       	ldi	r18, 0x01	; 1
     a76:	fc 01       	movw	r30, r24
     a78:	20 83       	st	Z, r18
     a7a:	05 c1       	rjmp	.+522    	; 0xc86 <__stack+0x427>
	else if (__tmp > 255)
     a7c:	ce 01       	movw	r24, r28
     a7e:	88 59       	subi	r24, 0x98	; 152
     a80:	9f 4f       	sbci	r25, 0xFF	; 255
     a82:	11 e0       	ldi	r17, 0x01	; 1
     a84:	fc 01       	movw	r30, r24
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	82 81       	ldd	r24, Z+2	; 0x02
     a8c:	93 81       	ldd	r25, Z+3	; 0x03
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	4f e7       	ldi	r20, 0x7F	; 127
     a94:	53 e4       	ldi	r21, 0x43	; 67
     a96:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     a9a:	18 16       	cp	r1, r24
     a9c:	0c f0       	brlt	.+2      	; 0xaa0 <__stack+0x241>
     a9e:	10 e0       	ldi	r17, 0x00	; 0
     aa0:	11 23       	and	r17, r17
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <__stack+0x247>
     aa4:	df c0       	rjmp	.+446    	; 0xc64 <__stack+0x405>
	{
		_delay_ms(__us / 1000.0);
     aa6:	ce 01       	movw	r24, r28
     aa8:	8c 59       	subi	r24, 0x9C	; 156
     aaa:	9f 4f       	sbci	r25, 0xFF	; 255
     aac:	fc 01       	movw	r30, r24
     aae:	60 81       	ld	r22, Z
     ab0:	71 81       	ldd	r23, Z+1	; 0x01
     ab2:	82 81       	ldd	r24, Z+2	; 0x02
     ab4:	93 81       	ldd	r25, Z+3	; 0x03
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	4a e7       	ldi	r20, 0x7A	; 122
     abc:	54 e4       	ldi	r21, 0x44	; 68
     abe:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     ac2:	dc 01       	movw	r26, r24
     ac4:	cb 01       	movw	r24, r22
     ac6:	9e 01       	movw	r18, r28
     ac8:	23 59       	subi	r18, 0x93	; 147
     aca:	3f 4f       	sbci	r19, 0xFF	; 255
     acc:	f9 01       	movw	r30, r18
     ace:	80 83       	st	Z, r24
     ad0:	91 83       	std	Z+1, r25	; 0x01
     ad2:	a2 83       	std	Z+2, r26	; 0x02
     ad4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     ad6:	8e 01       	movw	r16, r28
     ad8:	0f 58       	subi	r16, 0x8F	; 143
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	ce 01       	movw	r24, r28
     ade:	83 59       	subi	r24, 0x93	; 147
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	fc 01       	movw	r30, r24
     ae4:	60 81       	ld	r22, Z
     ae6:	71 81       	ldd	r23, Z+1	; 0x01
     ae8:	82 81       	ldd	r24, Z+2	; 0x02
     aea:	93 81       	ldd	r25, Z+3	; 0x03
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	4a e7       	ldi	r20, 0x7A	; 122
     af2:	55 e4       	ldi	r21, 0x45	; 69
     af4:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     af8:	dc 01       	movw	r26, r24
     afa:	cb 01       	movw	r24, r22
     afc:	f8 01       	movw	r30, r16
     afe:	80 83       	st	Z, r24
     b00:	91 83       	std	Z+1, r25	; 0x01
     b02:	a2 83       	std	Z+2, r26	; 0x02
     b04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b06:	ce 01       	movw	r24, r28
     b08:	8f 58       	subi	r24, 0x8F	; 143
     b0a:	9f 4f       	sbci	r25, 0xFF	; 255
     b0c:	11 e0       	ldi	r17, 0x01	; 1
     b0e:	fc 01       	movw	r30, r24
     b10:	60 81       	ld	r22, Z
     b12:	71 81       	ldd	r23, Z+1	; 0x01
     b14:	82 81       	ldd	r24, Z+2	; 0x02
     b16:	93 81       	ldd	r25, Z+3	; 0x03
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e8       	ldi	r20, 0x80	; 128
     b1e:	5f e3       	ldi	r21, 0x3F	; 63
     b20:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     b24:	88 23       	and	r24, r24
     b26:	0c f0       	brlt	.+2      	; 0xb2a <__stack+0x2cb>
     b28:	10 e0       	ldi	r17, 0x00	; 0
     b2a:	11 23       	and	r17, r17
     b2c:	49 f0       	breq	.+18     	; 0xb40 <__stack+0x2e1>
		__ticks = 1;
     b2e:	ce 01       	movw	r24, r28
     b30:	8b 58       	subi	r24, 0x8B	; 139
     b32:	9f 4f       	sbci	r25, 0xFF	; 255
     b34:	21 e0       	ldi	r18, 0x01	; 1
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	fc 01       	movw	r30, r24
     b3a:	31 83       	std	Z+1, r19	; 0x01
     b3c:	20 83       	st	Z, r18
     b3e:	74 c0       	rjmp	.+232    	; 0xc28 <__stack+0x3c9>
	else if (__tmp > 65535)
     b40:	ce 01       	movw	r24, r28
     b42:	8f 58       	subi	r24, 0x8F	; 143
     b44:	9f 4f       	sbci	r25, 0xFF	; 255
     b46:	11 e0       	ldi	r17, 0x01	; 1
     b48:	fc 01       	movw	r30, r24
     b4a:	60 81       	ld	r22, Z
     b4c:	71 81       	ldd	r23, Z+1	; 0x01
     b4e:	82 81       	ldd	r24, Z+2	; 0x02
     b50:	93 81       	ldd	r25, Z+3	; 0x03
     b52:	20 e0       	ldi	r18, 0x00	; 0
     b54:	3f ef       	ldi	r19, 0xFF	; 255
     b56:	4f e7       	ldi	r20, 0x7F	; 127
     b58:	57 e4       	ldi	r21, 0x47	; 71
     b5a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     b5e:	18 16       	cp	r1, r24
     b60:	0c f0       	brlt	.+2      	; 0xb64 <__stack+0x305>
     b62:	10 e0       	ldi	r17, 0x00	; 0
     b64:	11 23       	and	r17, r17
     b66:	09 f4       	brne	.+2      	; 0xb6a <__stack+0x30b>
     b68:	4d c0       	rjmp	.+154    	; 0xc04 <__stack+0x3a5>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b6a:	ce 01       	movw	r24, r28
     b6c:	83 59       	subi	r24, 0x93	; 147
     b6e:	9f 4f       	sbci	r25, 0xFF	; 255
     b70:	fc 01       	movw	r30, r24
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	40 e2       	ldi	r20, 0x20	; 32
     b80:	51 e4       	ldi	r21, 0x41	; 65
     b82:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	8e 01       	movw	r16, r28
     b8c:	0b 58       	subi	r16, 0x8B	; 139
     b8e:	1f 4f       	sbci	r17, 0xFF	; 255
     b90:	bc 01       	movw	r22, r24
     b92:	cd 01       	movw	r24, r26
     b94:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     b98:	dc 01       	movw	r26, r24
     b9a:	cb 01       	movw	r24, r22
     b9c:	f8 01       	movw	r30, r16
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	80 83       	st	Z, r24
     ba2:	27 c0       	rjmp	.+78     	; 0xbf2 <__stack+0x393>
     ba4:	ce 01       	movw	r24, r28
     ba6:	89 58       	subi	r24, 0x89	; 137
     ba8:	9f 4f       	sbci	r25, 0xFF	; 255
     baa:	20 e9       	ldi	r18, 0x90	; 144
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	fc 01       	movw	r30, r24
     bb0:	31 83       	std	Z+1, r19	; 0x01
     bb2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bb4:	ce 01       	movw	r24, r28
     bb6:	89 58       	subi	r24, 0x89	; 137
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	fc 01       	movw	r30, r24
     bbc:	80 81       	ld	r24, Z
     bbe:	91 81       	ldd	r25, Z+1	; 0x01
     bc0:	8c 01       	movw	r16, r24
     bc2:	c8 01       	movw	r24, r16
     bc4:	01 97       	sbiw	r24, 0x01	; 1
     bc6:	f1 f7       	brne	.-4      	; 0xbc4 <__stack+0x365>
     bc8:	8c 01       	movw	r16, r24
     bca:	ce 01       	movw	r24, r28
     bcc:	89 58       	subi	r24, 0x89	; 137
     bce:	9f 4f       	sbci	r25, 0xFF	; 255
     bd0:	fc 01       	movw	r30, r24
     bd2:	11 83       	std	Z+1, r17	; 0x01
     bd4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bd6:	ce 01       	movw	r24, r28
     bd8:	8b 58       	subi	r24, 0x8B	; 139
     bda:	9f 4f       	sbci	r25, 0xFF	; 255
     bdc:	9e 01       	movw	r18, r28
     bde:	2b 58       	subi	r18, 0x8B	; 139
     be0:	3f 4f       	sbci	r19, 0xFF	; 255
     be2:	f9 01       	movw	r30, r18
     be4:	20 81       	ld	r18, Z
     be6:	31 81       	ldd	r19, Z+1	; 0x01
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	30 40       	sbci	r19, 0x00	; 0
     bec:	fc 01       	movw	r30, r24
     bee:	31 83       	std	Z+1, r19	; 0x01
     bf0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bf2:	ce 01       	movw	r24, r28
     bf4:	8b 58       	subi	r24, 0x8B	; 139
     bf6:	9f 4f       	sbci	r25, 0xFF	; 255
     bf8:	fc 01       	movw	r30, r24
     bfa:	80 81       	ld	r24, Z
     bfc:	91 81       	ldd	r25, Z+1	; 0x01
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	89 f6       	brne	.-94     	; 0xba4 <__stack+0x345>
     c02:	58 c0       	rjmp	.+176    	; 0xcb4 <__stack+0x455>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c04:	8e 01       	movw	r16, r28
     c06:	0b 58       	subi	r16, 0x8B	; 139
     c08:	1f 4f       	sbci	r17, 0xFF	; 255
     c0a:	ce 01       	movw	r24, r28
     c0c:	8f 58       	subi	r24, 0x8F	; 143
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	fc 01       	movw	r30, r24
     c12:	60 81       	ld	r22, Z
     c14:	71 81       	ldd	r23, Z+1	; 0x01
     c16:	82 81       	ldd	r24, Z+2	; 0x02
     c18:	93 81       	ldd	r25, Z+3	; 0x03
     c1a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	f8 01       	movw	r30, r16
     c24:	91 83       	std	Z+1, r25	; 0x01
     c26:	80 83       	st	Z, r24
     c28:	ce 01       	movw	r24, r28
     c2a:	87 58       	subi	r24, 0x87	; 135
     c2c:	9f 4f       	sbci	r25, 0xFF	; 255
     c2e:	9e 01       	movw	r18, r28
     c30:	2b 58       	subi	r18, 0x8B	; 139
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	f9 01       	movw	r30, r18
     c36:	20 81       	ld	r18, Z
     c38:	31 81       	ldd	r19, Z+1	; 0x01
     c3a:	fc 01       	movw	r30, r24
     c3c:	31 83       	std	Z+1, r19	; 0x01
     c3e:	20 83       	st	Z, r18
     c40:	ce 01       	movw	r24, r28
     c42:	87 58       	subi	r24, 0x87	; 135
     c44:	9f 4f       	sbci	r25, 0xFF	; 255
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	91 81       	ldd	r25, Z+1	; 0x01
     c4c:	8c 01       	movw	r16, r24
     c4e:	c8 01       	movw	r24, r16
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <__stack+0x3f1>
     c54:	8c 01       	movw	r16, r24
     c56:	ce 01       	movw	r24, r28
     c58:	87 58       	subi	r24, 0x87	; 135
     c5a:	9f 4f       	sbci	r25, 0xFF	; 255
     c5c:	fc 01       	movw	r30, r24
     c5e:	11 83       	std	Z+1, r17	; 0x01
     c60:	00 83       	st	Z, r16
     c62:	28 c0       	rjmp	.+80     	; 0xcb4 <__stack+0x455>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c64:	8e 01       	movw	r16, r28
     c66:	04 59       	subi	r16, 0x94	; 148
     c68:	1f 4f       	sbci	r17, 0xFF	; 255
     c6a:	ce 01       	movw	r24, r28
     c6c:	88 59       	subi	r24, 0x98	; 152
     c6e:	9f 4f       	sbci	r25, 0xFF	; 255
     c70:	fc 01       	movw	r30, r24
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	f8 01       	movw	r30, r16
     c84:	80 83       	st	Z, r24
     c86:	ce 01       	movw	r24, r28
     c88:	85 58       	subi	r24, 0x85	; 133
     c8a:	9f 4f       	sbci	r25, 0xFF	; 255
     c8c:	9e 01       	movw	r18, r28
     c8e:	24 59       	subi	r18, 0x94	; 148
     c90:	3f 4f       	sbci	r19, 0xFF	; 255
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	fc 01       	movw	r30, r24
     c98:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     c9a:	ce 01       	movw	r24, r28
     c9c:	85 58       	subi	r24, 0x85	; 133
     c9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ca0:	fc 01       	movw	r30, r24
     ca2:	80 81       	ld	r24, Z
     ca4:	18 2f       	mov	r17, r24
     ca6:	1a 95       	dec	r17
     ca8:	f1 f7       	brne	.-4      	; 0xca6 <__stack+0x447>
     caa:	ce 01       	movw	r24, r28
     cac:	85 58       	subi	r24, 0x85	; 133
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	fc 01       	movw	r30, r24
     cb2:	10 83       	st	Z, r17

_delay_us(1);			//tEL

LCDBusyLoop();
     cb4:	0e 94 68 06 	call	0xcd0	; 0xcd0 <LCDBusyLoop>
}
     cb8:	c3 58       	subi	r28, 0x83	; 131
     cba:	df 4f       	sbci	r29, 0xFF	; 255
     cbc:	0f b6       	in	r0, 0x3f	; 63
     cbe:	f8 94       	cli
     cc0:	de bf       	out	0x3e, r29	; 62
     cc2:	0f be       	out	0x3f, r0	; 63
     cc4:	cd bf       	out	0x3d, r28	; 61
     cc6:	cf 91       	pop	r28
     cc8:	df 91       	pop	r29
     cca:	1f 91       	pop	r17
     ccc:	0f 91       	pop	r16
     cce:	08 95       	ret

00000cd0 <LCDBusyLoop>:

void LCDBusyLoop()
{
     cd0:	0f 93       	push	r16
     cd2:	1f 93       	push	r17
     cd4:	df 93       	push	r29
     cd6:	cf 93       	push	r28
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	cb 5a       	subi	r28, 0xAB	; 171
     cde:	d0 40       	sbci	r29, 0x00	; 0
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;
     cea:	19 82       	std	Y+1, r1	; 0x01

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     cec:	87 e3       	ldi	r24, 0x37	; 55
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	27 e3       	ldi	r18, 0x37	; 55
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	f9 01       	movw	r30, r18
     cf6:	20 81       	ld	r18, Z
     cf8:	20 7f       	andi	r18, 0xF0	; 240
     cfa:	fc 01       	movw	r30, r24
     cfc:	20 83       	st	Z, r18

	//change LCD mode
	SET_RW();		//Read mode
     cfe:	82 e3       	ldi	r24, 0x32	; 50
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	22 e3       	ldi	r18, 0x32	; 50
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	f9 01       	movw	r30, r18
     d08:	20 81       	ld	r18, Z
     d0a:	20 64       	ori	r18, 0x40	; 64
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 83       	st	Z, r18
	CLEAR_RS();		//Read status
     d10:	82 e3       	ldi	r24, 0x32	; 50
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	22 e3       	ldi	r18, 0x32	; 50
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	20 81       	ld	r18, Z
     d1c:	27 7f       	andi	r18, 0xF7	; 247
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	bf e3       	ldi	r27, 0x3F	; 63
     d2a:	8c 83       	std	Y+4, r24	; 0x04
     d2c:	9d 83       	std	Y+5, r25	; 0x05
     d2e:	ae 83       	std	Y+6, r26	; 0x06
     d30:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     d32:	6c 81       	ldd	r22, Y+4	; 0x04
     d34:	7d 81       	ldd	r23, Y+5	; 0x05
     d36:	8e 81       	ldd	r24, Y+6	; 0x06
     d38:	9f 81       	ldd	r25, Y+7	; 0x07
     d3a:	2b ea       	ldi	r18, 0xAB	; 171
     d3c:	3a ea       	ldi	r19, 0xAA	; 170
     d3e:	4a ea       	ldi	r20, 0xAA	; 170
     d40:	50 e4       	ldi	r21, 0x40	; 64
     d42:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     d46:	dc 01       	movw	r26, r24
     d48:	cb 01       	movw	r24, r22
     d4a:	88 87       	std	Y+8, r24	; 0x08
     d4c:	99 87       	std	Y+9, r25	; 0x09
     d4e:	aa 87       	std	Y+10, r26	; 0x0a
     d50:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     d52:	11 e0       	ldi	r17, 0x01	; 1
     d54:	68 85       	ldd	r22, Y+8	; 0x08
     d56:	79 85       	ldd	r23, Y+9	; 0x09
     d58:	8a 85       	ldd	r24, Y+10	; 0x0a
     d5a:	9b 85       	ldd	r25, Y+11	; 0x0b
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	40 e8       	ldi	r20, 0x80	; 128
     d62:	5f e3       	ldi	r21, 0x3F	; 63
     d64:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     d68:	88 23       	and	r24, r24
     d6a:	0c f0       	brlt	.+2      	; 0xd6e <LCDBusyLoop+0x9e>
     d6c:	10 e0       	ldi	r17, 0x00	; 0
     d6e:	11 23       	and	r17, r17
     d70:	19 f0       	breq	.+6      	; 0xd78 <LCDBusyLoop+0xa8>
		__ticks = 1;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	8c 87       	std	Y+12, r24	; 0x0c
     d76:	a3 c0       	rjmp	.+326    	; 0xebe <LCDBusyLoop+0x1ee>
	else if (__tmp > 255)
     d78:	11 e0       	ldi	r17, 0x01	; 1
     d7a:	68 85       	ldd	r22, Y+8	; 0x08
     d7c:	79 85       	ldd	r23, Y+9	; 0x09
     d7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     d80:	9b 85       	ldd	r25, Y+11	; 0x0b
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	53 e4       	ldi	r21, 0x43	; 67
     d8a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	0c f0       	brlt	.+2      	; 0xd94 <LCDBusyLoop+0xc4>
     d92:	10 e0       	ldi	r17, 0x00	; 0
     d94:	11 23       	and	r17, r17
     d96:	09 f4       	brne	.+2      	; 0xd9a <LCDBusyLoop+0xca>
     d98:	89 c0       	rjmp	.+274    	; 0xeac <LCDBusyLoop+0x1dc>
	{
		_delay_ms(__us / 1000.0);
     d9a:	6c 81       	ldd	r22, Y+4	; 0x04
     d9c:	7d 81       	ldd	r23, Y+5	; 0x05
     d9e:	8e 81       	ldd	r24, Y+6	; 0x06
     da0:	9f 81       	ldd	r25, Y+7	; 0x07
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a e7       	ldi	r20, 0x7A	; 122
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	8d 87       	std	Y+13, r24	; 0x0d
     db4:	9e 87       	std	Y+14, r25	; 0x0e
     db6:	af 87       	std	Y+15, r26	; 0x0f
     db8:	b8 8b       	std	Y+16, r27	; 0x10
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     dba:	6d 85       	ldd	r22, Y+13	; 0x0d
     dbc:	7e 85       	ldd	r23, Y+14	; 0x0e
     dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     dc0:	98 89       	ldd	r25, Y+16	; 0x10
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a e7       	ldi	r20, 0x7A	; 122
     dc8:	55 e4       	ldi	r21, 0x45	; 69
     dca:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	89 8b       	std	Y+17, r24	; 0x11
     dd4:	9a 8b       	std	Y+18, r25	; 0x12
     dd6:	ab 8b       	std	Y+19, r26	; 0x13
     dd8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     dda:	11 e0       	ldi	r17, 0x01	; 1
     ddc:	69 89       	ldd	r22, Y+17	; 0x11
     dde:	7a 89       	ldd	r23, Y+18	; 0x12
     de0:	8b 89       	ldd	r24, Y+19	; 0x13
     de2:	9c 89       	ldd	r25, Y+20	; 0x14
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e8       	ldi	r20, 0x80	; 128
     dea:	5f e3       	ldi	r21, 0x3F	; 63
     dec:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     df0:	88 23       	and	r24, r24
     df2:	0c f0       	brlt	.+2      	; 0xdf6 <LCDBusyLoop+0x126>
     df4:	10 e0       	ldi	r17, 0x00	; 0
     df6:	11 23       	and	r17, r17
     df8:	29 f0       	breq	.+10     	; 0xe04 <LCDBusyLoop+0x134>
		__ticks = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	9e 8b       	std	Y+22, r25	; 0x16
     e00:	8d 8b       	std	Y+21, r24	; 0x15
     e02:	46 c0       	rjmp	.+140    	; 0xe90 <LCDBusyLoop+0x1c0>
	else if (__tmp > 65535)
     e04:	11 e0       	ldi	r17, 0x01	; 1
     e06:	69 89       	ldd	r22, Y+17	; 0x11
     e08:	7a 89       	ldd	r23, Y+18	; 0x12
     e0a:	8b 89       	ldd	r24, Y+19	; 0x13
     e0c:	9c 89       	ldd	r25, Y+20	; 0x14
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	0c f0       	brlt	.+2      	; 0xe20 <LCDBusyLoop+0x150>
     e1e:	10 e0       	ldi	r17, 0x00	; 0
     e20:	11 23       	and	r17, r17
     e22:	61 f1       	breq	.+88     	; 0xe7c <LCDBusyLoop+0x1ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e24:	6d 85       	ldd	r22, Y+13	; 0x0d
     e26:	7e 85       	ldd	r23, Y+14	; 0x0e
     e28:	8f 85       	ldd	r24, Y+15	; 0x0f
     e2a:	98 89       	ldd	r25, Y+16	; 0x10
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	40 e2       	ldi	r20, 0x20	; 32
     e32:	51 e4       	ldi	r21, 0x41	; 65
     e34:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     e38:	dc 01       	movw	r26, r24
     e3a:	cb 01       	movw	r24, r22
     e3c:	bc 01       	movw	r22, r24
     e3e:	cd 01       	movw	r24, r26
     e40:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	9e 8b       	std	Y+22, r25	; 0x16
     e4a:	8d 8b       	std	Y+21, r24	; 0x15
     e4c:	12 c0       	rjmp	.+36     	; 0xe72 <LCDBusyLoop+0x1a2>
     e4e:	80 e9       	ldi	r24, 0x90	; 144
     e50:	91 e0       	ldi	r25, 0x01	; 1
     e52:	98 8f       	std	Y+24, r25	; 0x18
     e54:	8f 8b       	std	Y+23, r24	; 0x17
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e56:	8f 89       	ldd	r24, Y+23	; 0x17
     e58:	98 8d       	ldd	r25, Y+24	; 0x18
     e5a:	8c 01       	movw	r16, r24
     e5c:	c8 01       	movw	r24, r16
     e5e:	01 97       	sbiw	r24, 0x01	; 1
     e60:	f1 f7       	brne	.-4      	; 0xe5e <LCDBusyLoop+0x18e>
     e62:	8c 01       	movw	r16, r24
     e64:	18 8f       	std	Y+24, r17	; 0x18
     e66:	0f 8b       	std	Y+23, r16	; 0x17
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e68:	8d 89       	ldd	r24, Y+21	; 0x15
     e6a:	9e 89       	ldd	r25, Y+22	; 0x16
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	9e 8b       	std	Y+22, r25	; 0x16
     e70:	8d 8b       	std	Y+21, r24	; 0x15
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e72:	8d 89       	ldd	r24, Y+21	; 0x15
     e74:	9e 89       	ldd	r25, Y+22	; 0x16
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	51 f7       	brne	.-44     	; 0xe4e <LCDBusyLoop+0x17e>
     e7a:	28 c0       	rjmp	.+80     	; 0xecc <LCDBusyLoop+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7c:	69 89       	ldd	r22, Y+17	; 0x11
     e7e:	7a 89       	ldd	r23, Y+18	; 0x12
     e80:	8b 89       	ldd	r24, Y+19	; 0x13
     e82:	9c 89       	ldd	r25, Y+20	; 0x14
     e84:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	9e 8b       	std	Y+22, r25	; 0x16
     e8e:	8d 8b       	std	Y+21, r24	; 0x15
     e90:	8d 89       	ldd	r24, Y+21	; 0x15
     e92:	9e 89       	ldd	r25, Y+22	; 0x16
     e94:	9a 8f       	std	Y+26, r25	; 0x1a
     e96:	89 8f       	std	Y+25, r24	; 0x19
     e98:	89 8d       	ldd	r24, Y+25	; 0x19
     e9a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     e9c:	8c 01       	movw	r16, r24
     e9e:	f8 01       	movw	r30, r16
     ea0:	31 97       	sbiw	r30, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <LCDBusyLoop+0x1d0>
     ea4:	8f 01       	movw	r16, r30
     ea6:	1a 8f       	std	Y+26, r17	; 0x1a
     ea8:	09 8f       	std	Y+25, r16	; 0x19
     eaa:	10 c0       	rjmp	.+32     	; 0xecc <LCDBusyLoop+0x1fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     eac:	68 85       	ldd	r22, Y+8	; 0x08
     eae:	79 85       	ldd	r23, Y+9	; 0x09
     eb0:	8a 85       	ldd	r24, Y+10	; 0x0a
     eb2:	9b 85       	ldd	r25, Y+11	; 0x0b
     eb4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	8c 87       	std	Y+12, r24	; 0x0c
     ebe:	8c 85       	ldd	r24, Y+12	; 0x0c
     ec0:	8b 8f       	std	Y+27, r24	; 0x1b
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     ec2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ec4:	18 2f       	mov	r17, r24
     ec6:	1a 95       	dec	r17
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <LCDBusyLoop+0x1f6>
     eca:	1b 8f       	std	Y+27, r17	; 0x1b

	
	do
	{

		SET_E();
     ecc:	88 e3       	ldi	r24, 0x38	; 56
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	28 e3       	ldi	r18, 0x38	; 56
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	f9 01       	movw	r30, r18
     ed6:	20 81       	ld	r18, Z
     ed8:	20 61       	ori	r18, 0x10	; 16
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	a0 e0       	ldi	r26, 0x00	; 0
     ee4:	bf e3       	ldi	r27, 0x3F	; 63
     ee6:	8c 8f       	std	Y+28, r24	; 0x1c
     ee8:	9d 8f       	std	Y+29, r25	; 0x1d
     eea:	ae 8f       	std	Y+30, r26	; 0x1e
     eec:	bf 8f       	std	Y+31, r27	; 0x1f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
     eee:	6c 8d       	ldd	r22, Y+28	; 0x1c
     ef0:	7d 8d       	ldd	r23, Y+29	; 0x1d
     ef2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ef4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     ef6:	2b ea       	ldi	r18, 0xAB	; 171
     ef8:	3a ea       	ldi	r19, 0xAA	; 170
     efa:	4a ea       	ldi	r20, 0xAA	; 170
     efc:	50 e4       	ldi	r21, 0x40	; 64
     efe:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     f02:	dc 01       	movw	r26, r24
     f04:	cb 01       	movw	r24, r22
     f06:	88 a3       	std	Y+32, r24	; 0x20
     f08:	99 a3       	std	Y+33, r25	; 0x21
     f0a:	aa a3       	std	Y+34, r26	; 0x22
     f0c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     f0e:	11 e0       	ldi	r17, 0x01	; 1
     f10:	68 a1       	ldd	r22, Y+32	; 0x20
     f12:	79 a1       	ldd	r23, Y+33	; 0x21
     f14:	8a a1       	ldd	r24, Y+34	; 0x22
     f16:	9b a1       	ldd	r25, Y+35	; 0x23
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	40 e8       	ldi	r20, 0x80	; 128
     f1e:	5f e3       	ldi	r21, 0x3F	; 63
     f20:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     f24:	88 23       	and	r24, r24
     f26:	0c f0       	brlt	.+2      	; 0xf2a <LCDBusyLoop+0x25a>
     f28:	10 e0       	ldi	r17, 0x00	; 0
     f2a:	11 23       	and	r17, r17
     f2c:	19 f0       	breq	.+6      	; 0xf34 <LCDBusyLoop+0x264>
		__ticks = 1;
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	8c a3       	std	Y+36, r24	; 0x24
     f32:	a3 c0       	rjmp	.+326    	; 0x107a <LCDBusyLoop+0x3aa>
	else if (__tmp > 255)
     f34:	11 e0       	ldi	r17, 0x01	; 1
     f36:	68 a1       	ldd	r22, Y+32	; 0x20
     f38:	79 a1       	ldd	r23, Y+33	; 0x21
     f3a:	8a a1       	ldd	r24, Y+34	; 0x22
     f3c:	9b a1       	ldd	r25, Y+35	; 0x23
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	4f e7       	ldi	r20, 0x7F	; 127
     f44:	53 e4       	ldi	r21, 0x43	; 67
     f46:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     f4a:	18 16       	cp	r1, r24
     f4c:	0c f0       	brlt	.+2      	; 0xf50 <LCDBusyLoop+0x280>
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	11 23       	and	r17, r17
     f52:	09 f4       	brne	.+2      	; 0xf56 <LCDBusyLoop+0x286>
     f54:	89 c0       	rjmp	.+274    	; 0x1068 <LCDBusyLoop+0x398>
	{
		_delay_ms(__us / 1000.0);
     f56:	6c 8d       	ldd	r22, Y+28	; 0x1c
     f58:	7d 8d       	ldd	r23, Y+29	; 0x1d
     f5a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     f5c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	4a e7       	ldi	r20, 0x7A	; 122
     f64:	54 e4       	ldi	r21, 0x44	; 68
     f66:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	8d a3       	std	Y+37, r24	; 0x25
     f70:	9e a3       	std	Y+38, r25	; 0x26
     f72:	af a3       	std	Y+39, r26	; 0x27
     f74:	b8 a7       	std	Y+40, r27	; 0x28
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     f76:	6d a1       	ldd	r22, Y+37	; 0x25
     f78:	7e a1       	ldd	r23, Y+38	; 0x26
     f7a:	8f a1       	ldd	r24, Y+39	; 0x27
     f7c:	98 a5       	ldd	r25, Y+40	; 0x28
     f7e:	20 e0       	ldi	r18, 0x00	; 0
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	4a e7       	ldi	r20, 0x7A	; 122
     f84:	55 e4       	ldi	r21, 0x45	; 69
     f86:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     f8a:	dc 01       	movw	r26, r24
     f8c:	cb 01       	movw	r24, r22
     f8e:	89 a7       	std	Y+41, r24	; 0x29
     f90:	9a a7       	std	Y+42, r25	; 0x2a
     f92:	ab a7       	std	Y+43, r26	; 0x2b
     f94:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     f96:	11 e0       	ldi	r17, 0x01	; 1
     f98:	69 a5       	ldd	r22, Y+41	; 0x29
     f9a:	7a a5       	ldd	r23, Y+42	; 0x2a
     f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e8       	ldi	r20, 0x80	; 128
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
     fac:	88 23       	and	r24, r24
     fae:	0c f0       	brlt	.+2      	; 0xfb2 <LCDBusyLoop+0x2e2>
     fb0:	10 e0       	ldi	r17, 0x00	; 0
     fb2:	11 23       	and	r17, r17
     fb4:	29 f0       	breq	.+10     	; 0xfc0 <LCDBusyLoop+0x2f0>
		__ticks = 1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9e a7       	std	Y+46, r25	; 0x2e
     fbc:	8d a7       	std	Y+45, r24	; 0x2d
     fbe:	46 c0       	rjmp	.+140    	; 0x104c <LCDBusyLoop+0x37c>
	else if (__tmp > 65535)
     fc0:	11 e0       	ldi	r17, 0x01	; 1
     fc2:	69 a5       	ldd	r22, Y+41	; 0x29
     fc4:	7a a5       	ldd	r23, Y+42	; 0x2a
     fc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	4f e7       	ldi	r20, 0x7F	; 127
     fd0:	57 e4       	ldi	r21, 0x47	; 71
     fd2:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
     fd6:	18 16       	cp	r1, r24
     fd8:	0c f0       	brlt	.+2      	; 0xfdc <LCDBusyLoop+0x30c>
     fda:	10 e0       	ldi	r17, 0x00	; 0
     fdc:	11 23       	and	r17, r17
     fde:	61 f1       	breq	.+88     	; 0x1038 <LCDBusyLoop+0x368>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe0:	6d a1       	ldd	r22, Y+37	; 0x25
     fe2:	7e a1       	ldd	r23, Y+38	; 0x26
     fe4:	8f a1       	ldd	r24, Y+39	; 0x27
     fe6:	98 a5       	ldd	r25, Y+40	; 0x28
     fe8:	20 e0       	ldi	r18, 0x00	; 0
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	40 e2       	ldi	r20, 0x20	; 32
     fee:	51 e4       	ldi	r21, 0x41	; 65
     ff0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
     ff4:	dc 01       	movw	r26, r24
     ff6:	cb 01       	movw	r24, r22
     ff8:	bc 01       	movw	r22, r24
     ffa:	cd 01       	movw	r24, r26
     ffc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1000:	dc 01       	movw	r26, r24
    1002:	cb 01       	movw	r24, r22
    1004:	9e a7       	std	Y+46, r25	; 0x2e
    1006:	8d a7       	std	Y+45, r24	; 0x2d
    1008:	12 c0       	rjmp	.+36     	; 0x102e <LCDBusyLoop+0x35e>
    100a:	80 e9       	ldi	r24, 0x90	; 144
    100c:	91 e0       	ldi	r25, 0x01	; 1
    100e:	98 ab       	std	Y+48, r25	; 0x30
    1010:	8f a7       	std	Y+47, r24	; 0x2f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1012:	8f a5       	ldd	r24, Y+47	; 0x2f
    1014:	98 a9       	ldd	r25, Y+48	; 0x30
    1016:	8c 01       	movw	r16, r24
    1018:	c8 01       	movw	r24, r16
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <LCDBusyLoop+0x34a>
    101e:	8c 01       	movw	r16, r24
    1020:	18 ab       	std	Y+48, r17	; 0x30
    1022:	0f a7       	std	Y+47, r16	; 0x2f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1024:	8d a5       	ldd	r24, Y+45	; 0x2d
    1026:	9e a5       	ldd	r25, Y+46	; 0x2e
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9e a7       	std	Y+46, r25	; 0x2e
    102c:	8d a7       	std	Y+45, r24	; 0x2d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1030:	9e a5       	ldd	r25, Y+46	; 0x2e
    1032:	00 97       	sbiw	r24, 0x00	; 0
    1034:	51 f7       	brne	.-44     	; 0x100a <LCDBusyLoop+0x33a>
    1036:	28 c0       	rjmp	.+80     	; 0x1088 <LCDBusyLoop+0x3b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1038:	69 a5       	ldd	r22, Y+41	; 0x29
    103a:	7a a5       	ldd	r23, Y+42	; 0x2a
    103c:	8b a5       	ldd	r24, Y+43	; 0x2b
    103e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1040:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9e a7       	std	Y+46, r25	; 0x2e
    104a:	8d a7       	std	Y+45, r24	; 0x2d
    104c:	8d a5       	ldd	r24, Y+45	; 0x2d
    104e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1050:	9a ab       	std	Y+50, r25	; 0x32
    1052:	89 ab       	std	Y+49, r24	; 0x31
    1054:	89 a9       	ldd	r24, Y+49	; 0x31
    1056:	9a a9       	ldd	r25, Y+50	; 0x32
    1058:	8c 01       	movw	r16, r24
    105a:	f8 01       	movw	r30, r16
    105c:	31 97       	sbiw	r30, 0x01	; 1
    105e:	f1 f7       	brne	.-4      	; 0x105c <LCDBusyLoop+0x38c>
    1060:	8f 01       	movw	r16, r30
    1062:	1a ab       	std	Y+50, r17	; 0x32
    1064:	09 ab       	std	Y+49, r16	; 0x31
    1066:	10 c0       	rjmp	.+32     	; 0x1088 <LCDBusyLoop+0x3b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1068:	68 a1       	ldd	r22, Y+32	; 0x20
    106a:	79 a1       	ldd	r23, Y+33	; 0x21
    106c:	8a a1       	ldd	r24, Y+34	; 0x22
    106e:	9b a1       	ldd	r25, Y+35	; 0x23
    1070:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8c a3       	std	Y+36, r24	; 0x24
    107a:	8c a1       	ldd	r24, Y+36	; 0x24
    107c:	8b ab       	std	Y+51, r24	; 0x33
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    107e:	8b a9       	ldd	r24, Y+51	; 0x33
    1080:	18 2f       	mov	r17, r24
    1082:	1a 95       	dec	r17
    1084:	f1 f7       	brne	.-4      	; 0x1082 <LCDBusyLoop+0x3b2>
    1086:	1b ab       	std	Y+51, r17	; 0x33

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
    1088:	86 e3       	ldi	r24, 0x36	; 54
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	fc 01       	movw	r30, r24
    108e:	80 81       	ld	r24, Z
    1090:	89 83       	std	Y+1, r24	; 0x01
		status=status<<4;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	82 95       	swap	r24
    1096:	80 7f       	andi	r24, 0xF0	; 240
    1098:	89 83       	std	Y+1, r24	; 0x01
    109a:	80 e0       	ldi	r24, 0x00	; 0
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	a0 e0       	ldi	r26, 0x00	; 0
    10a0:	bf e3       	ldi	r27, 0x3F	; 63
    10a2:	8c ab       	std	Y+52, r24	; 0x34
    10a4:	9d ab       	std	Y+53, r25	; 0x35
    10a6:	ae ab       	std	Y+54, r26	; 0x36
    10a8:	bf ab       	std	Y+55, r27	; 0x37
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    10aa:	6c a9       	ldd	r22, Y+52	; 0x34
    10ac:	7d a9       	ldd	r23, Y+53	; 0x35
    10ae:	8e a9       	ldd	r24, Y+54	; 0x36
    10b0:	9f a9       	ldd	r25, Y+55	; 0x37
    10b2:	2b ea       	ldi	r18, 0xAB	; 171
    10b4:	3a ea       	ldi	r19, 0xAA	; 170
    10b6:	4a ea       	ldi	r20, 0xAA	; 170
    10b8:	50 e4       	ldi	r21, 0x40	; 64
    10ba:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    10be:	dc 01       	movw	r26, r24
    10c0:	cb 01       	movw	r24, r22
    10c2:	88 af       	std	Y+56, r24	; 0x38
    10c4:	99 af       	std	Y+57, r25	; 0x39
    10c6:	aa af       	std	Y+58, r26	; 0x3a
    10c8:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    10ca:	11 e0       	ldi	r17, 0x01	; 1
    10cc:	68 ad       	ldd	r22, Y+56	; 0x38
    10ce:	79 ad       	ldd	r23, Y+57	; 0x39
    10d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    10d2:	9b ad       	ldd	r25, Y+59	; 0x3b
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e8       	ldi	r20, 0x80	; 128
    10da:	5f e3       	ldi	r21, 0x3F	; 63
    10dc:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    10e0:	88 23       	and	r24, r24
    10e2:	0c f0       	brlt	.+2      	; 0x10e6 <LCDBusyLoop+0x416>
    10e4:	10 e0       	ldi	r17, 0x00	; 0
    10e6:	11 23       	and	r17, r17
    10e8:	19 f0       	breq	.+6      	; 0x10f0 <LCDBusyLoop+0x420>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	8c af       	std	Y+60, r24	; 0x3c
    10ee:	f3 c0       	rjmp	.+486    	; 0x12d6 <LCDBusyLoop+0x606>
	else if (__tmp > 255)
    10f0:	11 e0       	ldi	r17, 0x01	; 1
    10f2:	68 ad       	ldd	r22, Y+56	; 0x38
    10f4:	79 ad       	ldd	r23, Y+57	; 0x39
    10f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    10f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    10fa:	20 e0       	ldi	r18, 0x00	; 0
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	4f e7       	ldi	r20, 0x7F	; 127
    1100:	53 e4       	ldi	r21, 0x43	; 67
    1102:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1106:	18 16       	cp	r1, r24
    1108:	0c f0       	brlt	.+2      	; 0x110c <LCDBusyLoop+0x43c>
    110a:	10 e0       	ldi	r17, 0x00	; 0
    110c:	11 23       	and	r17, r17
    110e:	09 f4       	brne	.+2      	; 0x1112 <LCDBusyLoop+0x442>
    1110:	d9 c0       	rjmp	.+434    	; 0x12c4 <LCDBusyLoop+0x5f4>
	{
		_delay_ms(__us / 1000.0);
    1112:	6c a9       	ldd	r22, Y+52	; 0x34
    1114:	7d a9       	ldd	r23, Y+53	; 0x35
    1116:	8e a9       	ldd	r24, Y+54	; 0x36
    1118:	9f a9       	ldd	r25, Y+55	; 0x37
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	4a e7       	ldi	r20, 0x7A	; 122
    1120:	54 e4       	ldi	r21, 0x44	; 68
    1122:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    1126:	dc 01       	movw	r26, r24
    1128:	cb 01       	movw	r24, r22
    112a:	9e 01       	movw	r18, r28
    112c:	23 5c       	subi	r18, 0xC3	; 195
    112e:	3f 4f       	sbci	r19, 0xFF	; 255
    1130:	f9 01       	movw	r30, r18
    1132:	80 83       	st	Z, r24
    1134:	91 83       	std	Z+1, r25	; 0x01
    1136:	a2 83       	std	Z+2, r26	; 0x02
    1138:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    113a:	8e 01       	movw	r16, r28
    113c:	0f 5b       	subi	r16, 0xBF	; 191
    113e:	1f 4f       	sbci	r17, 0xFF	; 255
    1140:	ce 01       	movw	r24, r28
    1142:	cd 96       	adiw	r24, 0x3d	; 61
    1144:	fc 01       	movw	r30, r24
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	30 e0       	ldi	r19, 0x00	; 0
    1152:	4a e7       	ldi	r20, 0x7A	; 122
    1154:	55 e4       	ldi	r21, 0x45	; 69
    1156:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    115a:	dc 01       	movw	r26, r24
    115c:	cb 01       	movw	r24, r22
    115e:	f8 01       	movw	r30, r16
    1160:	80 83       	st	Z, r24
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	a2 83       	std	Z+2, r26	; 0x02
    1166:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1168:	ce 01       	movw	r24, r28
    116a:	8f 5b       	subi	r24, 0xBF	; 191
    116c:	9f 4f       	sbci	r25, 0xFF	; 255
    116e:	11 e0       	ldi	r17, 0x01	; 1
    1170:	fc 01       	movw	r30, r24
    1172:	60 81       	ld	r22, Z
    1174:	71 81       	ldd	r23, Z+1	; 0x01
    1176:	82 81       	ldd	r24, Z+2	; 0x02
    1178:	93 81       	ldd	r25, Z+3	; 0x03
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e8       	ldi	r20, 0x80	; 128
    1180:	5f e3       	ldi	r21, 0x3F	; 63
    1182:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1186:	88 23       	and	r24, r24
    1188:	0c f0       	brlt	.+2      	; 0x118c <LCDBusyLoop+0x4bc>
    118a:	10 e0       	ldi	r17, 0x00	; 0
    118c:	11 23       	and	r17, r17
    118e:	49 f0       	breq	.+18     	; 0x11a2 <LCDBusyLoop+0x4d2>
		__ticks = 1;
    1190:	ce 01       	movw	r24, r28
    1192:	8b 5b       	subi	r24, 0xBB	; 187
    1194:	9f 4f       	sbci	r25, 0xFF	; 255
    1196:	21 e0       	ldi	r18, 0x01	; 1
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	fc 01       	movw	r30, r24
    119c:	31 83       	std	Z+1, r19	; 0x01
    119e:	20 83       	st	Z, r18
    11a0:	73 c0       	rjmp	.+230    	; 0x1288 <LCDBusyLoop+0x5b8>
	else if (__tmp > 65535)
    11a2:	ce 01       	movw	r24, r28
    11a4:	8f 5b       	subi	r24, 0xBF	; 191
    11a6:	9f 4f       	sbci	r25, 0xFF	; 255
    11a8:	11 e0       	ldi	r17, 0x01	; 1
    11aa:	fc 01       	movw	r30, r24
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	3f ef       	ldi	r19, 0xFF	; 255
    11b8:	4f e7       	ldi	r20, 0x7F	; 127
    11ba:	57 e4       	ldi	r21, 0x47	; 71
    11bc:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	0c f0       	brlt	.+2      	; 0x11c6 <LCDBusyLoop+0x4f6>
    11c4:	10 e0       	ldi	r17, 0x00	; 0
    11c6:	11 23       	and	r17, r17
    11c8:	09 f4       	brne	.+2      	; 0x11cc <LCDBusyLoop+0x4fc>
    11ca:	4c c0       	rjmp	.+152    	; 0x1264 <LCDBusyLoop+0x594>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11cc:	ce 01       	movw	r24, r28
    11ce:	cd 96       	adiw	r24, 0x3d	; 61
    11d0:	fc 01       	movw	r30, r24
    11d2:	60 81       	ld	r22, Z
    11d4:	71 81       	ldd	r23, Z+1	; 0x01
    11d6:	82 81       	ldd	r24, Z+2	; 0x02
    11d8:	93 81       	ldd	r25, Z+3	; 0x03
    11da:	20 e0       	ldi	r18, 0x00	; 0
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	40 e2       	ldi	r20, 0x20	; 32
    11e0:	51 e4       	ldi	r21, 0x41	; 65
    11e2:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	8e 01       	movw	r16, r28
    11ec:	0b 5b       	subi	r16, 0xBB	; 187
    11ee:	1f 4f       	sbci	r17, 0xFF	; 255
    11f0:	bc 01       	movw	r22, r24
    11f2:	cd 01       	movw	r24, r26
    11f4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    11f8:	dc 01       	movw	r26, r24
    11fa:	cb 01       	movw	r24, r22
    11fc:	f8 01       	movw	r30, r16
    11fe:	91 83       	std	Z+1, r25	; 0x01
    1200:	80 83       	st	Z, r24
    1202:	27 c0       	rjmp	.+78     	; 0x1252 <LCDBusyLoop+0x582>
    1204:	ce 01       	movw	r24, r28
    1206:	89 5b       	subi	r24, 0xB9	; 185
    1208:	9f 4f       	sbci	r25, 0xFF	; 255
    120a:	20 e9       	ldi	r18, 0x90	; 144
    120c:	31 e0       	ldi	r19, 0x01	; 1
    120e:	fc 01       	movw	r30, r24
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1214:	ce 01       	movw	r24, r28
    1216:	89 5b       	subi	r24, 0xB9	; 185
    1218:	9f 4f       	sbci	r25, 0xFF	; 255
    121a:	fc 01       	movw	r30, r24
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	8c 01       	movw	r16, r24
    1222:	c8 01       	movw	r24, r16
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <LCDBusyLoop+0x554>
    1228:	8c 01       	movw	r16, r24
    122a:	ce 01       	movw	r24, r28
    122c:	89 5b       	subi	r24, 0xB9	; 185
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	fc 01       	movw	r30, r24
    1232:	11 83       	std	Z+1, r17	; 0x01
    1234:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1236:	ce 01       	movw	r24, r28
    1238:	8b 5b       	subi	r24, 0xBB	; 187
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	9e 01       	movw	r18, r28
    123e:	2b 5b       	subi	r18, 0xBB	; 187
    1240:	3f 4f       	sbci	r19, 0xFF	; 255
    1242:	f9 01       	movw	r30, r18
    1244:	20 81       	ld	r18, Z
    1246:	31 81       	ldd	r19, Z+1	; 0x01
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	30 40       	sbci	r19, 0x00	; 0
    124c:	fc 01       	movw	r30, r24
    124e:	31 83       	std	Z+1, r19	; 0x01
    1250:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1252:	ce 01       	movw	r24, r28
    1254:	8b 5b       	subi	r24, 0xBB	; 187
    1256:	9f 4f       	sbci	r25, 0xFF	; 255
    1258:	fc 01       	movw	r30, r24
    125a:	80 81       	ld	r24, Z
    125c:	91 81       	ldd	r25, Z+1	; 0x01
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	89 f6       	brne	.-94     	; 0x1204 <LCDBusyLoop+0x534>
    1262:	4c c0       	rjmp	.+152    	; 0x12fc <LCDBusyLoop+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1264:	8e 01       	movw	r16, r28
    1266:	0b 5b       	subi	r16, 0xBB	; 187
    1268:	1f 4f       	sbci	r17, 0xFF	; 255
    126a:	ce 01       	movw	r24, r28
    126c:	8f 5b       	subi	r24, 0xBF	; 191
    126e:	9f 4f       	sbci	r25, 0xFF	; 255
    1270:	fc 01       	movw	r30, r24
    1272:	60 81       	ld	r22, Z
    1274:	71 81       	ldd	r23, Z+1	; 0x01
    1276:	82 81       	ldd	r24, Z+2	; 0x02
    1278:	93 81       	ldd	r25, Z+3	; 0x03
    127a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    127e:	dc 01       	movw	r26, r24
    1280:	cb 01       	movw	r24, r22
    1282:	f8 01       	movw	r30, r16
    1284:	91 83       	std	Z+1, r25	; 0x01
    1286:	80 83       	st	Z, r24
    1288:	ce 01       	movw	r24, r28
    128a:	87 5b       	subi	r24, 0xB7	; 183
    128c:	9f 4f       	sbci	r25, 0xFF	; 255
    128e:	9e 01       	movw	r18, r28
    1290:	2b 5b       	subi	r18, 0xBB	; 187
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	f9 01       	movw	r30, r18
    1296:	20 81       	ld	r18, Z
    1298:	31 81       	ldd	r19, Z+1	; 0x01
    129a:	fc 01       	movw	r30, r24
    129c:	31 83       	std	Z+1, r19	; 0x01
    129e:	20 83       	st	Z, r18
    12a0:	ce 01       	movw	r24, r28
    12a2:	87 5b       	subi	r24, 0xB7	; 183
    12a4:	9f 4f       	sbci	r25, 0xFF	; 255
    12a6:	fc 01       	movw	r30, r24
    12a8:	80 81       	ld	r24, Z
    12aa:	91 81       	ldd	r25, Z+1	; 0x01
    12ac:	8c 01       	movw	r16, r24
    12ae:	c8 01       	movw	r24, r16
    12b0:	01 97       	sbiw	r24, 0x01	; 1
    12b2:	f1 f7       	brne	.-4      	; 0x12b0 <LCDBusyLoop+0x5e0>
    12b4:	8c 01       	movw	r16, r24
    12b6:	ce 01       	movw	r24, r28
    12b8:	87 5b       	subi	r24, 0xB7	; 183
    12ba:	9f 4f       	sbci	r25, 0xFF	; 255
    12bc:	fc 01       	movw	r30, r24
    12be:	11 83       	std	Z+1, r17	; 0x01
    12c0:	00 83       	st	Z, r16
    12c2:	1c c0       	rjmp	.+56     	; 0x12fc <LCDBusyLoop+0x62c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    12c4:	68 ad       	ldd	r22, Y+56	; 0x38
    12c6:	79 ad       	ldd	r23, Y+57	; 0x39
    12c8:	8a ad       	ldd	r24, Y+58	; 0x3a
    12ca:	9b ad       	ldd	r25, Y+59	; 0x3b
    12cc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	8c af       	std	Y+60, r24	; 0x3c
    12d6:	ce 01       	movw	r24, r28
    12d8:	85 5b       	subi	r24, 0xB5	; 181
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	2c ad       	ldd	r18, Y+60	; 0x3c
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12e2:	ce 01       	movw	r24, r28
    12e4:	85 5b       	subi	r24, 0xB5	; 181
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	fc 01       	movw	r30, r24
    12ea:	80 81       	ld	r24, Z
    12ec:	18 2f       	mov	r17, r24
    12ee:	1a 95       	dec	r17
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <LCDBusyLoop+0x61e>
    12f2:	ce 01       	movw	r24, r28
    12f4:	85 5b       	subi	r24, 0xB5	; 181
    12f6:	9f 4f       	sbci	r25, 0xFF	; 255
    12f8:	fc 01       	movw	r30, r24
    12fa:	10 83       	st	Z, r17

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
    12fc:	88 e3       	ldi	r24, 0x38	; 56
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	28 e3       	ldi	r18, 0x38	; 56
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	f9 01       	movw	r30, r18
    1306:	20 81       	ld	r18, Z
    1308:	2f 7e       	andi	r18, 0xEF	; 239
    130a:	fc 01       	movw	r30, r24
    130c:	20 83       	st	Z, r18
    130e:	9e 01       	movw	r18, r28
    1310:	24 5b       	subi	r18, 0xB4	; 180
    1312:	3f 4f       	sbci	r19, 0xFF	; 255
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	a0 e8       	ldi	r26, 0x80	; 128
    131a:	bf e3       	ldi	r27, 0x3F	; 63
    131c:	f9 01       	movw	r30, r18
    131e:	80 83       	st	Z, r24
    1320:	91 83       	std	Z+1, r25	; 0x01
    1322:	a2 83       	std	Z+2, r26	; 0x02
    1324:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1326:	8e 01       	movw	r16, r28
    1328:	00 5b       	subi	r16, 0xB0	; 176
    132a:	1f 4f       	sbci	r17, 0xFF	; 255
    132c:	ce 01       	movw	r24, r28
    132e:	84 5b       	subi	r24, 0xB4	; 180
    1330:	9f 4f       	sbci	r25, 0xFF	; 255
    1332:	fc 01       	movw	r30, r24
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	2b ea       	ldi	r18, 0xAB	; 171
    133e:	3a ea       	ldi	r19, 0xAA	; 170
    1340:	4a ea       	ldi	r20, 0xAA	; 170
    1342:	50 e4       	ldi	r21, 0x40	; 64
    1344:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	f8 01       	movw	r30, r16
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1356:	ce 01       	movw	r24, r28
    1358:	80 5b       	subi	r24, 0xB0	; 176
    135a:	9f 4f       	sbci	r25, 0xFF	; 255
    135c:	11 e0       	ldi	r17, 0x01	; 1
    135e:	fc 01       	movw	r30, r24
    1360:	60 81       	ld	r22, Z
    1362:	71 81       	ldd	r23, Z+1	; 0x01
    1364:	82 81       	ldd	r24, Z+2	; 0x02
    1366:	93 81       	ldd	r25, Z+3	; 0x03
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e8       	ldi	r20, 0x80	; 128
    136e:	5f e3       	ldi	r21, 0x3F	; 63
    1370:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1374:	88 23       	and	r24, r24
    1376:	0c f0       	brlt	.+2      	; 0x137a <LCDBusyLoop+0x6aa>
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	11 23       	and	r17, r17
    137c:	39 f0       	breq	.+14     	; 0x138c <LCDBusyLoop+0x6bc>
		__ticks = 1;
    137e:	ce 01       	movw	r24, r28
    1380:	8c 5a       	subi	r24, 0xAC	; 172
    1382:	9f 4f       	sbci	r25, 0xFF	; 255
    1384:	21 e0       	ldi	r18, 0x01	; 1
    1386:	fc 01       	movw	r30, r24
    1388:	20 83       	st	Z, r18
    138a:	05 c1       	rjmp	.+522    	; 0x1596 <LCDBusyLoop+0x8c6>
	else if (__tmp > 255)
    138c:	ce 01       	movw	r24, r28
    138e:	80 5b       	subi	r24, 0xB0	; 176
    1390:	9f 4f       	sbci	r25, 0xFF	; 255
    1392:	11 e0       	ldi	r17, 0x01	; 1
    1394:	fc 01       	movw	r30, r24
    1396:	60 81       	ld	r22, Z
    1398:	71 81       	ldd	r23, Z+1	; 0x01
    139a:	82 81       	ldd	r24, Z+2	; 0x02
    139c:	93 81       	ldd	r25, Z+3	; 0x03
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4f e7       	ldi	r20, 0x7F	; 127
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    13aa:	18 16       	cp	r1, r24
    13ac:	0c f0       	brlt	.+2      	; 0x13b0 <LCDBusyLoop+0x6e0>
    13ae:	10 e0       	ldi	r17, 0x00	; 0
    13b0:	11 23       	and	r17, r17
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <LCDBusyLoop+0x6e6>
    13b4:	df c0       	rjmp	.+446    	; 0x1574 <LCDBusyLoop+0x8a4>
	{
		_delay_ms(__us / 1000.0);
    13b6:	ce 01       	movw	r24, r28
    13b8:	84 5b       	subi	r24, 0xB4	; 180
    13ba:	9f 4f       	sbci	r25, 0xFF	; 255
    13bc:	fc 01       	movw	r30, r24
    13be:	60 81       	ld	r22, Z
    13c0:	71 81       	ldd	r23, Z+1	; 0x01
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	93 81       	ldd	r25, Z+3	; 0x03
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	4a e7       	ldi	r20, 0x7A	; 122
    13cc:	54 e4       	ldi	r21, 0x44	; 68
    13ce:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    13d2:	dc 01       	movw	r26, r24
    13d4:	cb 01       	movw	r24, r22
    13d6:	9e 01       	movw	r18, r28
    13d8:	2b 5a       	subi	r18, 0xAB	; 171
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	f9 01       	movw	r30, r18
    13de:	80 83       	st	Z, r24
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	a2 83       	std	Z+2, r26	; 0x02
    13e4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    13e6:	8e 01       	movw	r16, r28
    13e8:	07 5a       	subi	r16, 0xA7	; 167
    13ea:	1f 4f       	sbci	r17, 0xFF	; 255
    13ec:	ce 01       	movw	r24, r28
    13ee:	8b 5a       	subi	r24, 0xAB	; 171
    13f0:	9f 4f       	sbci	r25, 0xFF	; 255
    13f2:	fc 01       	movw	r30, r24
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	82 81       	ldd	r24, Z+2	; 0x02
    13fa:	93 81       	ldd	r25, Z+3	; 0x03
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a e7       	ldi	r20, 0x7A	; 122
    1402:	55 e4       	ldi	r21, 0x45	; 69
    1404:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	f8 01       	movw	r30, r16
    140e:	80 83       	st	Z, r24
    1410:	91 83       	std	Z+1, r25	; 0x01
    1412:	a2 83       	std	Z+2, r26	; 0x02
    1414:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1416:	ce 01       	movw	r24, r28
    1418:	87 5a       	subi	r24, 0xA7	; 167
    141a:	9f 4f       	sbci	r25, 0xFF	; 255
    141c:	11 e0       	ldi	r17, 0x01	; 1
    141e:	fc 01       	movw	r30, r24
    1420:	60 81       	ld	r22, Z
    1422:	71 81       	ldd	r23, Z+1	; 0x01
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	93 81       	ldd	r25, Z+3	; 0x03
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	0c f0       	brlt	.+2      	; 0x143a <LCDBusyLoop+0x76a>
    1438:	10 e0       	ldi	r17, 0x00	; 0
    143a:	11 23       	and	r17, r17
    143c:	49 f0       	breq	.+18     	; 0x1450 <LCDBusyLoop+0x780>
		__ticks = 1;
    143e:	ce 01       	movw	r24, r28
    1440:	83 5a       	subi	r24, 0xA3	; 163
    1442:	9f 4f       	sbci	r25, 0xFF	; 255
    1444:	21 e0       	ldi	r18, 0x01	; 1
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	fc 01       	movw	r30, r24
    144a:	31 83       	std	Z+1, r19	; 0x01
    144c:	20 83       	st	Z, r18
    144e:	74 c0       	rjmp	.+232    	; 0x1538 <LCDBusyLoop+0x868>
	else if (__tmp > 65535)
    1450:	ce 01       	movw	r24, r28
    1452:	87 5a       	subi	r24, 0xA7	; 167
    1454:	9f 4f       	sbci	r25, 0xFF	; 255
    1456:	11 e0       	ldi	r17, 0x01	; 1
    1458:	fc 01       	movw	r30, r24
    145a:	60 81       	ld	r22, Z
    145c:	71 81       	ldd	r23, Z+1	; 0x01
    145e:	82 81       	ldd	r24, Z+2	; 0x02
    1460:	93 81       	ldd	r25, Z+3	; 0x03
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	3f ef       	ldi	r19, 0xFF	; 255
    1466:	4f e7       	ldi	r20, 0x7F	; 127
    1468:	57 e4       	ldi	r21, 0x47	; 71
    146a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    146e:	18 16       	cp	r1, r24
    1470:	0c f0       	brlt	.+2      	; 0x1474 <LCDBusyLoop+0x7a4>
    1472:	10 e0       	ldi	r17, 0x00	; 0
    1474:	11 23       	and	r17, r17
    1476:	09 f4       	brne	.+2      	; 0x147a <LCDBusyLoop+0x7aa>
    1478:	4d c0       	rjmp	.+154    	; 0x1514 <LCDBusyLoop+0x844>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    147a:	ce 01       	movw	r24, r28
    147c:	8b 5a       	subi	r24, 0xAB	; 171
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	fc 01       	movw	r30, r24
    1482:	60 81       	ld	r22, Z
    1484:	71 81       	ldd	r23, Z+1	; 0x01
    1486:	82 81       	ldd	r24, Z+2	; 0x02
    1488:	93 81       	ldd	r25, Z+3	; 0x03
    148a:	20 e0       	ldi	r18, 0x00	; 0
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e2       	ldi	r20, 0x20	; 32
    1490:	51 e4       	ldi	r21, 0x41	; 65
    1492:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	8e 01       	movw	r16, r28
    149c:	03 5a       	subi	r16, 0xA3	; 163
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    14a8:	dc 01       	movw	r26, r24
    14aa:	cb 01       	movw	r24, r22
    14ac:	f8 01       	movw	r30, r16
    14ae:	91 83       	std	Z+1, r25	; 0x01
    14b0:	80 83       	st	Z, r24
    14b2:	27 c0       	rjmp	.+78     	; 0x1502 <LCDBusyLoop+0x832>
    14b4:	ce 01       	movw	r24, r28
    14b6:	81 5a       	subi	r24, 0xA1	; 161
    14b8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ba:	20 e9       	ldi	r18, 0x90	; 144
    14bc:	31 e0       	ldi	r19, 0x01	; 1
    14be:	fc 01       	movw	r30, r24
    14c0:	31 83       	std	Z+1, r19	; 0x01
    14c2:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14c4:	ce 01       	movw	r24, r28
    14c6:	81 5a       	subi	r24, 0xA1	; 161
    14c8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ca:	fc 01       	movw	r30, r24
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	8c 01       	movw	r16, r24
    14d2:	c8 01       	movw	r24, r16
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <LCDBusyLoop+0x804>
    14d8:	8c 01       	movw	r16, r24
    14da:	ce 01       	movw	r24, r28
    14dc:	81 5a       	subi	r24, 0xA1	; 161
    14de:	9f 4f       	sbci	r25, 0xFF	; 255
    14e0:	fc 01       	movw	r30, r24
    14e2:	11 83       	std	Z+1, r17	; 0x01
    14e4:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e6:	ce 01       	movw	r24, r28
    14e8:	83 5a       	subi	r24, 0xA3	; 163
    14ea:	9f 4f       	sbci	r25, 0xFF	; 255
    14ec:	9e 01       	movw	r18, r28
    14ee:	23 5a       	subi	r18, 0xA3	; 163
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	f9 01       	movw	r30, r18
    14f4:	20 81       	ld	r18, Z
    14f6:	31 81       	ldd	r19, Z+1	; 0x01
    14f8:	21 50       	subi	r18, 0x01	; 1
    14fa:	30 40       	sbci	r19, 0x00	; 0
    14fc:	fc 01       	movw	r30, r24
    14fe:	31 83       	std	Z+1, r19	; 0x01
    1500:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	ce 01       	movw	r24, r28
    1504:	83 5a       	subi	r24, 0xA3	; 163
    1506:	9f 4f       	sbci	r25, 0xFF	; 255
    1508:	fc 01       	movw	r30, r24
    150a:	80 81       	ld	r24, Z
    150c:	91 81       	ldd	r25, Z+1	; 0x01
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	89 f6       	brne	.-94     	; 0x14b4 <LCDBusyLoop+0x7e4>
    1512:	58 c0       	rjmp	.+176    	; 0x15c4 <LCDBusyLoop+0x8f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1514:	8e 01       	movw	r16, r28
    1516:	03 5a       	subi	r16, 0xA3	; 163
    1518:	1f 4f       	sbci	r17, 0xFF	; 255
    151a:	ce 01       	movw	r24, r28
    151c:	87 5a       	subi	r24, 0xA7	; 167
    151e:	9f 4f       	sbci	r25, 0xFF	; 255
    1520:	fc 01       	movw	r30, r24
    1522:	60 81       	ld	r22, Z
    1524:	71 81       	ldd	r23, Z+1	; 0x01
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	93 81       	ldd	r25, Z+3	; 0x03
    152a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    152e:	dc 01       	movw	r26, r24
    1530:	cb 01       	movw	r24, r22
    1532:	f8 01       	movw	r30, r16
    1534:	91 83       	std	Z+1, r25	; 0x01
    1536:	80 83       	st	Z, r24
    1538:	ce 01       	movw	r24, r28
    153a:	8f 59       	subi	r24, 0x9F	; 159
    153c:	9f 4f       	sbci	r25, 0xFF	; 255
    153e:	9e 01       	movw	r18, r28
    1540:	23 5a       	subi	r18, 0xA3	; 163
    1542:	3f 4f       	sbci	r19, 0xFF	; 255
    1544:	f9 01       	movw	r30, r18
    1546:	20 81       	ld	r18, Z
    1548:	31 81       	ldd	r19, Z+1	; 0x01
    154a:	fc 01       	movw	r30, r24
    154c:	31 83       	std	Z+1, r19	; 0x01
    154e:	20 83       	st	Z, r18
    1550:	ce 01       	movw	r24, r28
    1552:	8f 59       	subi	r24, 0x9F	; 159
    1554:	9f 4f       	sbci	r25, 0xFF	; 255
    1556:	fc 01       	movw	r30, r24
    1558:	80 81       	ld	r24, Z
    155a:	91 81       	ldd	r25, Z+1	; 0x01
    155c:	8c 01       	movw	r16, r24
    155e:	c8 01       	movw	r24, r16
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	f1 f7       	brne	.-4      	; 0x1560 <LCDBusyLoop+0x890>
    1564:	8c 01       	movw	r16, r24
    1566:	ce 01       	movw	r24, r28
    1568:	8f 59       	subi	r24, 0x9F	; 159
    156a:	9f 4f       	sbci	r25, 0xFF	; 255
    156c:	fc 01       	movw	r30, r24
    156e:	11 83       	std	Z+1, r17	; 0x01
    1570:	00 83       	st	Z, r16
    1572:	28 c0       	rjmp	.+80     	; 0x15c4 <LCDBusyLoop+0x8f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1574:	8e 01       	movw	r16, r28
    1576:	0c 5a       	subi	r16, 0xAC	; 172
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	ce 01       	movw	r24, r28
    157c:	80 5b       	subi	r24, 0xB0	; 176
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	fc 01       	movw	r30, r24
    1582:	60 81       	ld	r22, Z
    1584:	71 81       	ldd	r23, Z+1	; 0x01
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	f8 01       	movw	r30, r16
    1594:	80 83       	st	Z, r24
    1596:	ce 01       	movw	r24, r28
    1598:	8d 59       	subi	r24, 0x9D	; 157
    159a:	9f 4f       	sbci	r25, 0xFF	; 255
    159c:	9e 01       	movw	r18, r28
    159e:	2c 5a       	subi	r18, 0xAC	; 172
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	f9 01       	movw	r30, r18
    15a4:	20 81       	ld	r18, Z
    15a6:	fc 01       	movw	r30, r24
    15a8:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15aa:	ce 01       	movw	r24, r28
    15ac:	8d 59       	subi	r24, 0x9D	; 157
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	fc 01       	movw	r30, r24
    15b2:	80 81       	ld	r24, Z
    15b4:	18 2f       	mov	r17, r24
    15b6:	1a 95       	dec	r17
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCDBusyLoop+0x8e6>
    15ba:	ce 01       	movw	r24, r28
    15bc:	8d 59       	subi	r24, 0x9D	; 157
    15be:	9f 4f       	sbci	r25, 0xFF	; 255
    15c0:	fc 01       	movw	r30, r24
    15c2:	10 83       	st	Z, r17
		_delay_us(1);	//tEL

		SET_E();
    15c4:	88 e3       	ldi	r24, 0x38	; 56
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	28 e3       	ldi	r18, 0x38	; 56
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	f9 01       	movw	r30, r18
    15ce:	20 81       	ld	r18, Z
    15d0:	20 61       	ori	r18, 0x10	; 16
    15d2:	fc 01       	movw	r30, r24
    15d4:	20 83       	st	Z, r18
    15d6:	9e 01       	movw	r18, r28
    15d8:	2c 59       	subi	r18, 0x9C	; 156
    15da:	3f 4f       	sbci	r19, 0xFF	; 255
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	a0 e0       	ldi	r26, 0x00	; 0
    15e2:	bf e3       	ldi	r27, 0x3F	; 63
    15e4:	f9 01       	movw	r30, r18
    15e6:	80 83       	st	Z, r24
    15e8:	91 83       	std	Z+1, r25	; 0x01
    15ea:	a2 83       	std	Z+2, r26	; 0x02
    15ec:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    15ee:	8e 01       	movw	r16, r28
    15f0:	08 59       	subi	r16, 0x98	; 152
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	ce 01       	movw	r24, r28
    15f6:	8c 59       	subi	r24, 0x9C	; 156
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	fc 01       	movw	r30, r24
    15fc:	60 81       	ld	r22, Z
    15fe:	71 81       	ldd	r23, Z+1	; 0x01
    1600:	82 81       	ldd	r24, Z+2	; 0x02
    1602:	93 81       	ldd	r25, Z+3	; 0x03
    1604:	2b ea       	ldi	r18, 0xAB	; 171
    1606:	3a ea       	ldi	r19, 0xAA	; 170
    1608:	4a ea       	ldi	r20, 0xAA	; 170
    160a:	50 e4       	ldi	r21, 0x40	; 64
    160c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1610:	dc 01       	movw	r26, r24
    1612:	cb 01       	movw	r24, r22
    1614:	f8 01       	movw	r30, r16
    1616:	80 83       	st	Z, r24
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	a2 83       	std	Z+2, r26	; 0x02
    161c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    161e:	ce 01       	movw	r24, r28
    1620:	88 59       	subi	r24, 0x98	; 152
    1622:	9f 4f       	sbci	r25, 0xFF	; 255
    1624:	11 e0       	ldi	r17, 0x01	; 1
    1626:	fc 01       	movw	r30, r24
    1628:	60 81       	ld	r22, Z
    162a:	71 81       	ldd	r23, Z+1	; 0x01
    162c:	82 81       	ldd	r24, Z+2	; 0x02
    162e:	93 81       	ldd	r25, Z+3	; 0x03
    1630:	20 e0       	ldi	r18, 0x00	; 0
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	40 e8       	ldi	r20, 0x80	; 128
    1636:	5f e3       	ldi	r21, 0x3F	; 63
    1638:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    163c:	88 23       	and	r24, r24
    163e:	0c f0       	brlt	.+2      	; 0x1642 <LCDBusyLoop+0x972>
    1640:	10 e0       	ldi	r17, 0x00	; 0
    1642:	11 23       	and	r17, r17
    1644:	39 f0       	breq	.+14     	; 0x1654 <LCDBusyLoop+0x984>
		__ticks = 1;
    1646:	ce 01       	movw	r24, r28
    1648:	84 59       	subi	r24, 0x94	; 148
    164a:	9f 4f       	sbci	r25, 0xFF	; 255
    164c:	21 e0       	ldi	r18, 0x01	; 1
    164e:	fc 01       	movw	r30, r24
    1650:	20 83       	st	Z, r18
    1652:	05 c1       	rjmp	.+522    	; 0x185e <LCDBusyLoop+0xb8e>
	else if (__tmp > 255)
    1654:	ce 01       	movw	r24, r28
    1656:	88 59       	subi	r24, 0x98	; 152
    1658:	9f 4f       	sbci	r25, 0xFF	; 255
    165a:	11 e0       	ldi	r17, 0x01	; 1
    165c:	fc 01       	movw	r30, r24
    165e:	60 81       	ld	r22, Z
    1660:	71 81       	ldd	r23, Z+1	; 0x01
    1662:	82 81       	ldd	r24, Z+2	; 0x02
    1664:	93 81       	ldd	r25, Z+3	; 0x03
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4f e7       	ldi	r20, 0x7F	; 127
    166c:	53 e4       	ldi	r21, 0x43	; 67
    166e:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1672:	18 16       	cp	r1, r24
    1674:	0c f0       	brlt	.+2      	; 0x1678 <LCDBusyLoop+0x9a8>
    1676:	10 e0       	ldi	r17, 0x00	; 0
    1678:	11 23       	and	r17, r17
    167a:	09 f4       	brne	.+2      	; 0x167e <LCDBusyLoop+0x9ae>
    167c:	df c0       	rjmp	.+446    	; 0x183c <LCDBusyLoop+0xb6c>
	{
		_delay_ms(__us / 1000.0);
    167e:	ce 01       	movw	r24, r28
    1680:	8c 59       	subi	r24, 0x9C	; 156
    1682:	9f 4f       	sbci	r25, 0xFF	; 255
    1684:	fc 01       	movw	r30, r24
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	82 81       	ldd	r24, Z+2	; 0x02
    168c:	93 81       	ldd	r25, Z+3	; 0x03
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	54 e4       	ldi	r21, 0x44	; 68
    1696:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	9e 01       	movw	r18, r28
    16a0:	23 59       	subi	r18, 0x93	; 147
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	f9 01       	movw	r30, r18
    16a6:	80 83       	st	Z, r24
    16a8:	91 83       	std	Z+1, r25	; 0x01
    16aa:	a2 83       	std	Z+2, r26	; 0x02
    16ac:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	8e 01       	movw	r16, r28
    16b0:	0f 58       	subi	r16, 0x8F	; 143
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	ce 01       	movw	r24, r28
    16b6:	83 59       	subi	r24, 0x93	; 147
    16b8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ba:	fc 01       	movw	r30, r24
    16bc:	60 81       	ld	r22, Z
    16be:	71 81       	ldd	r23, Z+1	; 0x01
    16c0:	82 81       	ldd	r24, Z+2	; 0x02
    16c2:	93 81       	ldd	r25, Z+3	; 0x03
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	55 e4       	ldi	r21, 0x45	; 69
    16cc:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	f8 01       	movw	r30, r16
    16d6:	80 83       	st	Z, r24
    16d8:	91 83       	std	Z+1, r25	; 0x01
    16da:	a2 83       	std	Z+2, r26	; 0x02
    16dc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16de:	ce 01       	movw	r24, r28
    16e0:	8f 58       	subi	r24, 0x8F	; 143
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	11 e0       	ldi	r17, 0x01	; 1
    16e6:	fc 01       	movw	r30, r24
    16e8:	60 81       	ld	r22, Z
    16ea:	71 81       	ldd	r23, Z+1	; 0x01
    16ec:	82 81       	ldd	r24, Z+2	; 0x02
    16ee:	93 81       	ldd	r25, Z+3	; 0x03
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e8       	ldi	r20, 0x80	; 128
    16f6:	5f e3       	ldi	r21, 0x3F	; 63
    16f8:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    16fc:	88 23       	and	r24, r24
    16fe:	0c f0       	brlt	.+2      	; 0x1702 <LCDBusyLoop+0xa32>
    1700:	10 e0       	ldi	r17, 0x00	; 0
    1702:	11 23       	and	r17, r17
    1704:	49 f0       	breq	.+18     	; 0x1718 <LCDBusyLoop+0xa48>
		__ticks = 1;
    1706:	ce 01       	movw	r24, r28
    1708:	8b 58       	subi	r24, 0x8B	; 139
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	21 e0       	ldi	r18, 0x01	; 1
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	fc 01       	movw	r30, r24
    1712:	31 83       	std	Z+1, r19	; 0x01
    1714:	20 83       	st	Z, r18
    1716:	74 c0       	rjmp	.+232    	; 0x1800 <LCDBusyLoop+0xb30>
	else if (__tmp > 65535)
    1718:	ce 01       	movw	r24, r28
    171a:	8f 58       	subi	r24, 0x8F	; 143
    171c:	9f 4f       	sbci	r25, 0xFF	; 255
    171e:	11 e0       	ldi	r17, 0x01	; 1
    1720:	fc 01       	movw	r30, r24
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	20 e0       	ldi	r18, 0x00	; 0
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	4f e7       	ldi	r20, 0x7F	; 127
    1730:	57 e4       	ldi	r21, 0x47	; 71
    1732:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1736:	18 16       	cp	r1, r24
    1738:	0c f0       	brlt	.+2      	; 0x173c <LCDBusyLoop+0xa6c>
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	11 23       	and	r17, r17
    173e:	09 f4       	brne	.+2      	; 0x1742 <LCDBusyLoop+0xa72>
    1740:	4d c0       	rjmp	.+154    	; 0x17dc <LCDBusyLoop+0xb0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1742:	ce 01       	movw	r24, r28
    1744:	83 59       	subi	r24, 0x93	; 147
    1746:	9f 4f       	sbci	r25, 0xFF	; 255
    1748:	fc 01       	movw	r30, r24
    174a:	60 81       	ld	r22, Z
    174c:	71 81       	ldd	r23, Z+1	; 0x01
    174e:	82 81       	ldd	r24, Z+2	; 0x02
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	40 e2       	ldi	r20, 0x20	; 32
    1758:	51 e4       	ldi	r21, 0x41	; 65
    175a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	8e 01       	movw	r16, r28
    1764:	0b 58       	subi	r16, 0x8B	; 139
    1766:	1f 4f       	sbci	r17, 0xFF	; 255
    1768:	bc 01       	movw	r22, r24
    176a:	cd 01       	movw	r24, r26
    176c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	f8 01       	movw	r30, r16
    1776:	91 83       	std	Z+1, r25	; 0x01
    1778:	80 83       	st	Z, r24
    177a:	27 c0       	rjmp	.+78     	; 0x17ca <LCDBusyLoop+0xafa>
    177c:	ce 01       	movw	r24, r28
    177e:	89 58       	subi	r24, 0x89	; 137
    1780:	9f 4f       	sbci	r25, 0xFF	; 255
    1782:	20 e9       	ldi	r18, 0x90	; 144
    1784:	31 e0       	ldi	r19, 0x01	; 1
    1786:	fc 01       	movw	r30, r24
    1788:	31 83       	std	Z+1, r19	; 0x01
    178a:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    178c:	ce 01       	movw	r24, r28
    178e:	89 58       	subi	r24, 0x89	; 137
    1790:	9f 4f       	sbci	r25, 0xFF	; 255
    1792:	fc 01       	movw	r30, r24
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	8c 01       	movw	r16, r24
    179a:	c8 01       	movw	r24, r16
    179c:	01 97       	sbiw	r24, 0x01	; 1
    179e:	f1 f7       	brne	.-4      	; 0x179c <LCDBusyLoop+0xacc>
    17a0:	8c 01       	movw	r16, r24
    17a2:	ce 01       	movw	r24, r28
    17a4:	89 58       	subi	r24, 0x89	; 137
    17a6:	9f 4f       	sbci	r25, 0xFF	; 255
    17a8:	fc 01       	movw	r30, r24
    17aa:	11 83       	std	Z+1, r17	; 0x01
    17ac:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ae:	ce 01       	movw	r24, r28
    17b0:	8b 58       	subi	r24, 0x8B	; 139
    17b2:	9f 4f       	sbci	r25, 0xFF	; 255
    17b4:	9e 01       	movw	r18, r28
    17b6:	2b 58       	subi	r18, 0x8B	; 139
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	31 81       	ldd	r19, Z+1	; 0x01
    17c0:	21 50       	subi	r18, 0x01	; 1
    17c2:	30 40       	sbci	r19, 0x00	; 0
    17c4:	fc 01       	movw	r30, r24
    17c6:	31 83       	std	Z+1, r19	; 0x01
    17c8:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17ca:	ce 01       	movw	r24, r28
    17cc:	8b 58       	subi	r24, 0x8B	; 139
    17ce:	9f 4f       	sbci	r25, 0xFF	; 255
    17d0:	fc 01       	movw	r30, r24
    17d2:	80 81       	ld	r24, Z
    17d4:	91 81       	ldd	r25, Z+1	; 0x01
    17d6:	00 97       	sbiw	r24, 0x00	; 0
    17d8:	89 f6       	brne	.-94     	; 0x177c <LCDBusyLoop+0xaac>
    17da:	58 c0       	rjmp	.+176    	; 0x188c <LCDBusyLoop+0xbbc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17dc:	8e 01       	movw	r16, r28
    17de:	0b 58       	subi	r16, 0x8B	; 139
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	ce 01       	movw	r24, r28
    17e4:	8f 58       	subi	r24, 0x8F	; 143
    17e6:	9f 4f       	sbci	r25, 0xFF	; 255
    17e8:	fc 01       	movw	r30, r24
    17ea:	60 81       	ld	r22, Z
    17ec:	71 81       	ldd	r23, Z+1	; 0x01
    17ee:	82 81       	ldd	r24, Z+2	; 0x02
    17f0:	93 81       	ldd	r25, Z+3	; 0x03
    17f2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	f8 01       	movw	r30, r16
    17fc:	91 83       	std	Z+1, r25	; 0x01
    17fe:	80 83       	st	Z, r24
    1800:	ce 01       	movw	r24, r28
    1802:	87 58       	subi	r24, 0x87	; 135
    1804:	9f 4f       	sbci	r25, 0xFF	; 255
    1806:	9e 01       	movw	r18, r28
    1808:	2b 58       	subi	r18, 0x8B	; 139
    180a:	3f 4f       	sbci	r19, 0xFF	; 255
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	31 81       	ldd	r19, Z+1	; 0x01
    1812:	fc 01       	movw	r30, r24
    1814:	31 83       	std	Z+1, r19	; 0x01
    1816:	20 83       	st	Z, r18
    1818:	ce 01       	movw	r24, r28
    181a:	87 58       	subi	r24, 0x87	; 135
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	fc 01       	movw	r30, r24
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	8c 01       	movw	r16, r24
    1826:	c8 01       	movw	r24, r16
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <LCDBusyLoop+0xb58>
    182c:	8c 01       	movw	r16, r24
    182e:	ce 01       	movw	r24, r28
    1830:	87 58       	subi	r24, 0x87	; 135
    1832:	9f 4f       	sbci	r25, 0xFF	; 255
    1834:	fc 01       	movw	r30, r24
    1836:	11 83       	std	Z+1, r17	; 0x01
    1838:	00 83       	st	Z, r16
    183a:	28 c0       	rjmp	.+80     	; 0x188c <LCDBusyLoop+0xbbc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    183c:	8e 01       	movw	r16, r28
    183e:	04 59       	subi	r16, 0x94	; 148
    1840:	1f 4f       	sbci	r17, 0xFF	; 255
    1842:	ce 01       	movw	r24, r28
    1844:	88 59       	subi	r24, 0x98	; 152
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	fc 01       	movw	r30, r24
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	f8 01       	movw	r30, r16
    185c:	80 83       	st	Z, r24
    185e:	ce 01       	movw	r24, r28
    1860:	85 58       	subi	r24, 0x85	; 133
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	9e 01       	movw	r18, r28
    1866:	24 59       	subi	r18, 0x94	; 148
    1868:	3f 4f       	sbci	r19, 0xFF	; 255
    186a:	f9 01       	movw	r30, r18
    186c:	20 81       	ld	r18, Z
    186e:	fc 01       	movw	r30, r24
    1870:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1872:	ce 01       	movw	r24, r28
    1874:	85 58       	subi	r24, 0x85	; 133
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	fc 01       	movw	r30, r24
    187a:	80 81       	ld	r24, Z
    187c:	18 2f       	mov	r17, r24
    187e:	1a 95       	dec	r17
    1880:	f1 f7       	brne	.-4      	; 0x187e <LCDBusyLoop+0xbae>
    1882:	ce 01       	movw	r24, r28
    1884:	85 58       	subi	r24, 0x85	; 133
    1886:	9f 4f       	sbci	r25, 0xFF	; 255
    1888:	fc 01       	movw	r30, r24
    188a:	10 83       	st	Z, r17
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
    188c:	86 e3       	ldi	r24, 0x36	; 54
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	fc 01       	movw	r30, r24
    1892:	80 81       	ld	r24, Z
    1894:	8a 83       	std	Y+2, r24	; 0x02
		temp&=0x0F;
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	8f 70       	andi	r24, 0x0F	; 15
    189a:	8a 83       	std	Y+2, r24	; 0x02

		status=status|temp;
    189c:	99 81       	ldd	r25, Y+1	; 0x01
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	89 2b       	or	r24, r25
    18a2:	89 83       	std	Y+1, r24	; 0x01

		busy=status & 0b10000000;
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	80 78       	andi	r24, 0x80	; 128
    18a8:	8b 83       	std	Y+3, r24	; 0x03
    18aa:	9e 01       	movw	r18, r28
    18ac:	24 58       	subi	r18, 0x84	; 132
    18ae:	3f 4f       	sbci	r19, 0xFF	; 255
    18b0:	80 e0       	ldi	r24, 0x00	; 0
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	a0 e0       	ldi	r26, 0x00	; 0
    18b6:	bf e3       	ldi	r27, 0x3F	; 63
    18b8:	f9 01       	movw	r30, r18
    18ba:	80 83       	st	Z, r24
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	a2 83       	std	Z+2, r26	; 0x02
    18c0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    18c2:	8e 01       	movw	r16, r28
    18c4:	00 58       	subi	r16, 0x80	; 128
    18c6:	1f 4f       	sbci	r17, 0xFF	; 255
    18c8:	ce 01       	movw	r24, r28
    18ca:	84 58       	subi	r24, 0x84	; 132
    18cc:	9f 4f       	sbci	r25, 0xFF	; 255
    18ce:	fc 01       	movw	r30, r24
    18d0:	60 81       	ld	r22, Z
    18d2:	71 81       	ldd	r23, Z+1	; 0x01
    18d4:	82 81       	ldd	r24, Z+2	; 0x02
    18d6:	93 81       	ldd	r25, Z+3	; 0x03
    18d8:	2b ea       	ldi	r18, 0xAB	; 171
    18da:	3a ea       	ldi	r19, 0xAA	; 170
    18dc:	4a ea       	ldi	r20, 0xAA	; 170
    18de:	50 e4       	ldi	r21, 0x40	; 64
    18e0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    18e4:	dc 01       	movw	r26, r24
    18e6:	cb 01       	movw	r24, r22
    18e8:	f8 01       	movw	r30, r16
    18ea:	80 83       	st	Z, r24
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	a2 83       	std	Z+2, r26	; 0x02
    18f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f2:	ce 01       	movw	r24, r28
    18f4:	80 58       	subi	r24, 0x80	; 128
    18f6:	9f 4f       	sbci	r25, 0xFF	; 255
    18f8:	11 e0       	ldi	r17, 0x01	; 1
    18fa:	fc 01       	movw	r30, r24
    18fc:	60 81       	ld	r22, Z
    18fe:	71 81       	ldd	r23, Z+1	; 0x01
    1900:	82 81       	ldd	r24, Z+2	; 0x02
    1902:	93 81       	ldd	r25, Z+3	; 0x03
    1904:	20 e0       	ldi	r18, 0x00	; 0
    1906:	30 e0       	ldi	r19, 0x00	; 0
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	5f e3       	ldi	r21, 0x3F	; 63
    190c:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1910:	88 23       	and	r24, r24
    1912:	0c f0       	brlt	.+2      	; 0x1916 <LCDBusyLoop+0xc46>
    1914:	10 e0       	ldi	r17, 0x00	; 0
    1916:	11 23       	and	r17, r17
    1918:	39 f0       	breq	.+14     	; 0x1928 <LCDBusyLoop+0xc58>
		__ticks = 1;
    191a:	ce 01       	movw	r24, r28
    191c:	8c 57       	subi	r24, 0x7C	; 124
    191e:	9f 4f       	sbci	r25, 0xFF	; 255
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
    1926:	05 c1       	rjmp	.+522    	; 0x1b32 <LCDBusyLoop+0xe62>
	else if (__tmp > 255)
    1928:	ce 01       	movw	r24, r28
    192a:	80 58       	subi	r24, 0x80	; 128
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	11 e0       	ldi	r17, 0x01	; 1
    1930:	fc 01       	movw	r30, r24
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	53 e4       	ldi	r21, 0x43	; 67
    1942:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	0c f0       	brlt	.+2      	; 0x194c <LCDBusyLoop+0xc7c>
    194a:	10 e0       	ldi	r17, 0x00	; 0
    194c:	11 23       	and	r17, r17
    194e:	09 f4       	brne	.+2      	; 0x1952 <LCDBusyLoop+0xc82>
    1950:	df c0       	rjmp	.+446    	; 0x1b10 <LCDBusyLoop+0xe40>
	{
		_delay_ms(__us / 1000.0);
    1952:	ce 01       	movw	r24, r28
    1954:	84 58       	subi	r24, 0x84	; 132
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	fc 01       	movw	r30, r24
    195a:	60 81       	ld	r22, Z
    195c:	71 81       	ldd	r23, Z+1	; 0x01
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	4a e7       	ldi	r20, 0x7A	; 122
    1968:	54 e4       	ldi	r21, 0x44	; 68
    196a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    196e:	dc 01       	movw	r26, r24
    1970:	cb 01       	movw	r24, r22
    1972:	9e 01       	movw	r18, r28
    1974:	2b 57       	subi	r18, 0x7B	; 123
    1976:	3f 4f       	sbci	r19, 0xFF	; 255
    1978:	f9 01       	movw	r30, r18
    197a:	80 83       	st	Z, r24
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	a2 83       	std	Z+2, r26	; 0x02
    1980:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1982:	8e 01       	movw	r16, r28
    1984:	07 57       	subi	r16, 0x77	; 119
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	ce 01       	movw	r24, r28
    198a:	8b 57       	subi	r24, 0x7B	; 123
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	fc 01       	movw	r30, r24
    1990:	60 81       	ld	r22, Z
    1992:	71 81       	ldd	r23, Z+1	; 0x01
    1994:	82 81       	ldd	r24, Z+2	; 0x02
    1996:	93 81       	ldd	r25, Z+3	; 0x03
    1998:	20 e0       	ldi	r18, 0x00	; 0
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	4a e7       	ldi	r20, 0x7A	; 122
    199e:	55 e4       	ldi	r21, 0x45	; 69
    19a0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    19a4:	dc 01       	movw	r26, r24
    19a6:	cb 01       	movw	r24, r22
    19a8:	f8 01       	movw	r30, r16
    19aa:	80 83       	st	Z, r24
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	a2 83       	std	Z+2, r26	; 0x02
    19b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19b2:	ce 01       	movw	r24, r28
    19b4:	87 57       	subi	r24, 0x77	; 119
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	11 e0       	ldi	r17, 0x01	; 1
    19ba:	fc 01       	movw	r30, r24
    19bc:	60 81       	ld	r22, Z
    19be:	71 81       	ldd	r23, Z+1	; 0x01
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e8       	ldi	r20, 0x80	; 128
    19ca:	5f e3       	ldi	r21, 0x3F	; 63
    19cc:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    19d0:	88 23       	and	r24, r24
    19d2:	0c f0       	brlt	.+2      	; 0x19d6 <LCDBusyLoop+0xd06>
    19d4:	10 e0       	ldi	r17, 0x00	; 0
    19d6:	11 23       	and	r17, r17
    19d8:	49 f0       	breq	.+18     	; 0x19ec <LCDBusyLoop+0xd1c>
		__ticks = 1;
    19da:	ce 01       	movw	r24, r28
    19dc:	83 57       	subi	r24, 0x73	; 115
    19de:	9f 4f       	sbci	r25, 0xFF	; 255
    19e0:	21 e0       	ldi	r18, 0x01	; 1
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	fc 01       	movw	r30, r24
    19e6:	31 83       	std	Z+1, r19	; 0x01
    19e8:	20 83       	st	Z, r18
    19ea:	74 c0       	rjmp	.+232    	; 0x1ad4 <LCDBusyLoop+0xe04>
	else if (__tmp > 65535)
    19ec:	ce 01       	movw	r24, r28
    19ee:	87 57       	subi	r24, 0x77	; 119
    19f0:	9f 4f       	sbci	r25, 0xFF	; 255
    19f2:	11 e0       	ldi	r17, 0x01	; 1
    19f4:	fc 01       	movw	r30, r24
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	0c f0       	brlt	.+2      	; 0x1a10 <LCDBusyLoop+0xd40>
    1a0e:	10 e0       	ldi	r17, 0x00	; 0
    1a10:	11 23       	and	r17, r17
    1a12:	09 f4       	brne	.+2      	; 0x1a16 <LCDBusyLoop+0xd46>
    1a14:	4d c0       	rjmp	.+154    	; 0x1ab0 <LCDBusyLoop+0xde0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a16:	ce 01       	movw	r24, r28
    1a18:	8b 57       	subi	r24, 0x7B	; 123
    1a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	60 81       	ld	r22, Z
    1a20:	71 81       	ldd	r23, Z+1	; 0x01
    1a22:	82 81       	ldd	r24, Z+2	; 0x02
    1a24:	93 81       	ldd	r25, Z+3	; 0x03
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8e 01       	movw	r16, r28
    1a38:	03 57       	subi	r16, 0x73	; 115
    1a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	f8 01       	movw	r30, r16
    1a4a:	91 83       	std	Z+1, r25	; 0x01
    1a4c:	80 83       	st	Z, r24
    1a4e:	27 c0       	rjmp	.+78     	; 0x1a9e <LCDBusyLoop+0xdce>
    1a50:	ce 01       	movw	r24, r28
    1a52:	81 57       	subi	r24, 0x71	; 113
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	20 e9       	ldi	r18, 0x90	; 144
    1a58:	31 e0       	ldi	r19, 0x01	; 1
    1a5a:	fc 01       	movw	r30, r24
    1a5c:	31 83       	std	Z+1, r19	; 0x01
    1a5e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1a60:	ce 01       	movw	r24, r28
    1a62:	81 57       	subi	r24, 0x71	; 113
    1a64:	9f 4f       	sbci	r25, 0xFF	; 255
    1a66:	fc 01       	movw	r30, r24
    1a68:	80 81       	ld	r24, Z
    1a6a:	91 81       	ldd	r25, Z+1	; 0x01
    1a6c:	8c 01       	movw	r16, r24
    1a6e:	c8 01       	movw	r24, r16
    1a70:	01 97       	sbiw	r24, 0x01	; 1
    1a72:	f1 f7       	brne	.-4      	; 0x1a70 <LCDBusyLoop+0xda0>
    1a74:	8c 01       	movw	r16, r24
    1a76:	ce 01       	movw	r24, r28
    1a78:	81 57       	subi	r24, 0x71	; 113
    1a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a7c:	fc 01       	movw	r30, r24
    1a7e:	11 83       	std	Z+1, r17	; 0x01
    1a80:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a82:	ce 01       	movw	r24, r28
    1a84:	83 57       	subi	r24, 0x73	; 115
    1a86:	9f 4f       	sbci	r25, 0xFF	; 255
    1a88:	9e 01       	movw	r18, r28
    1a8a:	23 57       	subi	r18, 0x73	; 115
    1a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a8e:	f9 01       	movw	r30, r18
    1a90:	20 81       	ld	r18, Z
    1a92:	31 81       	ldd	r19, Z+1	; 0x01
    1a94:	21 50       	subi	r18, 0x01	; 1
    1a96:	30 40       	sbci	r19, 0x00	; 0
    1a98:	fc 01       	movw	r30, r24
    1a9a:	31 83       	std	Z+1, r19	; 0x01
    1a9c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a9e:	ce 01       	movw	r24, r28
    1aa0:	83 57       	subi	r24, 0x73	; 115
    1aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	80 81       	ld	r24, Z
    1aa8:	91 81       	ldd	r25, Z+1	; 0x01
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	89 f6       	brne	.-94     	; 0x1a50 <LCDBusyLoop+0xd80>
    1aae:	58 c0       	rjmp	.+176    	; 0x1b60 <LCDBusyLoop+0xe90>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab0:	8e 01       	movw	r16, r28
    1ab2:	03 57       	subi	r16, 0x73	; 115
    1ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab6:	ce 01       	movw	r24, r28
    1ab8:	87 57       	subi	r24, 0x77	; 119
    1aba:	9f 4f       	sbci	r25, 0xFF	; 255
    1abc:	fc 01       	movw	r30, r24
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1aca:	dc 01       	movw	r26, r24
    1acc:	cb 01       	movw	r24, r22
    1ace:	f8 01       	movw	r30, r16
    1ad0:	91 83       	std	Z+1, r25	; 0x01
    1ad2:	80 83       	st	Z, r24
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	8f 56       	subi	r24, 0x6F	; 111
    1ad8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ada:	9e 01       	movw	r18, r28
    1adc:	23 57       	subi	r18, 0x73	; 115
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	f9 01       	movw	r30, r18
    1ae2:	20 81       	ld	r18, Z
    1ae4:	31 81       	ldd	r19, Z+1	; 0x01
    1ae6:	fc 01       	movw	r30, r24
    1ae8:	31 83       	std	Z+1, r19	; 0x01
    1aea:	20 83       	st	Z, r18
    1aec:	ce 01       	movw	r24, r28
    1aee:	8f 56       	subi	r24, 0x6F	; 111
    1af0:	9f 4f       	sbci	r25, 0xFF	; 255
    1af2:	fc 01       	movw	r30, r24
    1af4:	80 81       	ld	r24, Z
    1af6:	91 81       	ldd	r25, Z+1	; 0x01
    1af8:	8c 01       	movw	r16, r24
    1afa:	c8 01       	movw	r24, r16
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCDBusyLoop+0xe2c>
    1b00:	8c 01       	movw	r16, r24
    1b02:	ce 01       	movw	r24, r28
    1b04:	8f 56       	subi	r24, 0x6F	; 111
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	fc 01       	movw	r30, r24
    1b0a:	11 83       	std	Z+1, r17	; 0x01
    1b0c:	00 83       	st	Z, r16
    1b0e:	28 c0       	rjmp	.+80     	; 0x1b60 <LCDBusyLoop+0xe90>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b10:	8e 01       	movw	r16, r28
    1b12:	0c 57       	subi	r16, 0x7C	; 124
    1b14:	1f 4f       	sbci	r17, 0xFF	; 255
    1b16:	ce 01       	movw	r24, r28
    1b18:	80 58       	subi	r24, 0x80	; 128
    1b1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b1c:	fc 01       	movw	r30, r24
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1b2a:	dc 01       	movw	r26, r24
    1b2c:	cb 01       	movw	r24, r22
    1b2e:	f8 01       	movw	r30, r16
    1b30:	80 83       	st	Z, r24
    1b32:	ce 01       	movw	r24, r28
    1b34:	8d 56       	subi	r24, 0x6D	; 109
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	9e 01       	movw	r18, r28
    1b3a:	2c 57       	subi	r18, 0x7C	; 124
    1b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3e:	f9 01       	movw	r30, r18
    1b40:	20 81       	ld	r18, Z
    1b42:	fc 01       	movw	r30, r24
    1b44:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b46:	ce 01       	movw	r24, r28
    1b48:	8d 56       	subi	r24, 0x6D	; 109
    1b4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	80 81       	ld	r24, Z
    1b50:	18 2f       	mov	r17, r24
    1b52:	1a 95       	dec	r17
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCDBusyLoop+0xe82>
    1b56:	ce 01       	movw	r24, r28
    1b58:	8d 56       	subi	r24, 0x6D	; 109
    1b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	10 83       	st	Z, r17

		_delay_us(0.5);
		CLEAR_E();
    1b60:	88 e3       	ldi	r24, 0x38	; 56
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	28 e3       	ldi	r18, 0x38	; 56
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	f9 01       	movw	r30, r18
    1b6a:	20 81       	ld	r18, Z
    1b6c:	2f 7e       	andi	r18, 0xEF	; 239
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 83       	st	Z, r18
    1b72:	9e 01       	movw	r18, r28
    1b74:	2c 56       	subi	r18, 0x6C	; 108
    1b76:	3f 4f       	sbci	r19, 0xFF	; 255
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	a0 e8       	ldi	r26, 0x80	; 128
    1b7e:	bf e3       	ldi	r27, 0x3F	; 63
    1b80:	f9 01       	movw	r30, r18
    1b82:	80 83       	st	Z, r24
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	a2 83       	std	Z+2, r26	; 0x02
    1b88:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    1b8a:	8e 01       	movw	r16, r28
    1b8c:	08 56       	subi	r16, 0x68	; 104
    1b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b90:	ce 01       	movw	r24, r28
    1b92:	8c 56       	subi	r24, 0x6C	; 108
    1b94:	9f 4f       	sbci	r25, 0xFF	; 255
    1b96:	fc 01       	movw	r30, r24
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	2b ea       	ldi	r18, 0xAB	; 171
    1ba2:	3a ea       	ldi	r19, 0xAA	; 170
    1ba4:	4a ea       	ldi	r20, 0xAA	; 170
    1ba6:	50 e4       	ldi	r21, 0x40	; 64
    1ba8:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1bac:	dc 01       	movw	r26, r24
    1bae:	cb 01       	movw	r24, r22
    1bb0:	f8 01       	movw	r30, r16
    1bb2:	80 83       	st	Z, r24
    1bb4:	91 83       	std	Z+1, r25	; 0x01
    1bb6:	a2 83       	std	Z+2, r26	; 0x02
    1bb8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bba:	ce 01       	movw	r24, r28
    1bbc:	88 56       	subi	r24, 0x68	; 104
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	11 e0       	ldi	r17, 0x01	; 1
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	60 81       	ld	r22, Z
    1bc6:	71 81       	ldd	r23, Z+1	; 0x01
    1bc8:	82 81       	ldd	r24, Z+2	; 0x02
    1bca:	93 81       	ldd	r25, Z+3	; 0x03
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 e8       	ldi	r20, 0x80	; 128
    1bd2:	5f e3       	ldi	r21, 0x3F	; 63
    1bd4:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1bd8:	88 23       	and	r24, r24
    1bda:	0c f0       	brlt	.+2      	; 0x1bde <LCDBusyLoop+0xf0e>
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
    1bde:	11 23       	and	r17, r17
    1be0:	39 f0       	breq	.+14     	; 0x1bf0 <LCDBusyLoop+0xf20>
		__ticks = 1;
    1be2:	ce 01       	movw	r24, r28
    1be4:	84 56       	subi	r24, 0x64	; 100
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	21 e0       	ldi	r18, 0x01	; 1
    1bea:	fc 01       	movw	r30, r24
    1bec:	20 83       	st	Z, r18
    1bee:	05 c1       	rjmp	.+522    	; 0x1dfa <LCDBusyLoop+0x112a>
	else if (__tmp > 255)
    1bf0:	ce 01       	movw	r24, r28
    1bf2:	88 56       	subi	r24, 0x68	; 104
    1bf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf6:	11 e0       	ldi	r17, 0x01	; 1
    1bf8:	fc 01       	movw	r30, r24
    1bfa:	60 81       	ld	r22, Z
    1bfc:	71 81       	ldd	r23, Z+1	; 0x01
    1bfe:	82 81       	ldd	r24, Z+2	; 0x02
    1c00:	93 81       	ldd	r25, Z+3	; 0x03
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	4f e7       	ldi	r20, 0x7F	; 127
    1c08:	53 e4       	ldi	r21, 0x43	; 67
    1c0a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1c0e:	18 16       	cp	r1, r24
    1c10:	0c f0       	brlt	.+2      	; 0x1c14 <LCDBusyLoop+0xf44>
    1c12:	10 e0       	ldi	r17, 0x00	; 0
    1c14:	11 23       	and	r17, r17
    1c16:	09 f4       	brne	.+2      	; 0x1c1a <LCDBusyLoop+0xf4a>
    1c18:	df c0       	rjmp	.+446    	; 0x1dd8 <LCDBusyLoop+0x1108>
	{
		_delay_ms(__us / 1000.0);
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	8c 56       	subi	r24, 0x6C	; 108
    1c1e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c20:	fc 01       	movw	r30, r24
    1c22:	60 81       	ld	r22, Z
    1c24:	71 81       	ldd	r23, Z+1	; 0x01
    1c26:	82 81       	ldd	r24, Z+2	; 0x02
    1c28:	93 81       	ldd	r25, Z+3	; 0x03
    1c2a:	20 e0       	ldi	r18, 0x00	; 0
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	4a e7       	ldi	r20, 0x7A	; 122
    1c30:	54 e4       	ldi	r21, 0x44	; 68
    1c32:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9e 01       	movw	r18, r28
    1c3c:	23 56       	subi	r18, 0x63	; 99
    1c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c40:	f9 01       	movw	r30, r18
    1c42:	80 83       	st	Z, r24
    1c44:	91 83       	std	Z+1, r25	; 0x01
    1c46:	a2 83       	std	Z+2, r26	; 0x02
    1c48:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	0f 55       	subi	r16, 0x5F	; 95
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	ce 01       	movw	r24, r28
    1c52:	83 56       	subi	r24, 0x63	; 99
    1c54:	9f 4f       	sbci	r25, 0xFF	; 255
    1c56:	fc 01       	movw	r30, r24
    1c58:	60 81       	ld	r22, Z
    1c5a:	71 81       	ldd	r23, Z+1	; 0x01
    1c5c:	82 81       	ldd	r24, Z+2	; 0x02
    1c5e:	93 81       	ldd	r25, Z+3	; 0x03
    1c60:	20 e0       	ldi	r18, 0x00	; 0
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	4a e7       	ldi	r20, 0x7A	; 122
    1c66:	55 e4       	ldi	r21, 0x45	; 69
    1c68:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	cb 01       	movw	r24, r22
    1c70:	f8 01       	movw	r30, r16
    1c72:	80 83       	st	Z, r24
    1c74:	91 83       	std	Z+1, r25	; 0x01
    1c76:	a2 83       	std	Z+2, r26	; 0x02
    1c78:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	8f 55       	subi	r24, 0x5F	; 95
    1c7e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c80:	11 e0       	ldi	r17, 0x01	; 1
    1c82:	fc 01       	movw	r30, r24
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	0c f0       	brlt	.+2      	; 0x1c9e <LCDBusyLoop+0xfce>
    1c9c:	10 e0       	ldi	r17, 0x00	; 0
    1c9e:	11 23       	and	r17, r17
    1ca0:	49 f0       	breq	.+18     	; 0x1cb4 <LCDBusyLoop+0xfe4>
		__ticks = 1;
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	8b 55       	subi	r24, 0x5B	; 91
    1ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca8:	21 e0       	ldi	r18, 0x01	; 1
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	fc 01       	movw	r30, r24
    1cae:	31 83       	std	Z+1, r19	; 0x01
    1cb0:	20 83       	st	Z, r18
    1cb2:	74 c0       	rjmp	.+232    	; 0x1d9c <LCDBusyLoop+0x10cc>
	else if (__tmp > 65535)
    1cb4:	ce 01       	movw	r24, r28
    1cb6:	8f 55       	subi	r24, 0x5F	; 95
    1cb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cba:	11 e0       	ldi	r17, 0x01	; 1
    1cbc:	fc 01       	movw	r30, r24
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	0c f0       	brlt	.+2      	; 0x1cd8 <LCDBusyLoop+0x1008>
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	11 23       	and	r17, r17
    1cda:	09 f4       	brne	.+2      	; 0x1cde <LCDBusyLoop+0x100e>
    1cdc:	4d c0       	rjmp	.+154    	; 0x1d78 <LCDBusyLoop+0x10a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cde:	ce 01       	movw	r24, r28
    1ce0:	83 56       	subi	r24, 0x63	; 99
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	fc 01       	movw	r30, r24
    1ce6:	60 81       	ld	r22, Z
    1ce8:	71 81       	ldd	r23, Z+1	; 0x01
    1cea:	82 81       	ldd	r24, Z+2	; 0x02
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e2       	ldi	r20, 0x20	; 32
    1cf4:	51 e4       	ldi	r21, 0x41	; 65
    1cf6:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8e 01       	movw	r16, r28
    1d00:	0b 55       	subi	r16, 0x5B	; 91
    1d02:	1f 4f       	sbci	r17, 0xFF	; 255
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	f8 01       	movw	r30, r16
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	80 83       	st	Z, r24
    1d16:	27 c0       	rjmp	.+78     	; 0x1d66 <LCDBusyLoop+0x1096>
    1d18:	ce 01       	movw	r24, r28
    1d1a:	89 55       	subi	r24, 0x59	; 89
    1d1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1e:	20 e9       	ldi	r18, 0x90	; 144
    1d20:	31 e0       	ldi	r19, 0x01	; 1
    1d22:	fc 01       	movw	r30, r24
    1d24:	31 83       	std	Z+1, r19	; 0x01
    1d26:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d28:	ce 01       	movw	r24, r28
    1d2a:	89 55       	subi	r24, 0x59	; 89
    1d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1d2e:	fc 01       	movw	r30, r24
    1d30:	80 81       	ld	r24, Z
    1d32:	91 81       	ldd	r25, Z+1	; 0x01
    1d34:	8c 01       	movw	r16, r24
    1d36:	c8 01       	movw	r24, r16
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCDBusyLoop+0x1068>
    1d3c:	8c 01       	movw	r16, r24
    1d3e:	ce 01       	movw	r24, r28
    1d40:	89 55       	subi	r24, 0x59	; 89
    1d42:	9f 4f       	sbci	r25, 0xFF	; 255
    1d44:	fc 01       	movw	r30, r24
    1d46:	11 83       	std	Z+1, r17	; 0x01
    1d48:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	8b 55       	subi	r24, 0x5B	; 91
    1d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d50:	9e 01       	movw	r18, r28
    1d52:	2b 55       	subi	r18, 0x5B	; 91
    1d54:	3f 4f       	sbci	r19, 0xFF	; 255
    1d56:	f9 01       	movw	r30, r18
    1d58:	20 81       	ld	r18, Z
    1d5a:	31 81       	ldd	r19, Z+1	; 0x01
    1d5c:	21 50       	subi	r18, 0x01	; 1
    1d5e:	30 40       	sbci	r19, 0x00	; 0
    1d60:	fc 01       	movw	r30, r24
    1d62:	31 83       	std	Z+1, r19	; 0x01
    1d64:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d66:	ce 01       	movw	r24, r28
    1d68:	8b 55       	subi	r24, 0x5B	; 91
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	80 81       	ld	r24, Z
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	89 f6       	brne	.-94     	; 0x1d18 <LCDBusyLoop+0x1048>
    1d76:	58 c0       	rjmp	.+176    	; 0x1e28 <LCDBusyLoop+0x1158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d78:	8e 01       	movw	r16, r28
    1d7a:	0b 55       	subi	r16, 0x5B	; 91
    1d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d7e:	ce 01       	movw	r24, r28
    1d80:	8f 55       	subi	r24, 0x5F	; 95
    1d82:	9f 4f       	sbci	r25, 0xFF	; 255
    1d84:	fc 01       	movw	r30, r24
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	87 55       	subi	r24, 0x57	; 87
    1da0:	9f 4f       	sbci	r25, 0xFF	; 255
    1da2:	9e 01       	movw	r18, r28
    1da4:	2b 55       	subi	r18, 0x5B	; 91
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	f9 01       	movw	r30, r18
    1daa:	20 81       	ld	r18, Z
    1dac:	31 81       	ldd	r19, Z+1	; 0x01
    1dae:	fc 01       	movw	r30, r24
    1db0:	31 83       	std	Z+1, r19	; 0x01
    1db2:	20 83       	st	Z, r18
    1db4:	ce 01       	movw	r24, r28
    1db6:	87 55       	subi	r24, 0x57	; 87
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	fc 01       	movw	r30, r24
    1dbc:	80 81       	ld	r24, Z
    1dbe:	91 81       	ldd	r25, Z+1	; 0x01
    1dc0:	8c 01       	movw	r16, r24
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCDBusyLoop+0x10f4>
    1dc8:	8c 01       	movw	r16, r24
    1dca:	ce 01       	movw	r24, r28
    1dcc:	87 55       	subi	r24, 0x57	; 87
    1dce:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	11 83       	std	Z+1, r17	; 0x01
    1dd4:	00 83       	st	Z, r16
    1dd6:	28 c0       	rjmp	.+80     	; 0x1e28 <LCDBusyLoop+0x1158>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	04 56       	subi	r16, 0x64	; 100
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	ce 01       	movw	r24, r28
    1de0:	88 56       	subi	r24, 0x68	; 104
    1de2:	9f 4f       	sbci	r25, 0xFF	; 255
    1de4:	fc 01       	movw	r30, r24
    1de6:	60 81       	ld	r22, Z
    1de8:	71 81       	ldd	r23, Z+1	; 0x01
    1dea:	82 81       	ldd	r24, Z+2	; 0x02
    1dec:	93 81       	ldd	r25, Z+3	; 0x03
    1dee:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1df2:	dc 01       	movw	r26, r24
    1df4:	cb 01       	movw	r24, r22
    1df6:	f8 01       	movw	r30, r16
    1df8:	80 83       	st	Z, r24
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	85 55       	subi	r24, 0x55	; 85
    1dfe:	9f 4f       	sbci	r25, 0xFF	; 255
    1e00:	9e 01       	movw	r18, r28
    1e02:	24 56       	subi	r18, 0x64	; 100
    1e04:	3f 4f       	sbci	r19, 0xFF	; 255
    1e06:	f9 01       	movw	r30, r18
    1e08:	20 81       	ld	r18, Z
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e0e:	ce 01       	movw	r24, r28
    1e10:	85 55       	subi	r24, 0x55	; 85
    1e12:	9f 4f       	sbci	r25, 0xFF	; 255
    1e14:	fc 01       	movw	r30, r24
    1e16:	80 81       	ld	r24, Z
    1e18:	18 2f       	mov	r17, r24
    1e1a:	1a 95       	dec	r17
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCDBusyLoop+0x114a>
    1e1e:	ce 01       	movw	r24, r28
    1e20:	85 55       	subi	r24, 0x55	; 85
    1e22:	9f 4f       	sbci	r25, 0xFF	; 255
    1e24:	fc 01       	movw	r30, r24
    1e26:	10 83       	st	Z, r17
		_delay_us(1);	//tEL
	}while(busy);
    1e28:	8b 81       	ldd	r24, Y+3	; 0x03
    1e2a:	88 23       	and	r24, r24
    1e2c:	09 f0       	breq	.+2      	; 0x1e30 <LCDBusyLoop+0x1160>
    1e2e:	4e c8       	rjmp	.-3940   	; 0xecc <LCDBusyLoop+0x1fc>

	CLEAR_RW();		//write mode
    1e30:	82 e3       	ldi	r24, 0x32	; 50
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	22 e3       	ldi	r18, 0x32	; 50
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	f9 01       	movw	r30, r18
    1e3a:	20 81       	ld	r18, Z
    1e3c:	2f 7b       	andi	r18, 0xBF	; 191
    1e3e:	fc 01       	movw	r30, r24
    1e40:	20 83       	st	Z, r18
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    1e42:	87 e3       	ldi	r24, 0x37	; 55
    1e44:	90 e0       	ldi	r25, 0x00	; 0
    1e46:	27 e3       	ldi	r18, 0x37	; 55
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	f9 01       	movw	r30, r18
    1e4c:	20 81       	ld	r18, Z
    1e4e:	2f 60       	ori	r18, 0x0F	; 15
    1e50:	fc 01       	movw	r30, r24
    1e52:	20 83       	st	Z, r18

}
    1e54:	c5 55       	subi	r28, 0x55	; 85
    1e56:	df 4f       	sbci	r29, 0xFF	; 255
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	1f 91       	pop	r17
    1e68:	0f 91       	pop	r16
    1e6a:	08 95       	ret

00001e6c <LCDInit>:

void LCDInit(uint8_t style)
{
    1e6c:	0f 93       	push	r16
    1e6e:	1f 93       	push	r17
    1e70:	df 93       	push	r29
    1e72:	cf 93       	push	r28
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	c8 55       	subi	r28, 0x58	; 88
    1e7a:	d0 40       	sbci	r29, 0x00	; 0
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	9e 01       	movw	r18, r28
    1e88:	28 5a       	subi	r18, 0xA8	; 168
    1e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8c:	f9 01       	movw	r30, r18
    1e8e:	80 83       	st	Z, r24
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	a0 ef       	ldi	r26, 0xF0	; 240
    1e96:	b1 e4       	ldi	r27, 0x41	; 65
    1e98:	8a 83       	std	Y+2, r24	; 0x02
    1e9a:	9b 83       	std	Y+3, r25	; 0x03
    1e9c:	ac 83       	std	Y+4, r26	; 0x04
    1e9e:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ea0:	6a 81       	ldd	r22, Y+2	; 0x02
    1ea2:	7b 81       	ldd	r23, Y+3	; 0x03
    1ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a e7       	ldi	r20, 0x7A	; 122
    1eae:	55 e4       	ldi	r21, 0x45	; 69
    1eb0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8e 83       	std	Y+6, r24	; 0x06
    1eba:	9f 83       	std	Y+7, r25	; 0x07
    1ebc:	a8 87       	std	Y+8, r26	; 0x08
    1ebe:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    1ec0:	11 e0       	ldi	r17, 0x01	; 1
    1ec2:	6e 81       	ldd	r22, Y+6	; 0x06
    1ec4:	7f 81       	ldd	r23, Y+7	; 0x07
    1ec6:	88 85       	ldd	r24, Y+8	; 0x08
    1ec8:	99 85       	ldd	r25, Y+9	; 0x09
    1eca:	20 e0       	ldi	r18, 0x00	; 0
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	40 e8       	ldi	r20, 0x80	; 128
    1ed0:	5f e3       	ldi	r21, 0x3F	; 63
    1ed2:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	0c f0       	brlt	.+2      	; 0x1edc <LCDInit+0x70>
    1eda:	10 e0       	ldi	r17, 0x00	; 0
    1edc:	11 23       	and	r17, r17
    1ede:	29 f0       	breq	.+10     	; 0x1eea <LCDInit+0x7e>
		__ticks = 1;
    1ee0:	81 e0       	ldi	r24, 0x01	; 1
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	9b 87       	std	Y+11, r25	; 0x0b
    1ee6:	8a 87       	std	Y+10, r24	; 0x0a
    1ee8:	46 c0       	rjmp	.+140    	; 0x1f76 <LCDInit+0x10a>
	else if (__tmp > 65535)
    1eea:	11 e0       	ldi	r17, 0x01	; 1
    1eec:	6e 81       	ldd	r22, Y+6	; 0x06
    1eee:	7f 81       	ldd	r23, Y+7	; 0x07
    1ef0:	88 85       	ldd	r24, Y+8	; 0x08
    1ef2:	99 85       	ldd	r25, Y+9	; 0x09
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	3f ef       	ldi	r19, 0xFF	; 255
    1ef8:	4f e7       	ldi	r20, 0x7F	; 127
    1efa:	57 e4       	ldi	r21, 0x47	; 71
    1efc:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	0c f0       	brlt	.+2      	; 0x1f06 <LCDInit+0x9a>
    1f04:	10 e0       	ldi	r17, 0x00	; 0
    1f06:	11 23       	and	r17, r17
    1f08:	61 f1       	breq	.+88     	; 0x1f62 <LCDInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0a:	6a 81       	ldd	r22, Y+2	; 0x02
    1f0c:	7b 81       	ldd	r23, Y+3	; 0x03
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	9d 81       	ldd	r25, Y+5	; 0x05
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e0       	ldi	r19, 0x00	; 0
    1f16:	40 e2       	ldi	r20, 0x20	; 32
    1f18:	51 e4       	ldi	r21, 0x41	; 65
    1f1a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	9b 87       	std	Y+11, r25	; 0x0b
    1f30:	8a 87       	std	Y+10, r24	; 0x0a
    1f32:	12 c0       	rjmp	.+36     	; 0x1f58 <LCDInit+0xec>
    1f34:	80 e9       	ldi	r24, 0x90	; 144
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	9d 87       	std	Y+13, r25	; 0x0d
    1f3a:	8c 87       	std	Y+12, r24	; 0x0c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f40:	8c 01       	movw	r16, r24
    1f42:	c8 01       	movw	r24, r16
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCDInit+0xd8>
    1f48:	8c 01       	movw	r16, r24
    1f4a:	1d 87       	std	Y+13, r17	; 0x0d
    1f4c:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f50:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9b 87       	std	Y+11, r25	; 0x0b
    1f56:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f5a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	51 f7       	brne	.-44     	; 0x1f34 <LCDInit+0xc8>
    1f60:	17 c0       	rjmp	.+46     	; 0x1f90 <LCDInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	6e 81       	ldd	r22, Y+6	; 0x06
    1f64:	7f 81       	ldd	r23, Y+7	; 0x07
    1f66:	88 85       	ldd	r24, Y+8	; 0x08
    1f68:	99 85       	ldd	r25, Y+9	; 0x09
    1f6a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9b 87       	std	Y+11, r25	; 0x0b
    1f74:	8a 87       	std	Y+10, r24	; 0x0a
    1f76:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f78:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f7a:	9f 87       	std	Y+15, r25	; 0x0f
    1f7c:	8e 87       	std	Y+14, r24	; 0x0e
    1f7e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f80:	9f 85       	ldd	r25, Y+15	; 0x0f
    1f82:	8c 01       	movw	r16, r24
    1f84:	f8 01       	movw	r30, r16
    1f86:	31 97       	sbiw	r30, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCDInit+0x11a>
    1f8a:	8f 01       	movw	r16, r30
    1f8c:	1f 87       	std	Y+15, r17	; 0x0f
    1f8e:	0e 87       	std	Y+14, r16	; 0x0e
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
    1f90:	87 e3       	ldi	r24, 0x37	; 55
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	27 e3       	ldi	r18, 0x37	; 55
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	f9 01       	movw	r30, r18
    1f9a:	20 81       	ld	r18, Z
    1f9c:	2f 60       	ori	r18, 0x0F	; 15
    1f9e:	fc 01       	movw	r30, r24
    1fa0:	20 83       	st	Z, r18
	LCD_E_DDR|=(1<<LCD_E_POS);
    1fa2:	87 e3       	ldi	r24, 0x37	; 55
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	27 e3       	ldi	r18, 0x37	; 55
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	f9 01       	movw	r30, r18
    1fac:	20 81       	ld	r18, Z
    1fae:	20 61       	ori	r18, 0x10	; 16
    1fb0:	fc 01       	movw	r30, r24
    1fb2:	20 83       	st	Z, r18
	LCD_RS_DDR|=(1<<LCD_RS_POS);
    1fb4:	81 e3       	ldi	r24, 0x31	; 49
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	21 e3       	ldi	r18, 0x31	; 49
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	20 81       	ld	r18, Z
    1fc0:	28 60       	ori	r18, 0x08	; 8
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	20 83       	st	Z, r18
	LCD_RW_DDR|=(1<<LCD_RW_POS);
    1fc6:	81 e3       	ldi	r24, 0x31	; 49
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	21 e3       	ldi	r18, 0x31	; 49
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	f9 01       	movw	r30, r18
    1fd0:	20 81       	ld	r18, Z
    1fd2:	20 64       	ori	r18, 0x40	; 64
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	20 83       	st	Z, r18

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
    1fd8:	88 e3       	ldi	r24, 0x38	; 56
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	28 e3       	ldi	r18, 0x38	; 56
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	f9 01       	movw	r30, r18
    1fe2:	20 81       	ld	r18, Z
    1fe4:	20 7f       	andi	r18, 0xF0	; 240
    1fe6:	fc 01       	movw	r30, r24
    1fe8:	20 83       	st	Z, r18
	CLEAR_E();
    1fea:	88 e3       	ldi	r24, 0x38	; 56
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	28 e3       	ldi	r18, 0x38	; 56
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	f9 01       	movw	r30, r18
    1ff4:	20 81       	ld	r18, Z
    1ff6:	2f 7e       	andi	r18, 0xEF	; 239
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	20 83       	st	Z, r18
	CLEAR_RW();
    1ffc:	82 e3       	ldi	r24, 0x32	; 50
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	22 e3       	ldi	r18, 0x32	; 50
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	f9 01       	movw	r30, r18
    2006:	20 81       	ld	r18, Z
    2008:	2f 7b       	andi	r18, 0xBF	; 191
    200a:	fc 01       	movw	r30, r24
    200c:	20 83       	st	Z, r18
	CLEAR_RS();
    200e:	82 e3       	ldi	r24, 0x32	; 50
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	22 e3       	ldi	r18, 0x32	; 50
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	f9 01       	movw	r30, r18
    2018:	20 81       	ld	r18, Z
    201a:	27 7f       	andi	r18, 0xF7	; 247
    201c:	fc 01       	movw	r30, r24
    201e:	20 83       	st	Z, r18
    2020:	8a e9       	ldi	r24, 0x9A	; 154
    2022:	99 e9       	ldi	r25, 0x99	; 153
    2024:	a9 e9       	ldi	r26, 0x99	; 153
    2026:	be e3       	ldi	r27, 0x3E	; 62
    2028:	88 8b       	std	Y+16, r24	; 0x10
    202a:	99 8b       	std	Y+17, r25	; 0x11
    202c:	aa 8b       	std	Y+18, r26	; 0x12
    202e:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    2030:	68 89       	ldd	r22, Y+16	; 0x10
    2032:	79 89       	ldd	r23, Y+17	; 0x11
    2034:	8a 89       	ldd	r24, Y+18	; 0x12
    2036:	9b 89       	ldd	r25, Y+19	; 0x13
    2038:	2b ea       	ldi	r18, 0xAB	; 171
    203a:	3a ea       	ldi	r19, 0xAA	; 170
    203c:	4a ea       	ldi	r20, 0xAA	; 170
    203e:	50 e4       	ldi	r21, 0x40	; 64
    2040:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	8c 8b       	std	Y+20, r24	; 0x14
    204a:	9d 8b       	std	Y+21, r25	; 0x15
    204c:	ae 8b       	std	Y+22, r26	; 0x16
    204e:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
    2050:	11 e0       	ldi	r17, 0x01	; 1
    2052:	6c 89       	ldd	r22, Y+20	; 0x14
    2054:	7d 89       	ldd	r23, Y+21	; 0x15
    2056:	8e 89       	ldd	r24, Y+22	; 0x16
    2058:	9f 89       	ldd	r25, Y+23	; 0x17
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e8       	ldi	r20, 0x80	; 128
    2060:	5f e3       	ldi	r21, 0x3F	; 63
    2062:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    2066:	88 23       	and	r24, r24
    2068:	0c f0       	brlt	.+2      	; 0x206c <LCDInit+0x200>
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	11 23       	and	r17, r17
    206e:	19 f0       	breq	.+6      	; 0x2076 <LCDInit+0x20a>
		__ticks = 1;
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	88 8f       	std	Y+24, r24	; 0x18
    2074:	a3 c0       	rjmp	.+326    	; 0x21bc <LCDInit+0x350>
	else if (__tmp > 255)
    2076:	11 e0       	ldi	r17, 0x01	; 1
    2078:	6c 89       	ldd	r22, Y+20	; 0x14
    207a:	7d 89       	ldd	r23, Y+21	; 0x15
    207c:	8e 89       	ldd	r24, Y+22	; 0x16
    207e:	9f 89       	ldd	r25, Y+23	; 0x17
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	0c f0       	brlt	.+2      	; 0x2092 <LCDInit+0x226>
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	11 23       	and	r17, r17
    2094:	09 f4       	brne	.+2      	; 0x2098 <LCDInit+0x22c>
    2096:	89 c0       	rjmp	.+274    	; 0x21aa <LCDInit+0x33e>
	{
		_delay_ms(__us / 1000.0);
    2098:	68 89       	ldd	r22, Y+16	; 0x10
    209a:	79 89       	ldd	r23, Y+17	; 0x11
    209c:	8a 89       	ldd	r24, Y+18	; 0x12
    209e:	9b 89       	ldd	r25, Y+19	; 0x13
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	4a e7       	ldi	r20, 0x7A	; 122
    20a6:	54 e4       	ldi	r21, 0x44	; 68
    20a8:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	89 8f       	std	Y+25, r24	; 0x19
    20b2:	9a 8f       	std	Y+26, r25	; 0x1a
    20b4:	ab 8f       	std	Y+27, r26	; 0x1b
    20b6:	bc 8f       	std	Y+28, r27	; 0x1c
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    20b8:	69 8d       	ldd	r22, Y+25	; 0x19
    20ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	4a e7       	ldi	r20, 0x7A	; 122
    20c6:	55 e4       	ldi	r21, 0x45	; 69
    20c8:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    20cc:	dc 01       	movw	r26, r24
    20ce:	cb 01       	movw	r24, r22
    20d0:	8d 8f       	std	Y+29, r24	; 0x1d
    20d2:	9e 8f       	std	Y+30, r25	; 0x1e
    20d4:	af 8f       	std	Y+31, r26	; 0x1f
    20d6:	b8 a3       	std	Y+32, r27	; 0x20
	if (__tmp < 1.0)
    20d8:	11 e0       	ldi	r17, 0x01	; 1
    20da:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20dc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    20de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e0:	98 a1       	ldd	r25, Y+32	; 0x20
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	40 e8       	ldi	r20, 0x80	; 128
    20e8:	5f e3       	ldi	r21, 0x3F	; 63
    20ea:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    20ee:	88 23       	and	r24, r24
    20f0:	0c f0       	brlt	.+2      	; 0x20f4 <LCDInit+0x288>
    20f2:	10 e0       	ldi	r17, 0x00	; 0
    20f4:	11 23       	and	r17, r17
    20f6:	29 f0       	breq	.+10     	; 0x2102 <LCDInit+0x296>
		__ticks = 1;
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	9a a3       	std	Y+34, r25	; 0x22
    20fe:	89 a3       	std	Y+33, r24	; 0x21
    2100:	46 c0       	rjmp	.+140    	; 0x218e <LCDInit+0x322>
	else if (__tmp > 65535)
    2102:	11 e0       	ldi	r17, 0x01	; 1
    2104:	6d 8d       	ldd	r22, Y+29	; 0x1d
    2106:	7e 8d       	ldd	r23, Y+30	; 0x1e
    2108:	8f 8d       	ldd	r24, Y+31	; 0x1f
    210a:	98 a1       	ldd	r25, Y+32	; 0x20
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	3f ef       	ldi	r19, 0xFF	; 255
    2110:	4f e7       	ldi	r20, 0x7F	; 127
    2112:	57 e4       	ldi	r21, 0x47	; 71
    2114:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    2118:	18 16       	cp	r1, r24
    211a:	0c f0       	brlt	.+2      	; 0x211e <LCDInit+0x2b2>
    211c:	10 e0       	ldi	r17, 0x00	; 0
    211e:	11 23       	and	r17, r17
    2120:	61 f1       	breq	.+88     	; 0x217a <LCDInit+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	40 e2       	ldi	r20, 0x20	; 32
    2130:	51 e4       	ldi	r21, 0x41	; 65
    2132:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	bc 01       	movw	r22, r24
    213c:	cd 01       	movw	r24, r26
    213e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	9a a3       	std	Y+34, r25	; 0x22
    2148:	89 a3       	std	Y+33, r24	; 0x21
    214a:	12 c0       	rjmp	.+36     	; 0x2170 <LCDInit+0x304>
    214c:	80 e9       	ldi	r24, 0x90	; 144
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	9c a3       	std	Y+36, r25	; 0x24
    2152:	8b a3       	std	Y+35, r24	; 0x23
    2154:	8b a1       	ldd	r24, Y+35	; 0x23
    2156:	9c a1       	ldd	r25, Y+36	; 0x24
    2158:	8c 01       	movw	r16, r24
    215a:	c8 01       	movw	r24, r16
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	f1 f7       	brne	.-4      	; 0x215c <LCDInit+0x2f0>
    2160:	8c 01       	movw	r16, r24
    2162:	1c a3       	std	Y+36, r17	; 0x24
    2164:	0b a3       	std	Y+35, r16	; 0x23
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	89 a1       	ldd	r24, Y+33	; 0x21
    2168:	9a a1       	ldd	r25, Y+34	; 0x22
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9a a3       	std	Y+34, r25	; 0x22
    216e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	89 a1       	ldd	r24, Y+33	; 0x21
    2172:	9a a1       	ldd	r25, Y+34	; 0x22
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	51 f7       	brne	.-44     	; 0x214c <LCDInit+0x2e0>
    2178:	28 c0       	rjmp	.+80     	; 0x21ca <LCDInit+0x35e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    217c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    217e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2180:	98 a1       	ldd	r25, Y+32	; 0x20
    2182:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9a a3       	std	Y+34, r25	; 0x22
    218c:	89 a3       	std	Y+33, r24	; 0x21
    218e:	89 a1       	ldd	r24, Y+33	; 0x21
    2190:	9a a1       	ldd	r25, Y+34	; 0x22
    2192:	9e a3       	std	Y+38, r25	; 0x26
    2194:	8d a3       	std	Y+37, r24	; 0x25
    2196:	8d a1       	ldd	r24, Y+37	; 0x25
    2198:	9e a1       	ldd	r25, Y+38	; 0x26
    219a:	8c 01       	movw	r16, r24
    219c:	f8 01       	movw	r30, r16
    219e:	31 97       	sbiw	r30, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCDInit+0x332>
    21a2:	8f 01       	movw	r16, r30
    21a4:	1e a3       	std	Y+38, r17	; 0x26
    21a6:	0d a3       	std	Y+37, r16	; 0x25
    21a8:	10 c0       	rjmp	.+32     	; 0x21ca <LCDInit+0x35e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21aa:	6c 89       	ldd	r22, Y+20	; 0x14
    21ac:	7d 89       	ldd	r23, Y+21	; 0x15
    21ae:	8e 89       	ldd	r24, Y+22	; 0x16
    21b0:	9f 89       	ldd	r25, Y+23	; 0x17
    21b2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	88 8f       	std	Y+24, r24	; 0x18
    21bc:	88 8d       	ldd	r24, Y+24	; 0x18
    21be:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21c0:	8f a1       	ldd	r24, Y+39	; 0x27
    21c2:	18 2f       	mov	r17, r24
    21c4:	1a 95       	dec	r17
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <LCDInit+0x358>
    21c8:	1f a3       	std	Y+39, r17	; 0x27

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
    21ca:	88 e3       	ldi	r24, 0x38	; 56
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	28 e3       	ldi	r18, 0x38	; 56
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	f9 01       	movw	r30, r18
    21d4:	20 81       	ld	r18, Z
    21d6:	20 61       	ori	r18, 0x10	; 16
    21d8:	fc 01       	movw	r30, r24
    21da:	20 83       	st	Z, r18
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
    21dc:	88 e3       	ldi	r24, 0x38	; 56
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	28 e3       	ldi	r18, 0x38	; 56
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	f9 01       	movw	r30, r18
    21e6:	20 81       	ld	r18, Z
    21e8:	22 60       	ori	r18, 0x02	; 2
    21ea:	fc 01       	movw	r30, r24
    21ec:	20 83       	st	Z, r18
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	a0 e8       	ldi	r26, 0x80	; 128
    21f4:	bf e3       	ldi	r27, 0x3F	; 63
    21f6:	88 a7       	std	Y+40, r24	; 0x28
    21f8:	99 a7       	std	Y+41, r25	; 0x29
    21fa:	aa a7       	std	Y+42, r26	; 0x2a
    21fc:	bb a7       	std	Y+43, r27	; 0x2b
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    21fe:	68 a5       	ldd	r22, Y+40	; 0x28
    2200:	79 a5       	ldd	r23, Y+41	; 0x29
    2202:	8a a5       	ldd	r24, Y+42	; 0x2a
    2204:	9b a5       	ldd	r25, Y+43	; 0x2b
    2206:	2b ea       	ldi	r18, 0xAB	; 171
    2208:	3a ea       	ldi	r19, 0xAA	; 170
    220a:	4a ea       	ldi	r20, 0xAA	; 170
    220c:	50 e4       	ldi	r21, 0x40	; 64
    220e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	8c a7       	std	Y+44, r24	; 0x2c
    2218:	9d a7       	std	Y+45, r25	; 0x2d
    221a:	ae a7       	std	Y+46, r26	; 0x2e
    221c:	bf a7       	std	Y+47, r27	; 0x2f
	if (__tmp < 1.0)
    221e:	11 e0       	ldi	r17, 0x01	; 1
    2220:	6c a5       	ldd	r22, Y+44	; 0x2c
    2222:	7d a5       	ldd	r23, Y+45	; 0x2d
    2224:	8e a5       	ldd	r24, Y+46	; 0x2e
    2226:	9f a5       	ldd	r25, Y+47	; 0x2f
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	40 e8       	ldi	r20, 0x80	; 128
    222e:	5f e3       	ldi	r21, 0x3F	; 63
    2230:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    2234:	88 23       	and	r24, r24
    2236:	0c f0       	brlt	.+2      	; 0x223a <LCDInit+0x3ce>
    2238:	10 e0       	ldi	r17, 0x00	; 0
    223a:	11 23       	and	r17, r17
    223c:	19 f0       	breq	.+6      	; 0x2244 <LCDInit+0x3d8>
		__ticks = 1;
    223e:	81 e0       	ldi	r24, 0x01	; 1
    2240:	88 ab       	std	Y+48, r24	; 0x30
    2242:	a3 c0       	rjmp	.+326    	; 0x238a <LCDInit+0x51e>
	else if (__tmp > 255)
    2244:	11 e0       	ldi	r17, 0x01	; 1
    2246:	6c a5       	ldd	r22, Y+44	; 0x2c
    2248:	7d a5       	ldd	r23, Y+45	; 0x2d
    224a:	8e a5       	ldd	r24, Y+46	; 0x2e
    224c:	9f a5       	ldd	r25, Y+47	; 0x2f
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	53 e4       	ldi	r21, 0x43	; 67
    2256:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	0c f0       	brlt	.+2      	; 0x2260 <LCDInit+0x3f4>
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	11 23       	and	r17, r17
    2262:	09 f4       	brne	.+2      	; 0x2266 <LCDInit+0x3fa>
    2264:	89 c0       	rjmp	.+274    	; 0x2378 <LCDInit+0x50c>
	{
		_delay_ms(__us / 1000.0);
    2266:	68 a5       	ldd	r22, Y+40	; 0x28
    2268:	79 a5       	ldd	r23, Y+41	; 0x29
    226a:	8a a5       	ldd	r24, Y+42	; 0x2a
    226c:	9b a5       	ldd	r25, Y+43	; 0x2b
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	4a e7       	ldi	r20, 0x7A	; 122
    2274:	54 e4       	ldi	r21, 0x44	; 68
    2276:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    227a:	dc 01       	movw	r26, r24
    227c:	cb 01       	movw	r24, r22
    227e:	89 ab       	std	Y+49, r24	; 0x31
    2280:	9a ab       	std	Y+50, r25	; 0x32
    2282:	ab ab       	std	Y+51, r26	; 0x33
    2284:	bc ab       	std	Y+52, r27	; 0x34
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2286:	69 a9       	ldd	r22, Y+49	; 0x31
    2288:	7a a9       	ldd	r23, Y+50	; 0x32
    228a:	8b a9       	ldd	r24, Y+51	; 0x33
    228c:	9c a9       	ldd	r25, Y+52	; 0x34
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	4a e7       	ldi	r20, 0x7A	; 122
    2294:	55 e4       	ldi	r21, 0x45	; 69
    2296:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	8d ab       	std	Y+53, r24	; 0x35
    22a0:	9e ab       	std	Y+54, r25	; 0x36
    22a2:	af ab       	std	Y+55, r26	; 0x37
    22a4:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
    22a6:	11 e0       	ldi	r17, 0x01	; 1
    22a8:	6d a9       	ldd	r22, Y+53	; 0x35
    22aa:	7e a9       	ldd	r23, Y+54	; 0x36
    22ac:	8f a9       	ldd	r24, Y+55	; 0x37
    22ae:	98 ad       	ldd	r25, Y+56	; 0x38
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	0c f0       	brlt	.+2      	; 0x22c2 <LCDInit+0x456>
    22c0:	10 e0       	ldi	r17, 0x00	; 0
    22c2:	11 23       	and	r17, r17
    22c4:	29 f0       	breq	.+10     	; 0x22d0 <LCDInit+0x464>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	9a af       	std	Y+58, r25	; 0x3a
    22cc:	89 af       	std	Y+57, r24	; 0x39
    22ce:	46 c0       	rjmp	.+140    	; 0x235c <LCDInit+0x4f0>
	else if (__tmp > 65535)
    22d0:	11 e0       	ldi	r17, 0x01	; 1
    22d2:	6d a9       	ldd	r22, Y+53	; 0x35
    22d4:	7e a9       	ldd	r23, Y+54	; 0x36
    22d6:	8f a9       	ldd	r24, Y+55	; 0x37
    22d8:	98 ad       	ldd	r25, Y+56	; 0x38
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	0c f0       	brlt	.+2      	; 0x22ec <LCDInit+0x480>
    22ea:	10 e0       	ldi	r17, 0x00	; 0
    22ec:	11 23       	and	r17, r17
    22ee:	61 f1       	breq	.+88     	; 0x2348 <LCDInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	69 a9       	ldd	r22, Y+49	; 0x31
    22f2:	7a a9       	ldd	r23, Y+50	; 0x32
    22f4:	8b a9       	ldd	r24, Y+51	; 0x33
    22f6:	9c a9       	ldd	r25, Y+52	; 0x34
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	40 e2       	ldi	r20, 0x20	; 32
    22fe:	51 e4       	ldi	r21, 0x41	; 65
    2300:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2310:	dc 01       	movw	r26, r24
    2312:	cb 01       	movw	r24, r22
    2314:	9a af       	std	Y+58, r25	; 0x3a
    2316:	89 af       	std	Y+57, r24	; 0x39
    2318:	12 c0       	rjmp	.+36     	; 0x233e <LCDInit+0x4d2>
    231a:	80 e9       	ldi	r24, 0x90	; 144
    231c:	91 e0       	ldi	r25, 0x01	; 1
    231e:	9c af       	std	Y+60, r25	; 0x3c
    2320:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2322:	8b ad       	ldd	r24, Y+59	; 0x3b
    2324:	9c ad       	ldd	r25, Y+60	; 0x3c
    2326:	8c 01       	movw	r16, r24
    2328:	c8 01       	movw	r24, r16
    232a:	01 97       	sbiw	r24, 0x01	; 1
    232c:	f1 f7       	brne	.-4      	; 0x232a <LCDInit+0x4be>
    232e:	8c 01       	movw	r16, r24
    2330:	1c af       	std	Y+60, r17	; 0x3c
    2332:	0b af       	std	Y+59, r16	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	89 ad       	ldd	r24, Y+57	; 0x39
    2336:	9a ad       	ldd	r25, Y+58	; 0x3a
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	9a af       	std	Y+58, r25	; 0x3a
    233c:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	89 ad       	ldd	r24, Y+57	; 0x39
    2340:	9a ad       	ldd	r25, Y+58	; 0x3a
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	51 f7       	brne	.-44     	; 0x231a <LCDInit+0x4ae>
    2346:	28 c0       	rjmp	.+80     	; 0x2398 <LCDInit+0x52c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	6d a9       	ldd	r22, Y+53	; 0x35
    234a:	7e a9       	ldd	r23, Y+54	; 0x36
    234c:	8f a9       	ldd	r24, Y+55	; 0x37
    234e:	98 ad       	ldd	r25, Y+56	; 0x38
    2350:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	9a af       	std	Y+58, r25	; 0x3a
    235a:	89 af       	std	Y+57, r24	; 0x39
    235c:	89 ad       	ldd	r24, Y+57	; 0x39
    235e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2360:	9e af       	std	Y+62, r25	; 0x3e
    2362:	8d af       	std	Y+61, r24	; 0x3d
    2364:	8d ad       	ldd	r24, Y+61	; 0x3d
    2366:	9e ad       	ldd	r25, Y+62	; 0x3e
    2368:	8c 01       	movw	r16, r24
    236a:	f8 01       	movw	r30, r16
    236c:	31 97       	sbiw	r30, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCDInit+0x500>
    2370:	8f 01       	movw	r16, r30
    2372:	1e af       	std	Y+62, r17	; 0x3e
    2374:	0d af       	std	Y+61, r16	; 0x3d
    2376:	10 c0       	rjmp	.+32     	; 0x2398 <LCDInit+0x52c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2378:	6c a5       	ldd	r22, Y+44	; 0x2c
    237a:	7d a5       	ldd	r23, Y+45	; 0x2d
    237c:	8e a5       	ldd	r24, Y+46	; 0x2e
    237e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2380:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	88 ab       	std	Y+48, r24	; 0x30
    238a:	88 a9       	ldd	r24, Y+48	; 0x30
    238c:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    238e:	8f ad       	ldd	r24, Y+63	; 0x3f
    2390:	18 2f       	mov	r17, r24
    2392:	1a 95       	dec	r17
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCDInit+0x526>
    2396:	1f af       	std	Y+63, r17	; 0x3f
	_delay_us(1);
	CLEAR_E();
    2398:	88 e3       	ldi	r24, 0x38	; 56
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	28 e3       	ldi	r18, 0x38	; 56
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	f9 01       	movw	r30, r18
    23a2:	20 81       	ld	r18, Z
    23a4:	2f 7e       	andi	r18, 0xEF	; 239
    23a6:	fc 01       	movw	r30, r24
    23a8:	20 83       	st	Z, r18
    23aa:	9e 01       	movw	r18, r28
    23ac:	20 5c       	subi	r18, 0xC0	; 192
    23ae:	3f 4f       	sbci	r19, 0xFF	; 255
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	a0 e8       	ldi	r26, 0x80	; 128
    23b6:	bf e3       	ldi	r27, 0x3F	; 63
    23b8:	f9 01       	movw	r30, r18
    23ba:	80 83       	st	Z, r24
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	a2 83       	std	Z+2, r26	; 0x02
    23c0:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 3e6) * __us;
    23c2:	8e 01       	movw	r16, r28
    23c4:	0c 5b       	subi	r16, 0xBC	; 188
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	ce 01       	movw	r24, r28
    23ca:	80 5c       	subi	r24, 0xC0	; 192
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	fc 01       	movw	r30, r24
    23d0:	60 81       	ld	r22, Z
    23d2:	71 81       	ldd	r23, Z+1	; 0x01
    23d4:	82 81       	ldd	r24, Z+2	; 0x02
    23d6:	93 81       	ldd	r25, Z+3	; 0x03
    23d8:	2b ea       	ldi	r18, 0xAB	; 171
    23da:	3a ea       	ldi	r19, 0xAA	; 170
    23dc:	4a ea       	ldi	r20, 0xAA	; 170
    23de:	50 e4       	ldi	r21, 0x40	; 64
    23e0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	f8 01       	movw	r30, r16
    23ea:	80 83       	st	Z, r24
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	a2 83       	std	Z+2, r26	; 0x02
    23f0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f2:	ce 01       	movw	r24, r28
    23f4:	8c 5b       	subi	r24, 0xBC	; 188
    23f6:	9f 4f       	sbci	r25, 0xFF	; 255
    23f8:	11 e0       	ldi	r17, 0x01	; 1
    23fa:	fc 01       	movw	r30, r24
    23fc:	60 81       	ld	r22, Z
    23fe:	71 81       	ldd	r23, Z+1	; 0x01
    2400:	82 81       	ldd	r24, Z+2	; 0x02
    2402:	93 81       	ldd	r25, Z+3	; 0x03
    2404:	20 e0       	ldi	r18, 0x00	; 0
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	40 e8       	ldi	r20, 0x80	; 128
    240a:	5f e3       	ldi	r21, 0x3F	; 63
    240c:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    2410:	88 23       	and	r24, r24
    2412:	0c f0       	brlt	.+2      	; 0x2416 <LCDInit+0x5aa>
    2414:	10 e0       	ldi	r17, 0x00	; 0
    2416:	11 23       	and	r17, r17
    2418:	39 f0       	breq	.+14     	; 0x2428 <LCDInit+0x5bc>
		__ticks = 1;
    241a:	ce 01       	movw	r24, r28
    241c:	88 5b       	subi	r24, 0xB8	; 184
    241e:	9f 4f       	sbci	r25, 0xFF	; 255
    2420:	21 e0       	ldi	r18, 0x01	; 1
    2422:	fc 01       	movw	r30, r24
    2424:	20 83       	st	Z, r18
    2426:	05 c1       	rjmp	.+522    	; 0x2632 <LCDInit+0x7c6>
	else if (__tmp > 255)
    2428:	ce 01       	movw	r24, r28
    242a:	8c 5b       	subi	r24, 0xBC	; 188
    242c:	9f 4f       	sbci	r25, 0xFF	; 255
    242e:	11 e0       	ldi	r17, 0x01	; 1
    2430:	fc 01       	movw	r30, r24
    2432:	60 81       	ld	r22, Z
    2434:	71 81       	ldd	r23, Z+1	; 0x01
    2436:	82 81       	ldd	r24, Z+2	; 0x02
    2438:	93 81       	ldd	r25, Z+3	; 0x03
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4f e7       	ldi	r20, 0x7F	; 127
    2440:	53 e4       	ldi	r21, 0x43	; 67
    2442:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    2446:	18 16       	cp	r1, r24
    2448:	0c f0       	brlt	.+2      	; 0x244c <LCDInit+0x5e0>
    244a:	10 e0       	ldi	r17, 0x00	; 0
    244c:	11 23       	and	r17, r17
    244e:	09 f4       	brne	.+2      	; 0x2452 <LCDInit+0x5e6>
    2450:	df c0       	rjmp	.+446    	; 0x2610 <LCDInit+0x7a4>
	{
		_delay_ms(__us / 1000.0);
    2452:	ce 01       	movw	r24, r28
    2454:	80 5c       	subi	r24, 0xC0	; 192
    2456:	9f 4f       	sbci	r25, 0xFF	; 255
    2458:	fc 01       	movw	r30, r24
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	20 e0       	ldi	r18, 0x00	; 0
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	4a e7       	ldi	r20, 0x7A	; 122
    2468:	54 e4       	ldi	r21, 0x44	; 68
    246a:	0e 94 29 27 	call	0x4e52	; 0x4e52 <__divsf3>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9e 01       	movw	r18, r28
    2474:	27 5b       	subi	r18, 0xB7	; 183
    2476:	3f 4f       	sbci	r19, 0xFF	; 255
    2478:	f9 01       	movw	r30, r18
    247a:	80 83       	st	Z, r24
    247c:	91 83       	std	Z+1, r25	; 0x01
    247e:	a2 83       	std	Z+2, r26	; 0x02
    2480:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2482:	8e 01       	movw	r16, r28
    2484:	03 5b       	subi	r16, 0xB3	; 179
    2486:	1f 4f       	sbci	r17, 0xFF	; 255
    2488:	ce 01       	movw	r24, r28
    248a:	87 5b       	subi	r24, 0xB7	; 183
    248c:	9f 4f       	sbci	r25, 0xFF	; 255
    248e:	fc 01       	movw	r30, r24
    2490:	60 81       	ld	r22, Z
    2492:	71 81       	ldd	r23, Z+1	; 0x01
    2494:	82 81       	ldd	r24, Z+2	; 0x02
    2496:	93 81       	ldd	r25, Z+3	; 0x03
    2498:	20 e0       	ldi	r18, 0x00	; 0
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	4a e7       	ldi	r20, 0x7A	; 122
    249e:	55 e4       	ldi	r21, 0x45	; 69
    24a0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	f8 01       	movw	r30, r16
    24aa:	80 83       	st	Z, r24
    24ac:	91 83       	std	Z+1, r25	; 0x01
    24ae:	a2 83       	std	Z+2, r26	; 0x02
    24b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24b2:	ce 01       	movw	r24, r28
    24b4:	83 5b       	subi	r24, 0xB3	; 179
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	11 e0       	ldi	r17, 0x01	; 1
    24ba:	fc 01       	movw	r30, r24
    24bc:	60 81       	ld	r22, Z
    24be:	71 81       	ldd	r23, Z+1	; 0x01
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	20 e0       	ldi	r18, 0x00	; 0
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	40 e8       	ldi	r20, 0x80	; 128
    24ca:	5f e3       	ldi	r21, 0x3F	; 63
    24cc:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    24d0:	88 23       	and	r24, r24
    24d2:	0c f0       	brlt	.+2      	; 0x24d6 <LCDInit+0x66a>
    24d4:	10 e0       	ldi	r17, 0x00	; 0
    24d6:	11 23       	and	r17, r17
    24d8:	49 f0       	breq	.+18     	; 0x24ec <LCDInit+0x680>
		__ticks = 1;
    24da:	ce 01       	movw	r24, r28
    24dc:	8f 5a       	subi	r24, 0xAF	; 175
    24de:	9f 4f       	sbci	r25, 0xFF	; 255
    24e0:	21 e0       	ldi	r18, 0x01	; 1
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	fc 01       	movw	r30, r24
    24e6:	31 83       	std	Z+1, r19	; 0x01
    24e8:	20 83       	st	Z, r18
    24ea:	74 c0       	rjmp	.+232    	; 0x25d4 <LCDInit+0x768>
	else if (__tmp > 65535)
    24ec:	ce 01       	movw	r24, r28
    24ee:	83 5b       	subi	r24, 0xB3	; 179
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	11 e0       	ldi	r17, 0x01	; 1
    24f4:	fc 01       	movw	r30, r24
    24f6:	60 81       	ld	r22, Z
    24f8:	71 81       	ldd	r23, Z+1	; 0x01
    24fa:	82 81       	ldd	r24, Z+2	; 0x02
    24fc:	93 81       	ldd	r25, Z+3	; 0x03
    24fe:	20 e0       	ldi	r18, 0x00	; 0
    2500:	3f ef       	ldi	r19, 0xFF	; 255
    2502:	4f e7       	ldi	r20, 0x7F	; 127
    2504:	57 e4       	ldi	r21, 0x47	; 71
    2506:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    250a:	18 16       	cp	r1, r24
    250c:	0c f0       	brlt	.+2      	; 0x2510 <LCDInit+0x6a4>
    250e:	10 e0       	ldi	r17, 0x00	; 0
    2510:	11 23       	and	r17, r17
    2512:	09 f4       	brne	.+2      	; 0x2516 <LCDInit+0x6aa>
    2514:	4d c0       	rjmp	.+154    	; 0x25b0 <LCDInit+0x744>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2516:	ce 01       	movw	r24, r28
    2518:	87 5b       	subi	r24, 0xB7	; 183
    251a:	9f 4f       	sbci	r25, 0xFF	; 255
    251c:	fc 01       	movw	r30, r24
    251e:	60 81       	ld	r22, Z
    2520:	71 81       	ldd	r23, Z+1	; 0x01
    2522:	82 81       	ldd	r24, Z+2	; 0x02
    2524:	93 81       	ldd	r25, Z+3	; 0x03
    2526:	20 e0       	ldi	r18, 0x00	; 0
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	40 e2       	ldi	r20, 0x20	; 32
    252c:	51 e4       	ldi	r21, 0x41	; 65
    252e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2532:	dc 01       	movw	r26, r24
    2534:	cb 01       	movw	r24, r22
    2536:	8e 01       	movw	r16, r28
    2538:	0f 5a       	subi	r16, 0xAF	; 175
    253a:	1f 4f       	sbci	r17, 0xFF	; 255
    253c:	bc 01       	movw	r22, r24
    253e:	cd 01       	movw	r24, r26
    2540:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2544:	dc 01       	movw	r26, r24
    2546:	cb 01       	movw	r24, r22
    2548:	f8 01       	movw	r30, r16
    254a:	91 83       	std	Z+1, r25	; 0x01
    254c:	80 83       	st	Z, r24
    254e:	27 c0       	rjmp	.+78     	; 0x259e <LCDInit+0x732>
    2550:	ce 01       	movw	r24, r28
    2552:	8d 5a       	subi	r24, 0xAD	; 173
    2554:	9f 4f       	sbci	r25, 0xFF	; 255
    2556:	20 e9       	ldi	r18, 0x90	; 144
    2558:	31 e0       	ldi	r19, 0x01	; 1
    255a:	fc 01       	movw	r30, r24
    255c:	31 83       	std	Z+1, r19	; 0x01
    255e:	20 83       	st	Z, r18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2560:	ce 01       	movw	r24, r28
    2562:	8d 5a       	subi	r24, 0xAD	; 173
    2564:	9f 4f       	sbci	r25, 0xFF	; 255
    2566:	fc 01       	movw	r30, r24
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	8c 01       	movw	r16, r24
    256e:	c8 01       	movw	r24, r16
    2570:	01 97       	sbiw	r24, 0x01	; 1
    2572:	f1 f7       	brne	.-4      	; 0x2570 <LCDInit+0x704>
    2574:	8c 01       	movw	r16, r24
    2576:	ce 01       	movw	r24, r28
    2578:	8d 5a       	subi	r24, 0xAD	; 173
    257a:	9f 4f       	sbci	r25, 0xFF	; 255
    257c:	fc 01       	movw	r30, r24
    257e:	11 83       	std	Z+1, r17	; 0x01
    2580:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2582:	ce 01       	movw	r24, r28
    2584:	8f 5a       	subi	r24, 0xAF	; 175
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	9e 01       	movw	r18, r28
    258a:	2f 5a       	subi	r18, 0xAF	; 175
    258c:	3f 4f       	sbci	r19, 0xFF	; 255
    258e:	f9 01       	movw	r30, r18
    2590:	20 81       	ld	r18, Z
    2592:	31 81       	ldd	r19, Z+1	; 0x01
    2594:	21 50       	subi	r18, 0x01	; 1
    2596:	30 40       	sbci	r19, 0x00	; 0
    2598:	fc 01       	movw	r30, r24
    259a:	31 83       	std	Z+1, r19	; 0x01
    259c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	ce 01       	movw	r24, r28
    25a0:	8f 5a       	subi	r24, 0xAF	; 175
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	fc 01       	movw	r30, r24
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	00 97       	sbiw	r24, 0x00	; 0
    25ac:	89 f6       	brne	.-94     	; 0x2550 <LCDInit+0x6e4>
    25ae:	58 c0       	rjmp	.+176    	; 0x2660 <LCDInit+0x7f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b0:	8e 01       	movw	r16, r28
    25b2:	0f 5a       	subi	r16, 0xAF	; 175
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	ce 01       	movw	r24, r28
    25b8:	83 5b       	subi	r24, 0xB3	; 179
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	fc 01       	movw	r30, r24
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	f8 01       	movw	r30, r16
    25d0:	91 83       	std	Z+1, r25	; 0x01
    25d2:	80 83       	st	Z, r24
    25d4:	ce 01       	movw	r24, r28
    25d6:	8b 5a       	subi	r24, 0xAB	; 171
    25d8:	9f 4f       	sbci	r25, 0xFF	; 255
    25da:	9e 01       	movw	r18, r28
    25dc:	2f 5a       	subi	r18, 0xAF	; 175
    25de:	3f 4f       	sbci	r19, 0xFF	; 255
    25e0:	f9 01       	movw	r30, r18
    25e2:	20 81       	ld	r18, Z
    25e4:	31 81       	ldd	r19, Z+1	; 0x01
    25e6:	fc 01       	movw	r30, r24
    25e8:	31 83       	std	Z+1, r19	; 0x01
    25ea:	20 83       	st	Z, r18
    25ec:	ce 01       	movw	r24, r28
    25ee:	8b 5a       	subi	r24, 0xAB	; 171
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	fc 01       	movw	r30, r24
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	8c 01       	movw	r16, r24
    25fa:	c8 01       	movw	r24, r16
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	f1 f7       	brne	.-4      	; 0x25fc <LCDInit+0x790>
    2600:	8c 01       	movw	r16, r24
    2602:	ce 01       	movw	r24, r28
    2604:	8b 5a       	subi	r24, 0xAB	; 171
    2606:	9f 4f       	sbci	r25, 0xFF	; 255
    2608:	fc 01       	movw	r30, r24
    260a:	11 83       	std	Z+1, r17	; 0x01
    260c:	00 83       	st	Z, r16
    260e:	28 c0       	rjmp	.+80     	; 0x2660 <LCDInit+0x7f4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2610:	8e 01       	movw	r16, r28
    2612:	08 5b       	subi	r16, 0xB8	; 184
    2614:	1f 4f       	sbci	r17, 0xFF	; 255
    2616:	ce 01       	movw	r24, r28
    2618:	8c 5b       	subi	r24, 0xBC	; 188
    261a:	9f 4f       	sbci	r25, 0xFF	; 255
    261c:	fc 01       	movw	r30, r24
    261e:	60 81       	ld	r22, Z
    2620:	71 81       	ldd	r23, Z+1	; 0x01
    2622:	82 81       	ldd	r24, Z+2	; 0x02
    2624:	93 81       	ldd	r25, Z+3	; 0x03
    2626:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	f8 01       	movw	r30, r16
    2630:	80 83       	st	Z, r24
    2632:	ce 01       	movw	r24, r28
    2634:	89 5a       	subi	r24, 0xA9	; 169
    2636:	9f 4f       	sbci	r25, 0xFF	; 255
    2638:	9e 01       	movw	r18, r28
    263a:	28 5b       	subi	r18, 0xB8	; 184
    263c:	3f 4f       	sbci	r19, 0xFF	; 255
    263e:	f9 01       	movw	r30, r18
    2640:	20 81       	ld	r18, Z
    2642:	fc 01       	movw	r30, r24
    2644:	20 83       	st	Z, r18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2646:	ce 01       	movw	r24, r28
    2648:	89 5a       	subi	r24, 0xA9	; 169
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	fc 01       	movw	r30, r24
    264e:	80 81       	ld	r24, Z
    2650:	18 2f       	mov	r17, r24
    2652:	1a 95       	dec	r17
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCDInit+0x7e6>
    2656:	ce 01       	movw	r24, r28
    2658:	89 5a       	subi	r24, 0xA9	; 169
    265a:	9f 4f       	sbci	r25, 0xFF	; 255
    265c:	fc 01       	movw	r30, r24
    265e:	10 83       	st	Z, r17
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
    2660:	0e 94 68 06 	call	0xcd0	; 0xcd0 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
    2664:	ce 01       	movw	r24, r28
    2666:	88 5a       	subi	r24, 0xA8	; 168
    2668:	9f 4f       	sbci	r25, 0xFF	; 255
    266a:	fc 01       	movw	r30, r24
    266c:	80 81       	ld	r24, Z
    266e:	8c 60       	ori	r24, 0x0C	; 12
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
    2676:	88 e2       	ldi	r24, 0x28	; 40
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
    267e:	80 e4       	ldi	r24, 0x40	; 64
    2680:	60 e0       	ldi	r22, 0x00	; 0
    2682:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    2686:	19 82       	std	Y+1, r1	; 0x01
    2688:	0d c0       	rjmp	.+26     	; 0x26a4 <LCDInit+0x838>
		LCDData(__cgram[__i]);
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	80 5a       	subi	r24, 0xA0	; 160
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	fc 01       	movw	r30, r24
    2696:	80 81       	ld	r24, Z
    2698:	61 e0       	ldi	r22, 0x01	; 1
    269a:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	80 34       	cpi	r24, 0x40	; 64
    26a8:	80 f3       	brcs	.-32     	; 0x268a <LCDInit+0x81e>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>

}
    26b2:	c8 5a       	subi	r28, 0xA8	; 168
    26b4:	df 4f       	sbci	r29, 0xFF	; 255
    26b6:	0f b6       	in	r0, 0x3f	; 63
    26b8:	f8 94       	cli
    26ba:	de bf       	out	0x3e, r29	; 62
    26bc:	0f be       	out	0x3f, r0	; 63
    26be:	cd bf       	out	0x3d, r28	; 61
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	08 95       	ret

000026ca <LCDWriteString>:
void LCDWriteString(const char *msg)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <LCDWriteString+0x6>
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	9b 83       	std	Y+3, r25	; 0x03
    26d8:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    26da:	34 c0       	rjmp	.+104    	; 0x2744 <LCDWriteString+0x7a>
 {
 	//Custom Char Support
	if(*msg=='%')
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	9b 81       	ldd	r25, Y+3	; 0x03
    26e0:	fc 01       	movw	r30, r24
    26e2:	80 81       	ld	r24, Z
    26e4:	85 32       	cpi	r24, 0x25	; 37
    26e6:	11 f5       	brne	.+68     	; 0x272c <LCDWriteString+0x62>
	{
		msg++;
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	01 96       	adiw	r24, 0x01	; 1
    26ee:	9b 83       	std	Y+3, r25	; 0x03
    26f0:	8a 83       	std	Y+2, r24	; 0x02
		int8_t cc=*msg-'0';
    26f2:	8a 81       	ldd	r24, Y+2	; 0x02
    26f4:	9b 81       	ldd	r25, Y+3	; 0x03
    26f6:	fc 01       	movw	r30, r24
    26f8:	80 81       	ld	r24, Z
    26fa:	80 53       	subi	r24, 0x30	; 48
    26fc:	89 83       	std	Y+1, r24	; 0x01

		if(cc>=0 && cc<=7)
    26fe:	89 81       	ldd	r24, Y+1	; 0x01
    2700:	88 23       	and	r24, r24
    2702:	44 f0       	brlt	.+16     	; 0x2714 <LCDWriteString+0x4a>
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	88 30       	cpi	r24, 0x08	; 8
    2708:	2c f4       	brge	.+10     	; 0x2714 <LCDWriteString+0x4a>
		{
			LCDData(cc);
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	61 e0       	ldi	r22, 0x01	; 1
    270e:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
    2712:	13 c0       	rjmp	.+38     	; 0x273a <LCDWriteString+0x70>
		}
		else
		{
			LCDData('%');
    2714:	85 e2       	ldi	r24, 0x25	; 37
    2716:	61 e0       	ldi	r22, 0x01	; 1
    2718:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
			LCDData(*msg);
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	80 81       	ld	r24, Z
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
    272a:	07 c0       	rjmp	.+14     	; 0x273a <LCDWriteString+0x70>
		}
	}
	else
	{
		LCDData(*msg);
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	9b 81       	ldd	r25, Y+3	; 0x03
    2730:	fc 01       	movw	r30, r24
    2732:	80 81       	ld	r24, Z
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	}
	msg++;
    273a:	8a 81       	ldd	r24, Y+2	; 0x02
    273c:	9b 81       	ldd	r25, Y+3	; 0x03
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	9b 83       	std	Y+3, r25	; 0x03
    2742:	8a 83       	std	Y+2, r24	; 0x02
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
    2744:	8a 81       	ldd	r24, Y+2	; 0x02
    2746:	9b 81       	ldd	r25, Y+3	; 0x03
    2748:	fc 01       	movw	r30, r24
    274a:	80 81       	ld	r24, Z
    274c:	88 23       	and	r24, r24
    274e:	31 f6       	brne	.-116    	; 0x26dc <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	cf 91       	pop	r28
    2758:	df 91       	pop	r29
    275a:	08 95       	ret

0000275c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
    275c:	df 93       	push	r29
    275e:	cf 93       	push	r28
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	2d 97       	sbiw	r28, 0x0d	; 13
    2766:	0f b6       	in	r0, 0x3f	; 63
    2768:	f8 94       	cli
    276a:	de bf       	out	0x3e, r29	; 62
    276c:	0f be       	out	0x3f, r0	; 63
    276e:	cd bf       	out	0x3d, r28	; 61
    2770:	9b 87       	std	Y+11, r25	; 0x0b
    2772:	8a 87       	std	Y+10, r24	; 0x0a
    2774:	7d 87       	std	Y+13, r23	; 0x0d
    2776:	6c 87       	std	Y+12, r22	; 0x0c
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
    2778:	25 e0       	ldi	r18, 0x05	; 5
    277a:	ce 01       	movw	r24, r28
    277c:	05 96       	adiw	r24, 0x05	; 5
    277e:	fc 01       	movw	r30, r24
    2780:	32 2f       	mov	r19, r18
    2782:	11 92       	st	Z+, r1
    2784:	3a 95       	dec	r19
    2786:	e9 f7       	brne	.-6      	; 0x2782 <LCDWriteInt+0x26>
	int i=4,j=0;
    2788:	84 e0       	ldi	r24, 0x04	; 4
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	1c 82       	std	Y+4, r1	; 0x04
    2792:	1b 82       	std	Y+3, r1	; 0x03
	while(val)
    2794:	20 c0       	rjmp	.+64     	; 0x27d6 <LCDWriteInt+0x7a>
	{
	str[i]=val%10;
    2796:	8a 85       	ldd	r24, Y+10	; 0x0a
    2798:	9b 85       	ldd	r25, Y+11	; 0x0b
    279a:	2a e0       	ldi	r18, 0x0A	; 10
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	b9 01       	movw	r22, r18
    27a0:	0e 94 49 2a 	call	0x5492	; 0x5492 <__divmodhi4>
    27a4:	48 2f       	mov	r20, r24
    27a6:	9e 01       	movw	r18, r28
    27a8:	2b 5f       	subi	r18, 0xFB	; 251
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	89 81       	ldd	r24, Y+1	; 0x01
    27ae:	9a 81       	ldd	r25, Y+2	; 0x02
    27b0:	82 0f       	add	r24, r18
    27b2:	93 1f       	adc	r25, r19
    27b4:	fc 01       	movw	r30, r24
    27b6:	40 83       	st	Z, r20
	val=val/10;
    27b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    27ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    27bc:	2a e0       	ldi	r18, 0x0A	; 10
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 49 2a 	call	0x5492	; 0x5492 <__divmodhi4>
    27c6:	9b 01       	movw	r18, r22
    27c8:	3b 87       	std	Y+11, r19	; 0x0b
    27ca:	2a 87       	std	Y+10, r18	; 0x0a
	i--;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	9a 83       	std	Y+2, r25	; 0x02
    27d4:	89 83       	std	Y+1, r24	; 0x01

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
    27d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	e1 f6       	brne	.-72     	; 0x2796 <LCDWriteInt+0x3a>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
    27de:	8c 85       	ldd	r24, Y+12	; 0x0c
    27e0:	9d 85       	ldd	r25, Y+13	; 0x0d
    27e2:	ff ef       	ldi	r31, 0xFF	; 255
    27e4:	8f 3f       	cpi	r24, 0xFF	; 255
    27e6:	9f 07       	cpc	r25, r31
    27e8:	91 f4       	brne	.+36     	; 0x280e <LCDWriteInt+0xb2>
		while(str[j]==0) j++;
    27ea:	05 c0       	rjmp	.+10     	; 0x27f6 <LCDWriteInt+0x9a>
    27ec:	8b 81       	ldd	r24, Y+3	; 0x03
    27ee:	9c 81       	ldd	r25, Y+4	; 0x04
    27f0:	01 96       	adiw	r24, 0x01	; 1
    27f2:	9c 83       	std	Y+4, r25	; 0x04
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	9e 01       	movw	r18, r28
    27f8:	2b 5f       	subi	r18, 0xFB	; 251
    27fa:	3f 4f       	sbci	r19, 0xFF	; 255
    27fc:	8b 81       	ldd	r24, Y+3	; 0x03
    27fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2800:	82 0f       	add	r24, r18
    2802:	93 1f       	adc	r25, r19
    2804:	fc 01       	movw	r30, r24
    2806:	80 81       	ld	r24, Z
    2808:	88 23       	and	r24, r24
    280a:	81 f3       	breq	.-32     	; 0x27ec <LCDWriteInt+0x90>
    280c:	0a c0       	rjmp	.+20     	; 0x2822 <LCDWriteInt+0xc6>
	else
		j=5-field_length;
    280e:	25 e0       	ldi	r18, 0x05	; 5
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	8c 85       	ldd	r24, Y+12	; 0x0c
    2814:	9d 85       	ldd	r25, Y+13	; 0x0d
    2816:	a9 01       	movw	r20, r18
    2818:	48 1b       	sub	r20, r24
    281a:	59 0b       	sbc	r21, r25
    281c:	ca 01       	movw	r24, r20
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	8b 83       	std	Y+3, r24	; 0x03

	if(val<0) LCDData('-');
    2822:	8a 85       	ldd	r24, Y+10	; 0x0a
    2824:	9b 85       	ldd	r25, Y+11	; 0x0b
    2826:	99 23       	and	r25, r25
    2828:	24 f4       	brge	.+8      	; 0x2832 <LCDWriteInt+0xd6>
    282a:	8d e2       	ldi	r24, 0x2D	; 45
    282c:	61 e0       	ldi	r22, 0x01	; 1
    282e:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	for(i=j;i<5;i++)
    2832:	8b 81       	ldd	r24, Y+3	; 0x03
    2834:	9c 81       	ldd	r25, Y+4	; 0x04
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	12 c0       	rjmp	.+36     	; 0x2860 <LCDWriteInt+0x104>
	{
	LCDData(48+str[i]);
    283c:	9e 01       	movw	r18, r28
    283e:	2b 5f       	subi	r18, 0xFB	; 251
    2840:	3f 4f       	sbci	r19, 0xFF	; 255
    2842:	89 81       	ldd	r24, Y+1	; 0x01
    2844:	9a 81       	ldd	r25, Y+2	; 0x02
    2846:	82 0f       	add	r24, r18
    2848:	93 1f       	adc	r25, r19
    284a:	fc 01       	movw	r30, r24
    284c:	80 81       	ld	r24, Z
    284e:	80 5d       	subi	r24, 0xD0	; 208
    2850:	61 e0       	ldi	r22, 0x01	; 1
    2852:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	9a 81       	ldd	r25, Y+2	; 0x02
    285a:	01 96       	adiw	r24, 0x01	; 1
    285c:	9a 83       	std	Y+2, r25	; 0x02
    285e:	89 83       	std	Y+1, r24	; 0x01
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	85 30       	cpi	r24, 0x05	; 5
    2866:	91 05       	cpc	r25, r1
    2868:	4c f3       	brlt	.-46     	; 0x283c <LCDWriteInt+0xe0>
	{
	LCDData(48+str[i]);
	}
}
    286a:	2d 96       	adiw	r28, 0x0d	; 13
    286c:	0f b6       	in	r0, 0x3f	; 63
    286e:	f8 94       	cli
    2870:	de bf       	out	0x3e, r29	; 62
    2872:	0f be       	out	0x3f, r0	; 63
    2874:	cd bf       	out	0x3d, r28	; 61
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
    287c:	df 93       	push	r29
    287e:	cf 93       	push	r28
    2880:	00 d0       	rcall	.+0      	; 0x2882 <LCDGotoXY+0x6>
    2882:	cd b7       	in	r28, 0x3d	; 61
    2884:	de b7       	in	r29, 0x3e	; 62
    2886:	89 83       	std	Y+1, r24	; 0x01
    2888:	6a 83       	std	Y+2, r22	; 0x02
 	if(x>=20) return;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	84 31       	cpi	r24, 0x14	; 20
    288e:	28 f5       	brcc	.+74     	; 0x28da <LCDGotoXY+0x5e>

	#ifdef LCD_TYPE_204
	
	switch(y)
    2890:	8a 81       	ldd	r24, Y+2	; 0x02
    2892:	88 2f       	mov	r24, r24
    2894:	90 e0       	ldi	r25, 0x00	; 0
    2896:	81 30       	cpi	r24, 0x01	; 1
    2898:	91 05       	cpc	r25, r1
    289a:	51 f0       	breq	.+20     	; 0x28b0 <LCDGotoXY+0x34>
    289c:	82 30       	cpi	r24, 0x02	; 2
    289e:	91 05       	cpc	r25, r1
    28a0:	9c f0       	brlt	.+38     	; 0x28c8 <LCDGotoXY+0x4c>
    28a2:	82 30       	cpi	r24, 0x02	; 2
    28a4:	91 05       	cpc	r25, r1
    28a6:	41 f0       	breq	.+16     	; 0x28b8 <LCDGotoXY+0x3c>
    28a8:	83 30       	cpi	r24, 0x03	; 3
    28aa:	91 05       	cpc	r25, r1
    28ac:	49 f0       	breq	.+18     	; 0x28c0 <LCDGotoXY+0x44>
    28ae:	0d c0       	rjmp	.+26     	; 0x28ca <LCDGotoXY+0x4e>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	80 64       	ori	r24, 0x40	; 64
    28b4:	89 83       	std	Y+1, r24	; 0x01
			break;
    28b6:	09 c0       	rjmp	.+18     	; 0x28ca <LCDGotoXY+0x4e>
		case 2:
			x+=0x14;
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	8c 5e       	subi	r24, 0xEC	; 236
    28bc:	89 83       	std	Y+1, r24	; 0x01
			break;
    28be:	05 c0       	rjmp	.+10     	; 0x28ca <LCDGotoXY+0x4e>
		case 3:
			x+=0x54;
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	8c 5a       	subi	r24, 0xAC	; 172
    28c4:	89 83       	std	Y+1, r24	; 0x01
			break;
    28c6:	01 c0       	rjmp	.+2      	; 0x28ca <LCDGotoXY+0x4e>
	#ifdef LCD_TYPE_204
	
	switch(y)
	{
		case 0:
			break;
    28c8:	00 00       	nop
			break;
	}

	#endif

	x|=0b10000000;
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	80 68       	ori	r24, 0x80	; 128
    28ce:	89 83       	std	Y+1, r24	; 0x01
  	LCDCmd(x);
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	60 e0       	ldi	r22, 0x00	; 0
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
    28d8:	01 c0       	rjmp	.+2      	; 0x28dc <LCDGotoXY+0x60>
	LCDData(48+str[i]);
	}
}
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
    28da:	00 00       	nop

	#endif

	x|=0b10000000;
  	LCDCmd(x);
}
    28dc:	0f 90       	pop	r0
    28de:	0f 90       	pop	r0
    28e0:	cf 91       	pop	r28
    28e2:	df 91       	pop	r29
    28e4:	08 95       	ret

000028e6 <SIM300Init>:

//A common buffer used to read response from SIM300
char sim300_buffer[128];

int8_t SIM300Init()
{
    28e6:	0f 93       	push	r16
    28e8:	1f 93       	push	r17
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
    28f2:	60 97       	sbiw	r28, 0x10	; 16
    28f4:	0f b6       	in	r0, 0x3f	; 63
    28f6:	f8 94       	cli
    28f8:	de bf       	out	0x3e, r29	; 62
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	cd bf       	out	0x3d, r28	; 61
	//Init USART lib
	USARTInit(103);
    28fe:	87 e6       	ldi	r24, 0x67	; 103
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	0e 94 b1 19 	call	0x3362	; 0x3362 <USARTInit>
	
	//Check communication line
	SIM300Cmd("AT");	//Test command
    2906:	80 ea       	ldi	r24, 0xA0	; 160
    2908:	90 e0       	ldi	r25, 0x00	; 0
    290a:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	//Now wait for response
	uint16_t i=0;
    290e:	1a 82       	std	Y+2, r1	; 0x02
    2910:	19 82       	std	Y+1, r1	; 0x01
	
	//correct response is 6 byte long
	//So wait until we have got 6 bytes
	//in buffer.
	while(i<10)
    2912:	9a c0       	rjmp	.+308    	; 0x2a48 <SIM300Init+0x162>
	{
		if(UDataAvailable()<6)
    2914:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UDataAvailable>
    2918:	86 30       	cpi	r24, 0x06	; 6
    291a:	08 f0       	brcs	.+2      	; 0x291e <SIM300Init+0x38>
    291c:	86 c0       	rjmp	.+268    	; 0x2a2a <SIM300Init+0x144>
		{
			i++;
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	01 96       	adiw	r24, 0x01	; 1
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	a0 e2       	ldi	r26, 0x20	; 32
    292e:	b1 e4       	ldi	r27, 0x41	; 65
    2930:	8b 83       	std	Y+3, r24	; 0x03
    2932:	9c 83       	std	Y+4, r25	; 0x04
    2934:	ad 83       	std	Y+5, r26	; 0x05
    2936:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2938:	6b 81       	ldd	r22, Y+3	; 0x03
    293a:	7c 81       	ldd	r23, Y+4	; 0x04
    293c:	8d 81       	ldd	r24, Y+5	; 0x05
    293e:	9e 81       	ldd	r25, Y+6	; 0x06
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	4a e7       	ldi	r20, 0x7A	; 122
    2946:	55 e4       	ldi	r21, 0x45	; 69
    2948:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	8f 83       	std	Y+7, r24	; 0x07
    2952:	98 87       	std	Y+8, r25	; 0x08
    2954:	a9 87       	std	Y+9, r26	; 0x09
    2956:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2958:	11 e0       	ldi	r17, 0x01	; 1
    295a:	6f 81       	ldd	r22, Y+7	; 0x07
    295c:	78 85       	ldd	r23, Y+8	; 0x08
    295e:	89 85       	ldd	r24, Y+9	; 0x09
    2960:	9a 85       	ldd	r25, Y+10	; 0x0a
    2962:	20 e0       	ldi	r18, 0x00	; 0
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e8       	ldi	r20, 0x80	; 128
    2968:	5f e3       	ldi	r21, 0x3F	; 63
    296a:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    296e:	88 23       	and	r24, r24
    2970:	0c f0       	brlt	.+2      	; 0x2974 <SIM300Init+0x8e>
    2972:	10 e0       	ldi	r17, 0x00	; 0
    2974:	11 23       	and	r17, r17
    2976:	29 f0       	breq	.+10     	; 0x2982 <SIM300Init+0x9c>
		__ticks = 1;
    2978:	81 e0       	ldi	r24, 0x01	; 1
    297a:	90 e0       	ldi	r25, 0x00	; 0
    297c:	9c 87       	std	Y+12, r25	; 0x0c
    297e:	8b 87       	std	Y+11, r24	; 0x0b
    2980:	46 c0       	rjmp	.+140    	; 0x2a0e <SIM300Init+0x128>
	else if (__tmp > 65535)
    2982:	11 e0       	ldi	r17, 0x01	; 1
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	0c f0       	brlt	.+2      	; 0x299e <SIM300Init+0xb8>
    299c:	10 e0       	ldi	r17, 0x00	; 0
    299e:	11 23       	and	r17, r17
    29a0:	61 f1       	breq	.+88     	; 0x29fa <SIM300Init+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a2:	6b 81       	ldd	r22, Y+3	; 0x03
    29a4:	7c 81       	ldd	r23, Y+4	; 0x04
    29a6:	8d 81       	ldd	r24, Y+5	; 0x05
    29a8:	9e 81       	ldd	r25, Y+6	; 0x06
    29aa:	20 e0       	ldi	r18, 0x00	; 0
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e2       	ldi	r20, 0x20	; 32
    29b0:	51 e4       	ldi	r21, 0x41	; 65
    29b2:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    29b6:	dc 01       	movw	r26, r24
    29b8:	cb 01       	movw	r24, r22
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	9c 87       	std	Y+12, r25	; 0x0c
    29c8:	8b 87       	std	Y+11, r24	; 0x0b
    29ca:	12 c0       	rjmp	.+36     	; 0x29f0 <SIM300Init+0x10a>
    29cc:	80 e9       	ldi	r24, 0x90	; 144
    29ce:	91 e0       	ldi	r25, 0x01	; 1
    29d0:	9e 87       	std	Y+14, r25	; 0x0e
    29d2:	8d 87       	std	Y+13, r24	; 0x0d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d8:	8c 01       	movw	r16, r24
    29da:	c8 01       	movw	r24, r16
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <SIM300Init+0xf6>
    29e0:	8c 01       	movw	r16, r24
    29e2:	1e 87       	std	Y+14, r17	; 0x0e
    29e4:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    29e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    29ea:	01 97       	sbiw	r24, 0x01	; 1
    29ec:	9c 87       	std	Y+12, r25	; 0x0c
    29ee:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    29f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    29f4:	00 97       	sbiw	r24, 0x00	; 0
    29f6:	51 f7       	brne	.-44     	; 0x29cc <SIM300Init+0xe6>
			
			_delay_ms(10);
			
			continue;
    29f8:	27 c0       	rjmp	.+78     	; 0x2a48 <SIM300Init+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29fa:	6f 81       	ldd	r22, Y+7	; 0x07
    29fc:	78 85       	ldd	r23, Y+8	; 0x08
    29fe:	89 85       	ldd	r24, Y+9	; 0x09
    2a00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a02:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2a06:	dc 01       	movw	r26, r24
    2a08:	cb 01       	movw	r24, r22
    2a0a:	9c 87       	std	Y+12, r25	; 0x0c
    2a0c:	8b 87       	std	Y+11, r24	; 0x0b
    2a0e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a10:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a12:	98 8b       	std	Y+16, r25	; 0x10
    2a14:	8f 87       	std	Y+15, r24	; 0x0f
    2a16:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a18:	98 89       	ldd	r25, Y+16	; 0x10
    2a1a:	8c 01       	movw	r16, r24
    2a1c:	c8 01       	movw	r24, r16
    2a1e:	01 97       	sbiw	r24, 0x01	; 1
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <SIM300Init+0x138>
    2a22:	8c 01       	movw	r16, r24
    2a24:	18 8b       	std	Y+16, r17	; 0x10
    2a26:	0f 87       	std	Y+15, r16	; 0x0f
    2a28:	0f c0       	rjmp	.+30     	; 0x2a48 <SIM300Init+0x162>
		}			
		else
		{
			//We got a response that is 6 bytes long
			//Now check it	
			UReadBuffer(sim300_buffer,6);	//Read serial Data
    2a2a:	88 e3       	ldi	r24, 0x38	; 56
    2a2c:	92 e0       	ldi	r25, 0x02	; 2
    2a2e:	66 e0       	ldi	r22, 0x06	; 6
    2a30:	70 e0       	ldi	r23, 0x00	; 0
    2a32:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UReadBuffer>
			
			return SIM300CheckResponse(sim300_buffer,"OK",6);
    2a36:	88 e3       	ldi	r24, 0x38	; 56
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	23 ea       	ldi	r18, 0xA3	; 163
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	b9 01       	movw	r22, r18
    2a40:	46 e0       	ldi	r20, 0x06	; 6
    2a42:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <SIM300CheckResponse>
    2a46:	07 c0       	rjmp	.+14     	; 0x2a56 <SIM300Init+0x170>
	uint16_t i=0;
	
	//correct response is 6 byte long
	//So wait until we have got 6 bytes
	//in buffer.
	while(i<10)
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	8a 30       	cpi	r24, 0x0A	; 10
    2a4e:	91 05       	cpc	r25, r1
    2a50:	08 f4       	brcc	.+2      	; 0x2a54 <SIM300Init+0x16e>
    2a52:	60 cf       	rjmp	.-320    	; 0x2914 <SIM300Init+0x2e>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
    2a54:	8d ef       	ldi	r24, 0xFD	; 253
			
}
    2a56:	60 96       	adiw	r28, 0x10	; 16
    2a58:	0f b6       	in	r0, 0x3f	; 63
    2a5a:	f8 94       	cli
    2a5c:	de bf       	out	0x3e, r29	; 62
    2a5e:	0f be       	out	0x3f, r0	; 63
    2a60:	cd bf       	out	0x3d, r28	; 61
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	1f 91       	pop	r17
    2a68:	0f 91       	pop	r16
    2a6a:	08 95       	ret

00002a6c <SIM300Cmd>:

int8_t SIM300Cmd(const char *cmd)
{
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	df 93       	push	r29
    2a72:	cf 93       	push	r28
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	63 97       	sbiw	r28, 0x13	; 19
    2a7a:	0f b6       	in	r0, 0x3f	; 63
    2a7c:	f8 94       	cli
    2a7e:	de bf       	out	0x3e, r29	; 62
    2a80:	0f be       	out	0x3f, r0	; 63
    2a82:	cd bf       	out	0x3d, r28	; 61
    2a84:	9b 8b       	std	Y+19, r25	; 0x13
    2a86:	8a 8b       	std	Y+18, r24	; 0x12
	UWriteString(cmd);	//Send Command
    2a88:	8a 89       	ldd	r24, Y+18	; 0x12
    2a8a:	9b 89       	ldd	r25, Y+19	; 0x13
    2a8c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <UWriteString>
	UWriteData(0x0D);	//CR
    2a90:	8d e0       	ldi	r24, 0x0D	; 13
    2a92:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <UWriteData>
	
	uint8_t len=strlen(cmd);
    2a96:	8a 89       	ldd	r24, Y+18	; 0x12
    2a98:	9b 89       	ldd	r25, Y+19	; 0x13
    2a9a:	0e 94 b9 2a 	call	0x5572	; 0x5572 <strlen>
    2a9e:	8b 83       	std	Y+3, r24	; 0x03
	
	len++;	//Add 1 for trailing CR added to all commands
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	8f 5f       	subi	r24, 0xFF	; 255
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
	
	uint16_t i=0;
    2aa6:	1a 82       	std	Y+2, r1	; 0x02
    2aa8:	19 82       	std	Y+1, r1	; 0x01
	
	//Wait for echo
	while(i<10*len)
    2aaa:	97 c0       	rjmp	.+302    	; 0x2bda <SIM300Cmd+0x16e>
	{
		if(UDataAvailable()<len)
    2aac:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UDataAvailable>
    2ab0:	98 2f       	mov	r25, r24
    2ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab4:	98 17       	cp	r25, r24
    2ab6:	08 f0       	brcs	.+2      	; 0x2aba <SIM300Cmd+0x4e>
    2ab8:	86 c0       	rjmp	.+268    	; 0x2bc6 <SIM300Cmd+0x15a>
		{
			i++;
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	9a 81       	ldd	r25, Y+2	; 0x02
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e2       	ldi	r26, 0x20	; 32
    2aca:	b1 e4       	ldi	r27, 0x41	; 65
    2acc:	8c 83       	std	Y+4, r24	; 0x04
    2ace:	9d 83       	std	Y+5, r25	; 0x05
    2ad0:	ae 83       	std	Y+6, r26	; 0x06
    2ad2:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6c 81       	ldd	r22, Y+4	; 0x04
    2ad6:	7d 81       	ldd	r23, Y+5	; 0x05
    2ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    2ada:	9f 81       	ldd	r25, Y+7	; 0x07
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	88 87       	std	Y+8, r24	; 0x08
    2aee:	99 87       	std	Y+9, r25	; 0x09
    2af0:	aa 87       	std	Y+10, r26	; 0x0a
    2af2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2af4:	11 e0       	ldi	r17, 0x01	; 1
    2af6:	68 85       	ldd	r22, Y+8	; 0x08
    2af8:	79 85       	ldd	r23, Y+9	; 0x09
    2afa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2afc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e8       	ldi	r20, 0x80	; 128
    2b04:	5f e3       	ldi	r21, 0x3F	; 63
    2b06:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    2b0a:	88 23       	and	r24, r24
    2b0c:	0c f0       	brlt	.+2      	; 0x2b10 <SIM300Cmd+0xa4>
    2b0e:	10 e0       	ldi	r17, 0x00	; 0
    2b10:	11 23       	and	r17, r17
    2b12:	29 f0       	breq	.+10     	; 0x2b1e <SIM300Cmd+0xb2>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9d 87       	std	Y+13, r25	; 0x0d
    2b1a:	8c 87       	std	Y+12, r24	; 0x0c
    2b1c:	46 c0       	rjmp	.+140    	; 0x2baa <SIM300Cmd+0x13e>
	else if (__tmp > 65535)
    2b1e:	11 e0       	ldi	r17, 0x01	; 1
    2b20:	68 85       	ldd	r22, Y+8	; 0x08
    2b22:	79 85       	ldd	r23, Y+9	; 0x09
    2b24:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b26:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	0c f0       	brlt	.+2      	; 0x2b3a <SIM300Cmd+0xce>
    2b38:	10 e0       	ldi	r17, 0x00	; 0
    2b3a:	11 23       	and	r17, r17
    2b3c:	61 f1       	breq	.+88     	; 0x2b96 <SIM300Cmd+0x12a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3e:	6c 81       	ldd	r22, Y+4	; 0x04
    2b40:	7d 81       	ldd	r23, Y+5	; 0x05
    2b42:	8e 81       	ldd	r24, Y+6	; 0x06
    2b44:	9f 81       	ldd	r25, Y+7	; 0x07
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	30 e0       	ldi	r19, 0x00	; 0
    2b4a:	40 e2       	ldi	r20, 0x20	; 32
    2b4c:	51 e4       	ldi	r21, 0x41	; 65
    2b4e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2b52:	dc 01       	movw	r26, r24
    2b54:	cb 01       	movw	r24, r22
    2b56:	bc 01       	movw	r22, r24
    2b58:	cd 01       	movw	r24, r26
    2b5a:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2b5e:	dc 01       	movw	r26, r24
    2b60:	cb 01       	movw	r24, r22
    2b62:	9d 87       	std	Y+13, r25	; 0x0d
    2b64:	8c 87       	std	Y+12, r24	; 0x0c
    2b66:	12 c0       	rjmp	.+36     	; 0x2b8c <SIM300Cmd+0x120>
    2b68:	80 e9       	ldi	r24, 0x90	; 144
    2b6a:	91 e0       	ldi	r25, 0x01	; 1
    2b6c:	9f 87       	std	Y+15, r25	; 0x0f
    2b6e:	8e 87       	std	Y+14, r24	; 0x0e
    2b70:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b72:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b74:	8c 01       	movw	r16, r24
    2b76:	c8 01       	movw	r24, r16
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <SIM300Cmd+0x10c>
    2b7c:	8c 01       	movw	r16, r24
    2b7e:	1f 87       	std	Y+15, r17	; 0x0f
    2b80:	0e 87       	std	Y+14, r16	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b82:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b84:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	9d 87       	std	Y+13, r25	; 0x0d
    2b8a:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b90:	00 97       	sbiw	r24, 0x00	; 0
    2b92:	51 f7       	brne	.-44     	; 0x2b68 <SIM300Cmd+0xfc>
			
			_delay_ms(10);
			
			continue;
    2b94:	22 c0       	rjmp	.+68     	; 0x2bda <SIM300Cmd+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b96:	68 85       	ldd	r22, Y+8	; 0x08
    2b98:	79 85       	ldd	r23, Y+9	; 0x09
    2b9a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b9c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b9e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	9d 87       	std	Y+13, r25	; 0x0d
    2ba8:	8c 87       	std	Y+12, r24	; 0x0c
    2baa:	8c 85       	ldd	r24, Y+12	; 0x0c
    2bac:	9d 85       	ldd	r25, Y+13	; 0x0d
    2bae:	99 8b       	std	Y+17, r25	; 0x11
    2bb0:	88 8b       	std	Y+16, r24	; 0x10
    2bb2:	88 89       	ldd	r24, Y+16	; 0x10
    2bb4:	99 89       	ldd	r25, Y+17	; 0x11
    2bb6:	8c 01       	movw	r16, r24
    2bb8:	c8 01       	movw	r24, r16
    2bba:	01 97       	sbiw	r24, 0x01	; 1
    2bbc:	f1 f7       	brne	.-4      	; 0x2bba <SIM300Cmd+0x14e>
    2bbe:	8c 01       	movw	r16, r24
    2bc0:	19 8b       	std	Y+17, r17	; 0x11
    2bc2:	08 8b       	std	Y+16, r16	; 0x10
    2bc4:	0a c0       	rjmp	.+20     	; 0x2bda <SIM300Cmd+0x16e>
		}
		else
		{
			//We got an echo
			//Now check it
			UReadBuffer(sim300_buffer,len);	//Read serial Data
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	88 e3       	ldi	r24, 0x38	; 56
    2bce:	92 e0       	ldi	r25, 0x02	; 2
    2bd0:	b9 01       	movw	r22, r18
    2bd2:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UReadBuffer>
			
			return SIM300_OK;
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	14 c0       	rjmp	.+40     	; 0x2c02 <SIM300Cmd+0x196>
	len++;	//Add 1 for trailing CR added to all commands
	
	uint16_t i=0;
	
	//Wait for echo
	while(i<10*len)
    2bda:	8b 81       	ldd	r24, Y+3	; 0x03
    2bdc:	88 2f       	mov	r24, r24
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	88 0f       	add	r24, r24
    2be2:	99 1f       	adc	r25, r25
    2be4:	9c 01       	movw	r18, r24
    2be6:	22 0f       	add	r18, r18
    2be8:	33 1f       	adc	r19, r19
    2bea:	22 0f       	add	r18, r18
    2bec:	33 1f       	adc	r19, r19
    2bee:	82 0f       	add	r24, r18
    2bf0:	93 1f       	adc	r25, r19
    2bf2:	9c 01       	movw	r18, r24
    2bf4:	89 81       	ldd	r24, Y+1	; 0x01
    2bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf8:	82 17       	cp	r24, r18
    2bfa:	93 07       	cpc	r25, r19
    2bfc:	08 f4       	brcc	.+2      	; 0x2c00 <SIM300Cmd+0x194>
    2bfe:	56 cf       	rjmp	.-340    	; 0x2aac <SIM300Cmd+0x40>
			return SIM300_OK;
			
		}
	}
	
	return SIM300_TIMEOUT;
    2c00:	8d ef       	ldi	r24, 0xFD	; 253
			
}
    2c02:	63 96       	adiw	r28, 0x13	; 19
    2c04:	0f b6       	in	r0, 0x3f	; 63
    2c06:	f8 94       	cli
    2c08:	de bf       	out	0x3e, r29	; 62
    2c0a:	0f be       	out	0x3f, r0	; 63
    2c0c:	cd bf       	out	0x3d, r28	; 61
    2c0e:	cf 91       	pop	r28
    2c10:	df 91       	pop	r29
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	08 95       	ret

00002c18 <SIM300CheckResponse>:

int8_t SIM300CheckResponse(const char *response,const char *check,uint8_t len)
{
    2c18:	df 93       	push	r29
    2c1a:	cf 93       	push	r28
    2c1c:	00 d0       	rcall	.+0      	; 0x2c1e <SIM300CheckResponse+0x6>
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <SIM300CheckResponse+0x8>
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <SIM300CheckResponse+0xa>
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
    2c26:	9b 83       	std	Y+3, r25	; 0x03
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	7d 83       	std	Y+5, r23	; 0x05
    2c2c:	6c 83       	std	Y+4, r22	; 0x04
    2c2e:	4e 83       	std	Y+6, r20	; 0x06
	len-=2;
    2c30:	8e 81       	ldd	r24, Y+6	; 0x06
    2c32:	82 50       	subi	r24, 0x02	; 2
    2c34:	8e 83       	std	Y+6, r24	; 0x06
	
	//Check leading CR LF
	if(response[0]!=0x0D | response[1]!=0x0A)
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	fc 01       	movw	r30, r24
    2c3c:	80 81       	ld	r24, Z
    2c3e:	21 e0       	ldi	r18, 0x01	; 1
    2c40:	8d 30       	cpi	r24, 0x0D	; 13
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <SIM300CheckResponse+0x2e>
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	01 96       	adiw	r24, 0x01	; 1
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	90 81       	ld	r25, Z
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	9a 30       	cpi	r25, 0x0A	; 10
    2c54:	09 f4       	brne	.+2      	; 0x2c58 <SIM300CheckResponse+0x40>
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	82 2b       	or	r24, r18
    2c5a:	88 23       	and	r24, r24
    2c5c:	11 f0       	breq	.+4      	; 0x2c62 <SIM300CheckResponse+0x4a>
		return	SIM300_INVALID_RESPONSE;
    2c5e:	8f ef       	ldi	r24, 0xFF	; 255
    2c60:	42 c0       	rjmp	.+132    	; 0x2ce6 <SIM300CheckResponse+0xce>
	
	//Check trailing CR LF
	if(response[len]!=0x0D | response[len+1]!=0x0A)
    2c62:	8e 81       	ldd	r24, Y+6	; 0x06
    2c64:	88 2f       	mov	r24, r24
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	2a 81       	ldd	r18, Y+2	; 0x02
    2c6a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c6c:	82 0f       	add	r24, r18
    2c6e:	93 1f       	adc	r25, r19
    2c70:	fc 01       	movw	r30, r24
    2c72:	80 81       	ld	r24, Z
    2c74:	41 e0       	ldi	r20, 0x01	; 1
    2c76:	8d 30       	cpi	r24, 0x0D	; 13
    2c78:	09 f4       	brne	.+2      	; 0x2c7c <SIM300CheckResponse+0x64>
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c7e:	88 2f       	mov	r24, r24
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	01 96       	adiw	r24, 0x01	; 1
    2c84:	2a 81       	ldd	r18, Y+2	; 0x02
    2c86:	3b 81       	ldd	r19, Y+3	; 0x03
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	90 81       	ld	r25, Z
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	9a 30       	cpi	r25, 0x0A	; 10
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <SIM300CheckResponse+0x80>
    2c96:	80 e0       	ldi	r24, 0x00	; 0
    2c98:	84 2b       	or	r24, r20
    2c9a:	88 23       	and	r24, r24
    2c9c:	11 f0       	breq	.+4      	; 0x2ca2 <SIM300CheckResponse+0x8a>
		return	SIM300_INVALID_RESPONSE;
    2c9e:	8f ef       	ldi	r24, 0xFF	; 255
    2ca0:	22 c0       	rjmp	.+68     	; 0x2ce6 <SIM300CheckResponse+0xce>
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	89 83       	std	Y+1, r24	; 0x01
    2ca6:	1a c0       	rjmp	.+52     	; 0x2cdc <SIM300CheckResponse+0xc4>
	{
		if(response[i]!=check[i-2])
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	88 2f       	mov	r24, r24
    2cac:	90 e0       	ldi	r25, 0x00	; 0
    2cae:	2a 81       	ldd	r18, Y+2	; 0x02
    2cb0:	3b 81       	ldd	r19, Y+3	; 0x03
    2cb2:	82 0f       	add	r24, r18
    2cb4:	93 1f       	adc	r25, r19
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	40 81       	ld	r20, Z
    2cba:	89 81       	ldd	r24, Y+1	; 0x01
    2cbc:	88 2f       	mov	r24, r24
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	02 97       	sbiw	r24, 0x02	; 2
    2cc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2cc6:	82 0f       	add	r24, r18
    2cc8:	93 1f       	adc	r25, r19
    2cca:	fc 01       	movw	r30, r24
    2ccc:	80 81       	ld	r24, Z
    2cce:	48 17       	cp	r20, r24
    2cd0:	11 f0       	breq	.+4      	; 0x2cd6 <SIM300CheckResponse+0xbe>
			return SIM300_FAIL;
    2cd2:	8e ef       	ldi	r24, 0xFE	; 254
    2cd4:	08 c0       	rjmp	.+16     	; 0x2ce6 <SIM300CheckResponse+0xce>
	if(response[len]!=0x0D | response[len+1]!=0x0A)
		return	SIM300_INVALID_RESPONSE;
		
	
	//Compare the response
	for(uint8_t i=2;i<len;i++)
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	8f 5f       	subi	r24, 0xFF	; 255
    2cda:	89 83       	std	Y+1, r24	; 0x01
    2cdc:	99 81       	ldd	r25, Y+1	; 0x01
    2cde:	8e 81       	ldd	r24, Y+6	; 0x06
    2ce0:	98 17       	cp	r25, r24
    2ce2:	10 f3       	brcs	.-60     	; 0x2ca8 <SIM300CheckResponse+0x90>
	{
		if(response[i]!=check[i-2])
			return SIM300_FAIL;
	}
	
	return SIM300_OK;		
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ce6:	26 96       	adiw	r28, 0x06	; 6
    2ce8:	0f b6       	in	r0, 0x3f	; 63
    2cea:	f8 94       	cli
    2cec:	de bf       	out	0x3e, r29	; 62
    2cee:	0f be       	out	0x3f, r0	; 63
    2cf0:	cd bf       	out	0x3d, r28	; 61
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <SIM300WaitForResponse>:

int8_t SIM300WaitForResponse(uint16_t timeout)
{
    2cf8:	0f 93       	push	r16
    2cfa:	1f 93       	push	r17
    2cfc:	df 93       	push	r29
    2cfe:	cf 93       	push	r28
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    2d04:	63 97       	sbiw	r28, 0x13	; 19
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	9b 8b       	std	Y+19, r25	; 0x13
    2d12:	8a 8b       	std	Y+18, r24	; 0x12
	uint8_t i=0;
    2d14:	19 82       	std	Y+1, r1	; 0x01
	uint16_t n=0;
    2d16:	1b 82       	std	Y+3, r1	; 0x03
    2d18:	1a 82       	std	Y+2, r1	; 0x02
	
	while(1)
	{
		while (UDataAvailable()==0 && n<timeout){n++; _delay_ms(1);}
    2d1a:	85 c0       	rjmp	.+266    	; 0x2e26 <SIM300WaitForResponse+0x12e>
    2d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d20:	01 96       	adiw	r24, 0x01	; 1
    2d22:	9b 83       	std	Y+3, r25	; 0x03
    2d24:	8a 83       	std	Y+2, r24	; 0x02
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a0 e8       	ldi	r26, 0x80	; 128
    2d2c:	bf e3       	ldi	r27, 0x3F	; 63
    2d2e:	8c 83       	std	Y+4, r24	; 0x04
    2d30:	9d 83       	std	Y+5, r25	; 0x05
    2d32:	ae 83       	std	Y+6, r26	; 0x06
    2d34:	bf 83       	std	Y+7, r27	; 0x07
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2d36:	6c 81       	ldd	r22, Y+4	; 0x04
    2d38:	7d 81       	ldd	r23, Y+5	; 0x05
    2d3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	4a e7       	ldi	r20, 0x7A	; 122
    2d44:	55 e4       	ldi	r21, 0x45	; 69
    2d46:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	88 87       	std	Y+8, r24	; 0x08
    2d50:	99 87       	std	Y+9, r25	; 0x09
    2d52:	aa 87       	std	Y+10, r26	; 0x0a
    2d54:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2d56:	11 e0       	ldi	r17, 0x01	; 1
    2d58:	68 85       	ldd	r22, Y+8	; 0x08
    2d5a:	79 85       	ldd	r23, Y+9	; 0x09
    2d5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d60:	20 e0       	ldi	r18, 0x00	; 0
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	40 e8       	ldi	r20, 0x80	; 128
    2d66:	5f e3       	ldi	r21, 0x3F	; 63
    2d68:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    2d6c:	88 23       	and	r24, r24
    2d6e:	0c f0       	brlt	.+2      	; 0x2d72 <SIM300WaitForResponse+0x7a>
    2d70:	10 e0       	ldi	r17, 0x00	; 0
    2d72:	11 23       	and	r17, r17
    2d74:	29 f0       	breq	.+10     	; 0x2d80 <SIM300WaitForResponse+0x88>
		__ticks = 1;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	90 e0       	ldi	r25, 0x00	; 0
    2d7a:	9d 87       	std	Y+13, r25	; 0x0d
    2d7c:	8c 87       	std	Y+12, r24	; 0x0c
    2d7e:	46 c0       	rjmp	.+140    	; 0x2e0c <SIM300WaitForResponse+0x114>
	else if (__tmp > 65535)
    2d80:	11 e0       	ldi	r17, 0x01	; 1
    2d82:	68 85       	ldd	r22, Y+8	; 0x08
    2d84:	79 85       	ldd	r23, Y+9	; 0x09
    2d86:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d88:	9b 85       	ldd	r25, Y+11	; 0x0b
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	3f ef       	ldi	r19, 0xFF	; 255
    2d8e:	4f e7       	ldi	r20, 0x7F	; 127
    2d90:	57 e4       	ldi	r21, 0x47	; 71
    2d92:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    2d96:	18 16       	cp	r1, r24
    2d98:	0c f0       	brlt	.+2      	; 0x2d9c <SIM300WaitForResponse+0xa4>
    2d9a:	10 e0       	ldi	r17, 0x00	; 0
    2d9c:	11 23       	and	r17, r17
    2d9e:	61 f1       	breq	.+88     	; 0x2df8 <SIM300WaitForResponse+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2da0:	6c 81       	ldd	r22, Y+4	; 0x04
    2da2:	7d 81       	ldd	r23, Y+5	; 0x05
    2da4:	8e 81       	ldd	r24, Y+6	; 0x06
    2da6:	9f 81       	ldd	r25, Y+7	; 0x07
    2da8:	20 e0       	ldi	r18, 0x00	; 0
    2daa:	30 e0       	ldi	r19, 0x00	; 0
    2dac:	40 e2       	ldi	r20, 0x20	; 32
    2dae:	51 e4       	ldi	r21, 0x41	; 65
    2db0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	bc 01       	movw	r22, r24
    2dba:	cd 01       	movw	r24, r26
    2dbc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2dc0:	dc 01       	movw	r26, r24
    2dc2:	cb 01       	movw	r24, r22
    2dc4:	9d 87       	std	Y+13, r25	; 0x0d
    2dc6:	8c 87       	std	Y+12, r24	; 0x0c
    2dc8:	12 c0       	rjmp	.+36     	; 0x2dee <SIM300WaitForResponse+0xf6>
    2dca:	80 e9       	ldi	r24, 0x90	; 144
    2dcc:	91 e0       	ldi	r25, 0x01	; 1
    2dce:	9f 87       	std	Y+15, r25	; 0x0f
    2dd0:	8e 87       	std	Y+14, r24	; 0x0e
    2dd2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2dd4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dd6:	8c 01       	movw	r16, r24
    2dd8:	c8 01       	movw	r24, r16
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <SIM300WaitForResponse+0xe2>
    2dde:	8c 01       	movw	r16, r24
    2de0:	1f 87       	std	Y+15, r17	; 0x0f
    2de2:	0e 87       	std	Y+14, r16	; 0x0e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2de4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2de6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	9d 87       	std	Y+13, r25	; 0x0d
    2dec:	8c 87       	std	Y+12, r24	; 0x0c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dee:	8c 85       	ldd	r24, Y+12	; 0x0c
    2df0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	51 f7       	brne	.-44     	; 0x2dca <SIM300WaitForResponse+0xd2>
    2df6:	17 c0       	rjmp	.+46     	; 0x2e26 <SIM300WaitForResponse+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2df8:	68 85       	ldd	r22, Y+8	; 0x08
    2dfa:	79 85       	ldd	r23, Y+9	; 0x09
    2dfc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dfe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2e00:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2e04:	dc 01       	movw	r26, r24
    2e06:	cb 01       	movw	r24, r22
    2e08:	9d 87       	std	Y+13, r25	; 0x0d
    2e0a:	8c 87       	std	Y+12, r24	; 0x0c
    2e0c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2e0e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2e10:	99 8b       	std	Y+17, r25	; 0x11
    2e12:	88 8b       	std	Y+16, r24	; 0x10
    2e14:	88 89       	ldd	r24, Y+16	; 0x10
    2e16:	99 89       	ldd	r25, Y+17	; 0x11
    2e18:	8c 01       	movw	r16, r24
    2e1a:	f8 01       	movw	r30, r16
    2e1c:	31 97       	sbiw	r30, 0x01	; 1
    2e1e:	f1 f7       	brne	.-4      	; 0x2e1c <SIM300WaitForResponse+0x124>
    2e20:	8f 01       	movw	r16, r30
    2e22:	19 8b       	std	Y+17, r17	; 0x11
    2e24:	08 8b       	std	Y+16, r16	; 0x10
    2e26:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UDataAvailable>
    2e2a:	88 23       	and	r24, r24
    2e2c:	41 f4       	brne	.+16     	; 0x2e3e <SIM300WaitForResponse+0x146>
    2e2e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e30:	3b 81       	ldd	r19, Y+3	; 0x03
    2e32:	8a 89       	ldd	r24, Y+18	; 0x12
    2e34:	9b 89       	ldd	r25, Y+19	; 0x13
    2e36:	28 17       	cp	r18, r24
    2e38:	39 07       	cpc	r19, r25
    2e3a:	08 f4       	brcc	.+2      	; 0x2e3e <SIM300WaitForResponse+0x146>
    2e3c:	6f cf       	rjmp	.-290    	; 0x2d1c <SIM300WaitForResponse+0x24>
	
		if(n==timeout)
    2e3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2e40:	3b 81       	ldd	r19, Y+3	; 0x03
    2e42:	8a 89       	ldd	r24, Y+18	; 0x12
    2e44:	9b 89       	ldd	r25, Y+19	; 0x13
    2e46:	28 17       	cp	r18, r24
    2e48:	39 07       	cpc	r19, r25
    2e4a:	11 f4       	brne	.+4      	; 0x2e50 <SIM300WaitForResponse+0x158>
			return 0;
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	21 c0       	rjmp	.+66     	; 0x2e92 <SIM300WaitForResponse+0x19a>
		else
		{
			sim300_buffer[i]=UReadData();
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	08 2f       	mov	r16, r24
    2e54:	10 e0       	ldi	r17, 0x00	; 0
    2e56:	0e 94 3e 1a 	call	0x347c	; 0x347c <UReadData>
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	c8 01       	movw	r24, r16
    2e5e:	88 5c       	subi	r24, 0xC8	; 200
    2e60:	9d 4f       	sbci	r25, 0xFD	; 253
    2e62:	fc 01       	movw	r30, r24
    2e64:	20 83       	st	Z, r18
		
			if(sim300_buffer[i]==0x0D && i!=0)
    2e66:	89 81       	ldd	r24, Y+1	; 0x01
    2e68:	88 2f       	mov	r24, r24
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	88 5c       	subi	r24, 0xC8	; 200
    2e6e:	9d 4f       	sbci	r25, 0xFD	; 253
    2e70:	fc 01       	movw	r30, r24
    2e72:	80 81       	ld	r24, Z
    2e74:	8d 30       	cpi	r24, 0x0D	; 13
    2e76:	41 f4       	brne	.+16     	; 0x2e88 <SIM300WaitForResponse+0x190>
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	88 23       	and	r24, r24
    2e7c:	29 f0       	breq	.+10     	; 0x2e88 <SIM300WaitForResponse+0x190>
			{
				UFlushBuffer();
    2e7e:	0e 94 09 1b 	call	0x3612	; 0x3612 <UFlushBuffer>
				return i+1;
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	8f 5f       	subi	r24, 0xFF	; 255
    2e86:	05 c0       	rjmp	.+10     	; 0x2e92 <SIM300WaitForResponse+0x19a>
			}				
			else
				i++;
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	8f 5f       	subi	r24, 0xFF	; 255
    2e8c:	89 83       	std	Y+1, r24	; 0x01
		}
	}	
    2e8e:	00 00       	nop
	uint8_t i=0;
	uint16_t n=0;
	
	while(1)
	{
		while (UDataAvailable()==0 && n<timeout){n++; _delay_ms(1);}
    2e90:	ca cf       	rjmp	.-108    	; 0x2e26 <SIM300WaitForResponse+0x12e>
			}				
			else
				i++;
		}
	}	
}
    2e92:	63 96       	adiw	r28, 0x13	; 19
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	f8 94       	cli
    2e98:	de bf       	out	0x3e, r29	; 62
    2e9a:	0f be       	out	0x3f, r0	; 63
    2e9c:	cd bf       	out	0x3d, r28	; 61
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	1f 91       	pop	r17
    2ea4:	0f 91       	pop	r16
    2ea6:	08 95       	ret

00002ea8 <SIM300GetNetStat>:

int8_t SIM300GetNetStat()
{
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	60 97       	sbiw	r28, 0x10	; 16
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
	//Send Command
	SIM300Cmd("AT+CREG?");
    2ec0:	86 ea       	ldi	r24, 0xA6	; 166
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	//Now wait for response
	uint16_t i=0;
    2ec8:	1a 82       	std	Y+2, r1	; 0x02
    2eca:	19 82       	std	Y+1, r1	; 0x01
	
	//correct response is 20 byte long
	//So wait until we have got 20 bytes
	//in buffer.
	while(i<10)
    2ecc:	a5 c0       	rjmp	.+330    	; 0x3018 <SIM300GetNetStat+0x170>
	{
		if(UDataAvailable()<20)
    2ece:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UDataAvailable>
    2ed2:	84 31       	cpi	r24, 0x14	; 20
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <SIM300GetNetStat+0x30>
    2ed6:	86 c0       	rjmp	.+268    	; 0x2fe4 <SIM300GetNetStat+0x13c>
		{
			i++;
    2ed8:	89 81       	ldd	r24, Y+1	; 0x01
    2eda:	9a 81       	ldd	r25, Y+2	; 0x02
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	9a 83       	std	Y+2, r25	; 0x02
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a0 e2       	ldi	r26, 0x20	; 32
    2ee8:	b1 e4       	ldi	r27, 0x41	; 65
    2eea:	8b 83       	std	Y+3, r24	; 0x03
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	ad 83       	std	Y+5, r26	; 0x05
    2ef0:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	6b 81       	ldd	r22, Y+3	; 0x03
    2ef4:	7c 81       	ldd	r23, Y+4	; 0x04
    2ef6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef8:	9e 81       	ldd	r25, Y+6	; 0x06
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a e7       	ldi	r20, 0x7A	; 122
    2f00:	55 e4       	ldi	r21, 0x45	; 69
    2f02:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8f 83       	std	Y+7, r24	; 0x07
    2f0c:	98 87       	std	Y+8, r25	; 0x08
    2f0e:	a9 87       	std	Y+9, r26	; 0x09
    2f10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f12:	11 e0       	ldi	r17, 0x01	; 1
    2f14:	6f 81       	ldd	r22, Y+7	; 0x07
    2f16:	78 85       	ldd	r23, Y+8	; 0x08
    2f18:	89 85       	ldd	r24, Y+9	; 0x09
    2f1a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	30 e0       	ldi	r19, 0x00	; 0
    2f20:	40 e8       	ldi	r20, 0x80	; 128
    2f22:	5f e3       	ldi	r21, 0x3F	; 63
    2f24:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    2f28:	88 23       	and	r24, r24
    2f2a:	0c f0       	brlt	.+2      	; 0x2f2e <SIM300GetNetStat+0x86>
    2f2c:	10 e0       	ldi	r17, 0x00	; 0
    2f2e:	11 23       	and	r17, r17
    2f30:	29 f0       	breq	.+10     	; 0x2f3c <SIM300GetNetStat+0x94>
		__ticks = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9c 87       	std	Y+12, r25	; 0x0c
    2f38:	8b 87       	std	Y+11, r24	; 0x0b
    2f3a:	46 c0       	rjmp	.+140    	; 0x2fc8 <SIM300GetNetStat+0x120>
	else if (__tmp > 65535)
    2f3c:	11 e0       	ldi	r17, 0x01	; 1
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	3f ef       	ldi	r19, 0xFF	; 255
    2f4a:	4f e7       	ldi	r20, 0x7F	; 127
    2f4c:	57 e4       	ldi	r21, 0x47	; 71
    2f4e:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    2f52:	18 16       	cp	r1, r24
    2f54:	0c f0       	brlt	.+2      	; 0x2f58 <SIM300GetNetStat+0xb0>
    2f56:	10 e0       	ldi	r17, 0x00	; 0
    2f58:	11 23       	and	r17, r17
    2f5a:	61 f1       	breq	.+88     	; 0x2fb4 <SIM300GetNetStat+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f5c:	6b 81       	ldd	r22, Y+3	; 0x03
    2f5e:	7c 81       	ldd	r23, Y+4	; 0x04
    2f60:	8d 81       	ldd	r24, Y+5	; 0x05
    2f62:	9e 81       	ldd	r25, Y+6	; 0x06
    2f64:	20 e0       	ldi	r18, 0x00	; 0
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	40 e2       	ldi	r20, 0x20	; 32
    2f6a:	51 e4       	ldi	r21, 0x41	; 65
    2f6c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    2f70:	dc 01       	movw	r26, r24
    2f72:	cb 01       	movw	r24, r22
    2f74:	bc 01       	movw	r22, r24
    2f76:	cd 01       	movw	r24, r26
    2f78:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	cb 01       	movw	r24, r22
    2f80:	9c 87       	std	Y+12, r25	; 0x0c
    2f82:	8b 87       	std	Y+11, r24	; 0x0b
    2f84:	12 c0       	rjmp	.+36     	; 0x2faa <SIM300GetNetStat+0x102>
    2f86:	80 e9       	ldi	r24, 0x90	; 144
    2f88:	91 e0       	ldi	r25, 0x01	; 1
    2f8a:	9e 87       	std	Y+14, r25	; 0x0e
    2f8c:	8d 87       	std	Y+13, r24	; 0x0d
    2f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f92:	8c 01       	movw	r16, r24
    2f94:	c8 01       	movw	r24, r16
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <SIM300GetNetStat+0xee>
    2f9a:	8c 01       	movw	r16, r24
    2f9c:	1e 87       	std	Y+14, r17	; 0x0e
    2f9e:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fa0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fa2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	9c 87       	std	Y+12, r25	; 0x0c
    2fa8:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2faa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fac:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	51 f7       	brne	.-44     	; 0x2f86 <SIM300GetNetStat+0xde>
			
			_delay_ms(10);
			
			continue;
    2fb2:	32 c0       	rjmp	.+100    	; 0x3018 <SIM300GetNetStat+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2fb6:	78 85       	ldd	r23, Y+8	; 0x08
    2fb8:	89 85       	ldd	r24, Y+9	; 0x09
    2fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fbc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    2fc0:	dc 01       	movw	r26, r24
    2fc2:	cb 01       	movw	r24, r22
    2fc4:	9c 87       	std	Y+12, r25	; 0x0c
    2fc6:	8b 87       	std	Y+11, r24	; 0x0b
    2fc8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fca:	9c 85       	ldd	r25, Y+12	; 0x0c
    2fcc:	98 8b       	std	Y+16, r25	; 0x10
    2fce:	8f 87       	std	Y+15, r24	; 0x0f
    2fd0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fd2:	98 89       	ldd	r25, Y+16	; 0x10
    2fd4:	8c 01       	movw	r16, r24
    2fd6:	c8 01       	movw	r24, r16
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <SIM300GetNetStat+0x130>
    2fdc:	8c 01       	movw	r16, r24
    2fde:	18 8b       	std	Y+16, r17	; 0x10
    2fe0:	0f 87       	std	Y+15, r16	; 0x0f
    2fe2:	1a c0       	rjmp	.+52     	; 0x3018 <SIM300GetNetStat+0x170>
		}
		else
		{
			//We got a response that is 20 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,20);	//Read serial Data
    2fe4:	88 e3       	ldi	r24, 0x38	; 56
    2fe6:	92 e0       	ldi	r25, 0x02	; 2
    2fe8:	64 e1       	ldi	r22, 0x14	; 20
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UReadBuffer>
			
			if(sim300_buffer[11]=='1')
    2ff0:	80 91 43 02 	lds	r24, 0x0243
    2ff4:	81 33       	cpi	r24, 0x31	; 49
    2ff6:	11 f4       	brne	.+4      	; 0x2ffc <SIM300GetNetStat+0x154>
				return SIM300_NW_REGISTERED_HOME;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	15 c0       	rjmp	.+42     	; 0x3026 <SIM300GetNetStat+0x17e>
			else if(sim300_buffer[11]=='2')
    2ffc:	80 91 43 02 	lds	r24, 0x0243
    3000:	82 33       	cpi	r24, 0x32	; 50
    3002:	11 f4       	brne	.+4      	; 0x3008 <SIM300GetNetStat+0x160>
				return SIM300_NW_SEARCHING;
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	0f c0       	rjmp	.+30     	; 0x3026 <SIM300GetNetStat+0x17e>
			else if(sim300_buffer[11]=='5')
    3008:	80 91 43 02 	lds	r24, 0x0243
    300c:	85 33       	cpi	r24, 0x35	; 53
    300e:	11 f4       	brne	.+4      	; 0x3014 <SIM300GetNetStat+0x16c>
				return SIM300_NW_REGISTED_ROAMING;
    3010:	85 e0       	ldi	r24, 0x05	; 5
    3012:	09 c0       	rjmp	.+18     	; 0x3026 <SIM300GetNetStat+0x17e>
			else
				return SIM300_NW_ERROR;			
    3014:	83 e6       	ldi	r24, 0x63	; 99
    3016:	07 c0       	rjmp	.+14     	; 0x3026 <SIM300GetNetStat+0x17e>
	uint16_t i=0;
	
	//correct response is 20 byte long
	//So wait until we have got 20 bytes
	//in buffer.
	while(i<10)
    3018:	89 81       	ldd	r24, Y+1	; 0x01
    301a:	9a 81       	ldd	r25, Y+2	; 0x02
    301c:	8a 30       	cpi	r24, 0x0A	; 10
    301e:	91 05       	cpc	r25, r1
    3020:	08 f4       	brcc	.+2      	; 0x3024 <SIM300GetNetStat+0x17c>
    3022:	55 cf       	rjmp	.-342    	; 0x2ece <SIM300GetNetStat+0x26>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
    3024:	8d ef       	ldi	r24, 0xFD	; 253
	
}
    3026:	60 96       	adiw	r28, 0x10	; 16
    3028:	0f b6       	in	r0, 0x3f	; 63
    302a:	f8 94       	cli
    302c:	de bf       	out	0x3e, r29	; 62
    302e:	0f be       	out	0x3f, r0	; 63
    3030:	cd bf       	out	0x3d, r28	; 61
    3032:	cf 91       	pop	r28
    3034:	df 91       	pop	r29
    3036:	1f 91       	pop	r17
    3038:	0f 91       	pop	r16
    303a:	08 95       	ret

0000303c <SIM300IsSIMInserted>:

int8_t SIM300IsSIMInserted()
{
    303c:	0f 93       	push	r16
    303e:	1f 93       	push	r17
    3040:	df 93       	push	r29
    3042:	cf 93       	push	r28
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
    3048:	60 97       	sbiw	r28, 0x10	; 16
    304a:	0f b6       	in	r0, 0x3f	; 63
    304c:	f8 94       	cli
    304e:	de bf       	out	0x3e, r29	; 62
    3050:	0f be       	out	0x3f, r0	; 63
    3052:	cd bf       	out	0x3d, r28	; 61
	UFlushBuffer();
    3054:	0e 94 09 1b 	call	0x3612	; 0x3612 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+CSMINS?");
    3058:	8f ea       	ldi	r24, 0xAF	; 175
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	//Now wait for response
	uint16_t i=0;
    3060:	1a 82       	std	Y+2, r1	; 0x02
    3062:	19 82       	std	Y+1, r1	; 0x01
	
	//correct response is 22 byte long
	//So wait until we have got 22 bytes
	//in buffer.
	while(i<30)
    3064:	99 c0       	rjmp	.+306    	; 0x3198 <SIM300IsSIMInserted+0x15c>
	{
		if(UDataAvailable()<22)
    3066:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UDataAvailable>
    306a:	86 31       	cpi	r24, 0x16	; 22
    306c:	08 f0       	brcs	.+2      	; 0x3070 <SIM300IsSIMInserted+0x34>
    306e:	86 c0       	rjmp	.+268    	; 0x317c <SIM300IsSIMInserted+0x140>
		{
			i++;
    3070:	89 81       	ldd	r24, Y+1	; 0x01
    3072:	9a 81       	ldd	r25, Y+2	; 0x02
    3074:	01 96       	adiw	r24, 0x01	; 1
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	80 e0       	ldi	r24, 0x00	; 0
    307c:	90 e0       	ldi	r25, 0x00	; 0
    307e:	a0 e2       	ldi	r26, 0x20	; 32
    3080:	b1 e4       	ldi	r27, 0x41	; 65
    3082:	8b 83       	std	Y+3, r24	; 0x03
    3084:	9c 83       	std	Y+4, r25	; 0x04
    3086:	ad 83       	std	Y+5, r26	; 0x05
    3088:	be 83       	std	Y+6, r27	; 0x06
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    308a:	6b 81       	ldd	r22, Y+3	; 0x03
    308c:	7c 81       	ldd	r23, Y+4	; 0x04
    308e:	8d 81       	ldd	r24, Y+5	; 0x05
    3090:	9e 81       	ldd	r25, Y+6	; 0x06
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	4a e7       	ldi	r20, 0x7A	; 122
    3098:	55 e4       	ldi	r21, 0x45	; 69
    309a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    309e:	dc 01       	movw	r26, r24
    30a0:	cb 01       	movw	r24, r22
    30a2:	8f 83       	std	Y+7, r24	; 0x07
    30a4:	98 87       	std	Y+8, r25	; 0x08
    30a6:	a9 87       	std	Y+9, r26	; 0x09
    30a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30aa:	11 e0       	ldi	r17, 0x01	; 1
    30ac:	6f 81       	ldd	r22, Y+7	; 0x07
    30ae:	78 85       	ldd	r23, Y+8	; 0x08
    30b0:	89 85       	ldd	r24, Y+9	; 0x09
    30b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	40 e8       	ldi	r20, 0x80	; 128
    30ba:	5f e3       	ldi	r21, 0x3F	; 63
    30bc:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    30c0:	88 23       	and	r24, r24
    30c2:	0c f0       	brlt	.+2      	; 0x30c6 <SIM300IsSIMInserted+0x8a>
    30c4:	10 e0       	ldi	r17, 0x00	; 0
    30c6:	11 23       	and	r17, r17
    30c8:	29 f0       	breq	.+10     	; 0x30d4 <SIM300IsSIMInserted+0x98>
		__ticks = 1;
    30ca:	81 e0       	ldi	r24, 0x01	; 1
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	9c 87       	std	Y+12, r25	; 0x0c
    30d0:	8b 87       	std	Y+11, r24	; 0x0b
    30d2:	46 c0       	rjmp	.+140    	; 0x3160 <SIM300IsSIMInserted+0x124>
	else if (__tmp > 65535)
    30d4:	11 e0       	ldi	r17, 0x01	; 1
    30d6:	6f 81       	ldd	r22, Y+7	; 0x07
    30d8:	78 85       	ldd	r23, Y+8	; 0x08
    30da:	89 85       	ldd	r24, Y+9	; 0x09
    30dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <SIM300IsSIMInserted+0xb4>
    30ee:	10 e0       	ldi	r17, 0x00	; 0
    30f0:	11 23       	and	r17, r17
    30f2:	61 f1       	breq	.+88     	; 0x314c <SIM300IsSIMInserted+0x110>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30f4:	6b 81       	ldd	r22, Y+3	; 0x03
    30f6:	7c 81       	ldd	r23, Y+4	; 0x04
    30f8:	8d 81       	ldd	r24, Y+5	; 0x05
    30fa:	9e 81       	ldd	r25, Y+6	; 0x06
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e2       	ldi	r20, 0x20	; 32
    3102:	51 e4       	ldi	r21, 0x41	; 65
    3104:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	bc 01       	movw	r22, r24
    310e:	cd 01       	movw	r24, r26
    3110:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3114:	dc 01       	movw	r26, r24
    3116:	cb 01       	movw	r24, r22
    3118:	9c 87       	std	Y+12, r25	; 0x0c
    311a:	8b 87       	std	Y+11, r24	; 0x0b
    311c:	12 c0       	rjmp	.+36     	; 0x3142 <SIM300IsSIMInserted+0x106>
    311e:	80 e9       	ldi	r24, 0x90	; 144
    3120:	91 e0       	ldi	r25, 0x01	; 1
    3122:	9e 87       	std	Y+14, r25	; 0x0e
    3124:	8d 87       	std	Y+13, r24	; 0x0d
    3126:	8d 85       	ldd	r24, Y+13	; 0x0d
    3128:	9e 85       	ldd	r25, Y+14	; 0x0e
    312a:	8c 01       	movw	r16, r24
    312c:	c8 01       	movw	r24, r16
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	f1 f7       	brne	.-4      	; 0x312e <SIM300IsSIMInserted+0xf2>
    3132:	8c 01       	movw	r16, r24
    3134:	1e 87       	std	Y+14, r17	; 0x0e
    3136:	0d 87       	std	Y+13, r16	; 0x0d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3138:	8b 85       	ldd	r24, Y+11	; 0x0b
    313a:	9c 85       	ldd	r25, Y+12	; 0x0c
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9c 87       	std	Y+12, r25	; 0x0c
    3140:	8b 87       	std	Y+11, r24	; 0x0b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3142:	8b 85       	ldd	r24, Y+11	; 0x0b
    3144:	9c 85       	ldd	r25, Y+12	; 0x0c
    3146:	00 97       	sbiw	r24, 0x00	; 0
    3148:	51 f7       	brne	.-44     	; 0x311e <SIM300IsSIMInserted+0xe2>
			
			_delay_ms(10);
			
			continue;
    314a:	26 c0       	rjmp	.+76     	; 0x3198 <SIM300IsSIMInserted+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    314c:	6f 81       	ldd	r22, Y+7	; 0x07
    314e:	78 85       	ldd	r23, Y+8	; 0x08
    3150:	89 85       	ldd	r24, Y+9	; 0x09
    3152:	9a 85       	ldd	r25, Y+10	; 0x0a
    3154:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3158:	dc 01       	movw	r26, r24
    315a:	cb 01       	movw	r24, r22
    315c:	9c 87       	std	Y+12, r25	; 0x0c
    315e:	8b 87       	std	Y+11, r24	; 0x0b
    3160:	8b 85       	ldd	r24, Y+11	; 0x0b
    3162:	9c 85       	ldd	r25, Y+12	; 0x0c
    3164:	98 8b       	std	Y+16, r25	; 0x10
    3166:	8f 87       	std	Y+15, r24	; 0x0f
    3168:	8f 85       	ldd	r24, Y+15	; 0x0f
    316a:	98 89       	ldd	r25, Y+16	; 0x10
    316c:	8c 01       	movw	r16, r24
    316e:	c8 01       	movw	r24, r16
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <SIM300IsSIMInserted+0x134>
    3174:	8c 01       	movw	r16, r24
    3176:	18 8b       	std	Y+16, r17	; 0x10
    3178:	0f 87       	std	Y+15, r16	; 0x0f
    317a:	0e c0       	rjmp	.+28     	; 0x3198 <SIM300IsSIMInserted+0x15c>
		}
		else
		{
			//We got a response that is 22 bytes long
			//Now check it
			UReadBuffer(sim300_buffer,22);	//Read serial Data
    317c:	88 e3       	ldi	r24, 0x38	; 56
    317e:	92 e0       	ldi	r25, 0x02	; 2
    3180:	66 e1       	ldi	r22, 0x16	; 22
    3182:	70 e0       	ldi	r23, 0x00	; 0
    3184:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UReadBuffer>
			
			if(sim300_buffer[13]=='1')
    3188:	80 91 45 02 	lds	r24, 0x0245
    318c:	81 33       	cpi	r24, 0x31	; 49
    318e:	11 f4       	brne	.+4      	; 0x3194 <SIM300IsSIMInserted+0x158>
				return SIM300_SIM_PRESENT;
    3190:	81 e0       	ldi	r24, 0x01	; 1
    3192:	09 c0       	rjmp	.+18     	; 0x31a6 <SIM300IsSIMInserted+0x16a>
			else
				return SIM300_SIM_NOT_PRESENT;
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	07 c0       	rjmp	.+14     	; 0x31a6 <SIM300IsSIMInserted+0x16a>
	uint16_t i=0;
	
	//correct response is 22 byte long
	//So wait until we have got 22 bytes
	//in buffer.
	while(i<30)
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	8e 31       	cpi	r24, 0x1E	; 30
    319e:	91 05       	cpc	r25, r1
    31a0:	08 f4       	brcc	.+2      	; 0x31a4 <SIM300IsSIMInserted+0x168>
    31a2:	61 cf       	rjmp	.-318    	; 0x3066 <SIM300IsSIMInserted+0x2a>
	}
	
	//We waited so long but got no response
	//So tell caller that we timed out
	
	return SIM300_TIMEOUT;
    31a4:	8d ef       	ldi	r24, 0xFD	; 253
}
    31a6:	60 96       	adiw	r28, 0x10	; 16
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	cf 91       	pop	r28
    31b4:	df 91       	pop	r29
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

000031bc <SIM300GetProviderName>:

uint8_t SIM300GetProviderName(char *name)
{
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	27 97       	sbiw	r28, 0x07	; 7
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	9f 83       	std	Y+7, r25	; 0x07
    31d2:	8e 83       	std	Y+6, r24	; 0x06
	UFlushBuffer();
    31d4:	0e 94 09 1b 	call	0x3612	; 0x3612 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+CSPN?");
    31d8:	8a eb       	ldi	r24, 0xBA	; 186
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
    31e0:	88 ee       	ldi	r24, 0xE8	; 232
    31e2:	93 e0       	ldi	r25, 0x03	; 3
    31e4:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <SIM300WaitForResponse>
    31e8:	89 83       	std	Y+1, r24	; 0x01
	
	if(len==0)
    31ea:	89 81       	ldd	r24, Y+1	; 0x01
    31ec:	88 23       	and	r24, r24
    31ee:	11 f4       	brne	.+4      	; 0x31f4 <SIM300GetProviderName+0x38>
		return SIM300_TIMEOUT;
    31f0:	8d ef       	ldi	r24, 0xFD	; 253
    31f2:	24 c0       	rjmp	.+72     	; 0x323c <SIM300GetProviderName+0x80>
	
	char *start,*end;
	start=strchr(sim300_buffer,'"');
    31f4:	88 e3       	ldi	r24, 0x38	; 56
    31f6:	92 e0       	ldi	r25, 0x02	; 2
    31f8:	62 e2       	ldi	r22, 0x22	; 34
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	0e 94 a7 2a 	call	0x554e	; 0x554e <strchr>
    3200:	9b 83       	std	Y+3, r25	; 0x03
    3202:	8a 83       	std	Y+2, r24	; 0x02
	start++;
    3204:	8a 81       	ldd	r24, Y+2	; 0x02
    3206:	9b 81       	ldd	r25, Y+3	; 0x03
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	9b 83       	std	Y+3, r25	; 0x03
    320c:	8a 83       	std	Y+2, r24	; 0x02
	end=strchr(start,'"');
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	9b 81       	ldd	r25, Y+3	; 0x03
    3212:	62 e2       	ldi	r22, 0x22	; 34
    3214:	70 e0       	ldi	r23, 0x00	; 0
    3216:	0e 94 a7 2a 	call	0x554e	; 0x554e <strchr>
    321a:	9d 83       	std	Y+5, r25	; 0x05
    321c:	8c 83       	std	Y+4, r24	; 0x04
	
	*end='\0';
    321e:	8c 81       	ldd	r24, Y+4	; 0x04
    3220:	9d 81       	ldd	r25, Y+5	; 0x05
    3222:	fc 01       	movw	r30, r24
    3224:	10 82       	st	Z, r1
	
	strcpy(name,start);
    3226:	8e 81       	ldd	r24, Y+6	; 0x06
    3228:	9f 81       	ldd	r25, Y+7	; 0x07
    322a:	2a 81       	ldd	r18, Y+2	; 0x02
    322c:	3b 81       	ldd	r19, Y+3	; 0x03
    322e:	b9 01       	movw	r22, r18
    3230:	0e 94 b2 2a 	call	0x5564	; 0x5564 <strcpy>
	
	return strlen(name);
    3234:	8e 81       	ldd	r24, Y+6	; 0x06
    3236:	9f 81       	ldd	r25, Y+7	; 0x07
    3238:	0e 94 b9 2a 	call	0x5572	; 0x5572 <strlen>
}
    323c:	27 96       	adiw	r28, 0x07	; 7
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	de bf       	out	0x3e, r29	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	cd bf       	out	0x3d, r28	; 61
    3248:	cf 91       	pop	r28
    324a:	df 91       	pop	r29
    324c:	08 95       	ret

0000324e <SIM300GetIMEI>:

int8_t SIM300GetIMEI(char *emei)
{
    324e:	df 93       	push	r29
    3250:	cf 93       	push	r28
    3252:	00 d0       	rcall	.+0      	; 0x3254 <SIM300GetIMEI+0x6>
    3254:	0f 92       	push	r0
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	9b 83       	std	Y+3, r25	; 0x03
    325c:	8a 83       	std	Y+2, r24	; 0x02
	UFlushBuffer();
    325e:	0e 94 09 1b 	call	0x3612	; 0x3612 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GSN");
    3262:	83 ec       	ldi	r24, 0xC3	; 195
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
    326a:	88 ee       	ldi	r24, 0xE8	; 232
    326c:	93 e0       	ldi	r25, 0x03	; 3
    326e:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <SIM300WaitForResponse>
    3272:	89 83       	std	Y+1, r24	; 0x01
	
	if(len==0)
    3274:	89 81       	ldd	r24, Y+1	; 0x01
    3276:	88 23       	and	r24, r24
    3278:	11 f4       	brne	.+4      	; 0x327e <SIM300GetIMEI+0x30>
		return SIM300_TIMEOUT;
    327a:	8d ef       	ldi	r24, 0xFD	; 253
    327c:	10 c0       	rjmp	.+32     	; 0x329e <SIM300GetIMEI+0x50>
		
	sim300_buffer[len-1]='\0';
    327e:	89 81       	ldd	r24, Y+1	; 0x01
    3280:	88 2f       	mov	r24, r24
    3282:	90 e0       	ldi	r25, 0x00	; 0
    3284:	01 97       	sbiw	r24, 0x01	; 1
    3286:	88 5c       	subi	r24, 0xC8	; 200
    3288:	9d 4f       	sbci	r25, 0xFD	; 253
    328a:	fc 01       	movw	r30, r24
    328c:	10 82       	st	Z, r1
	
	strcpy(emei,sim300_buffer+2);
    328e:	8a 81       	ldd	r24, Y+2	; 0x02
    3290:	9b 81       	ldd	r25, Y+3	; 0x03
    3292:	2a e3       	ldi	r18, 0x3A	; 58
    3294:	32 e0       	ldi	r19, 0x02	; 2
    3296:	b9 01       	movw	r22, r18
    3298:	0e 94 b2 2a 	call	0x5564	; 0x5564 <strcpy>
	
	return SIM300_OK;	
    329c:	81 e0       	ldi	r24, 0x01	; 1
}
    329e:	0f 90       	pop	r0
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	cf 91       	pop	r28
    32a6:	df 91       	pop	r29
    32a8:	08 95       	ret

000032aa <SIM300GetManufacturer>:

int8_t SIM300GetManufacturer(char *man_id)
{
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	00 d0       	rcall	.+0      	; 0x32b0 <SIM300GetManufacturer+0x6>
    32b0:	0f 92       	push	r0
    32b2:	cd b7       	in	r28, 0x3d	; 61
    32b4:	de b7       	in	r29, 0x3e	; 62
    32b6:	9b 83       	std	Y+3, r25	; 0x03
    32b8:	8a 83       	std	Y+2, r24	; 0x02
	UFlushBuffer();
    32ba:	0e 94 09 1b 	call	0x3612	; 0x3612 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GMI");
    32be:	8a ec       	ldi	r24, 0xCA	; 202
    32c0:	90 e0       	ldi	r25, 0x00	; 0
    32c2:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
    32c6:	88 ee       	ldi	r24, 0xE8	; 232
    32c8:	93 e0       	ldi	r25, 0x03	; 3
    32ca:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <SIM300WaitForResponse>
    32ce:	89 83       	std	Y+1, r24	; 0x01
	
	if(len==0)
    32d0:	89 81       	ldd	r24, Y+1	; 0x01
    32d2:	88 23       	and	r24, r24
    32d4:	11 f4       	brne	.+4      	; 0x32da <SIM300GetManufacturer+0x30>
		return SIM300_TIMEOUT;
    32d6:	8d ef       	ldi	r24, 0xFD	; 253
    32d8:	10 c0       	rjmp	.+32     	; 0x32fa <SIM300GetManufacturer+0x50>
	
	sim300_buffer[len-1]='\0';
    32da:	89 81       	ldd	r24, Y+1	; 0x01
    32dc:	88 2f       	mov	r24, r24
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	01 97       	sbiw	r24, 0x01	; 1
    32e2:	88 5c       	subi	r24, 0xC8	; 200
    32e4:	9d 4f       	sbci	r25, 0xFD	; 253
    32e6:	fc 01       	movw	r30, r24
    32e8:	10 82       	st	Z, r1
	
	strcpy(man_id,sim300_buffer+2);//+2 for removing leading CR LF
    32ea:	8a 81       	ldd	r24, Y+2	; 0x02
    32ec:	9b 81       	ldd	r25, Y+3	; 0x03
    32ee:	2a e3       	ldi	r18, 0x3A	; 58
    32f0:	32 e0       	ldi	r19, 0x02	; 2
    32f2:	b9 01       	movw	r22, r18
    32f4:	0e 94 b2 2a 	call	0x5564	; 0x5564 <strcpy>
	
	return SIM300_OK;
    32f8:	81 e0       	ldi	r24, 0x01	; 1
}
    32fa:	0f 90       	pop	r0
    32fc:	0f 90       	pop	r0
    32fe:	0f 90       	pop	r0
    3300:	cf 91       	pop	r28
    3302:	df 91       	pop	r29
    3304:	08 95       	ret

00003306 <SIM300GetModel>:

int8_t	SIM300GetModel(char *model)
{
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	00 d0       	rcall	.+0      	; 0x330c <SIM300GetModel+0x6>
    330c:	0f 92       	push	r0
    330e:	cd b7       	in	r28, 0x3d	; 61
    3310:	de b7       	in	r29, 0x3e	; 62
    3312:	9b 83       	std	Y+3, r25	; 0x03
    3314:	8a 83       	std	Y+2, r24	; 0x02
	UFlushBuffer();
    3316:	0e 94 09 1b 	call	0x3612	; 0x3612 <UFlushBuffer>
	
	//Send Command
	SIM300Cmd("AT+GMM");
    331a:	81 ed       	ldi	r24, 0xD1	; 209
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <SIM300Cmd>
	
	uint8_t len=SIM300WaitForResponse(1000);
    3322:	88 ee       	ldi	r24, 0xE8	; 232
    3324:	93 e0       	ldi	r25, 0x03	; 3
    3326:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <SIM300WaitForResponse>
    332a:	89 83       	std	Y+1, r24	; 0x01
	
	if(len==0)
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	88 23       	and	r24, r24
    3330:	11 f4       	brne	.+4      	; 0x3336 <SIM300GetModel+0x30>
	return SIM300_TIMEOUT;
    3332:	8d ef       	ldi	r24, 0xFD	; 253
    3334:	10 c0       	rjmp	.+32     	; 0x3356 <SIM300GetModel+0x50>
	
	sim300_buffer[len-1]='\0';
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	88 2f       	mov	r24, r24
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	88 5c       	subi	r24, 0xC8	; 200
    3340:	9d 4f       	sbci	r25, 0xFD	; 253
    3342:	fc 01       	movw	r30, r24
    3344:	10 82       	st	Z, r1
	
	strcpy(model,sim300_buffer+2);//+2 for removing leading CR LF
    3346:	8a 81       	ldd	r24, Y+2	; 0x02
    3348:	9b 81       	ldd	r25, Y+3	; 0x03
    334a:	2a e3       	ldi	r18, 0x3A	; 58
    334c:	32 e0       	ldi	r19, 0x02	; 2
    334e:	b9 01       	movw	r22, r18
    3350:	0e 94 b2 2a 	call	0x5564	; 0x5564 <strcpy>
	
	return SIM300_OK;
    3354:	81 e0       	ldi	r24, 0x01	; 1
}
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	0f 90       	pop	r0
    335c:	cf 91       	pop	r28
    335e:	df 91       	pop	r29
    3360:	08 95       	ret

00003362 <USARTInit>:
#include <inttypes.h>

#include "usart.h"

void USARTInit(uint16_t ubrrvalue)
{
    3362:	df 93       	push	r29
    3364:	cf 93       	push	r28
    3366:	00 d0       	rcall	.+0      	; 0x3368 <USARTInit+0x6>
    3368:	cd b7       	in	r28, 0x3d	; 61
    336a:	de b7       	in	r29, 0x3e	; 62
    336c:	9a 83       	std	Y+2, r25	; 0x02
    336e:	89 83       	std	Y+1, r24	; 0x01
	//Setup q
	UQFront=UQEnd=-1;
    3370:	8f ef       	ldi	r24, 0xFF	; 255
    3372:	80 93 f7 01 	sts	0x01F7, r24
    3376:	80 91 f7 01 	lds	r24, 0x01F7
    337a:	80 93 f6 01 	sts	0x01F6, r24

	//Set Baud rate
	UBRRH=(unsigned char)(ubrrvalue>>8);
    337e:	80 e4       	ldi	r24, 0x40	; 64
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	29 81       	ldd	r18, Y+1	; 0x01
    3384:	3a 81       	ldd	r19, Y+2	; 0x02
    3386:	23 2f       	mov	r18, r19
    3388:	33 27       	eor	r19, r19
    338a:	fc 01       	movw	r30, r24
    338c:	20 83       	st	Z, r18
	UBRRL=(unsigned char)ubrrvalue;
    338e:	89 e2       	ldi	r24, 0x29	; 41
    3390:	90 e0       	ldi	r25, 0x00	; 0
    3392:	29 81       	ldd	r18, Y+1	; 0x01
    3394:	fc 01       	movw	r30, r24
    3396:	20 83       	st	Z, r18
	1 StopBit
	char size 8

	*/

	UCSRC=(1<<URSEL)|(3<<UCSZ0);
    3398:	80 e4       	ldi	r24, 0x40	; 64
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	26 e8       	ldi	r18, 0x86	; 134
    339e:	fc 01       	movw	r30, r24
    33a0:	20 83       	st	Z, r18

	Enable The recevier and transmitter

	*/

	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
    33a2:	8a e2       	ldi	r24, 0x2A	; 42
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	28 e9       	ldi	r18, 0x98	; 152
    33a8:	fc 01       	movw	r30, r24
    33aa:	20 83       	st	Z, r18
	sei();
    33ac:	78 94       	sei

}
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <__vector_13>:

//The USART ISR
ISR(USART_RXC_VECT)
{
    33b8:	1f 92       	push	r1
    33ba:	0f 92       	push	r0
    33bc:	0f b6       	in	r0, 0x3f	; 63
    33be:	0f 92       	push	r0
    33c0:	11 24       	eor	r1, r1
    33c2:	2f 93       	push	r18
    33c4:	3f 93       	push	r19
    33c6:	8f 93       	push	r24
    33c8:	9f 93       	push	r25
    33ca:	ef 93       	push	r30
    33cc:	ff 93       	push	r31
    33ce:	df 93       	push	r29
    33d0:	cf 93       	push	r28
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
	//Read the data
	char data=UDR;
    33d8:	8c e2       	ldi	r24, 0x2C	; 44
    33da:	90 e0       	ldi	r25, 0x00	; 0
    33dc:	fc 01       	movw	r30, r24
    33de:	80 81       	ld	r24, Z
    33e0:	89 83       	std	Y+1, r24	; 0x01

	//Now add it to q

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
    33e2:	80 91 f7 01 	lds	r24, 0x01F7
    33e6:	8f 33       	cpi	r24, 0x3F	; 63
    33e8:	21 f4       	brne	.+8      	; 0x33f2 <__vector_13+0x3a>
    33ea:	80 91 f6 01 	lds	r24, 0x01F6
    33ee:	88 23       	and	r24, r24
    33f0:	81 f0       	breq	.+32     	; 0x3412 <__vector_13+0x5a>
    33f2:	80 91 f7 01 	lds	r24, 0x01F7
    33f6:	99 27       	eor	r25, r25
    33f8:	87 fd       	sbrc	r24, 7
    33fa:	90 95       	com	r25
    33fc:	9c 01       	movw	r18, r24
    33fe:	2f 5f       	subi	r18, 0xFF	; 255
    3400:	3f 4f       	sbci	r19, 0xFF	; 255
    3402:	80 91 f6 01 	lds	r24, 0x01F6
    3406:	99 27       	eor	r25, r25
    3408:	87 fd       	sbrc	r24, 7
    340a:	90 95       	com	r25
    340c:	28 17       	cp	r18, r24
    340e:	39 07       	cpc	r19, r25
    3410:	59 f4       	brne	.+22     	; 0x3428 <__vector_13+0x70>
	{
		//Q Full
		UQFront++;
    3412:	80 91 f6 01 	lds	r24, 0x01F6
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	80 93 f6 01 	sts	0x01F6, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
    341c:	80 91 f6 01 	lds	r24, 0x01F6
    3420:	80 34       	cpi	r24, 0x40	; 64
    3422:	11 f4       	brne	.+4      	; 0x3428 <__vector_13+0x70>
    3424:	10 92 f6 01 	sts	0x01F6, r1
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
    3428:	80 91 f7 01 	lds	r24, 0x01F7
    342c:	8f 33       	cpi	r24, 0x3F	; 63
    342e:	19 f4       	brne	.+6      	; 0x3436 <__vector_13+0x7e>
		UQEnd=0;
    3430:	10 92 f7 01 	sts	0x01F7, r1
    3434:	05 c0       	rjmp	.+10     	; 0x3440 <__vector_13+0x88>
	else
		UQEnd++;
    3436:	80 91 f7 01 	lds	r24, 0x01F7
    343a:	8f 5f       	subi	r24, 0xFF	; 255
    343c:	80 93 f7 01 	sts	0x01F7, r24


	URBuff[UQEnd]=data;
    3440:	80 91 f7 01 	lds	r24, 0x01F7
    3444:	99 27       	eor	r25, r25
    3446:	87 fd       	sbrc	r24, 7
    3448:	90 95       	com	r25
    344a:	88 50       	subi	r24, 0x08	; 8
    344c:	9e 4f       	sbci	r25, 0xFE	; 254
    344e:	29 81       	ldd	r18, Y+1	; 0x01
    3450:	fc 01       	movw	r30, r24
    3452:	20 83       	st	Z, r18

	if(UQFront==-1) UQFront=0;
    3454:	80 91 f6 01 	lds	r24, 0x01F6
    3458:	8f 3f       	cpi	r24, 0xFF	; 255
    345a:	11 f4       	brne	.+4      	; 0x3460 <__vector_13+0xa8>
    345c:	10 92 f6 01 	sts	0x01F6, r1

}
    3460:	0f 90       	pop	r0
    3462:	cf 91       	pop	r28
    3464:	df 91       	pop	r29
    3466:	ff 91       	pop	r31
    3468:	ef 91       	pop	r30
    346a:	9f 91       	pop	r25
    346c:	8f 91       	pop	r24
    346e:	3f 91       	pop	r19
    3470:	2f 91       	pop	r18
    3472:	0f 90       	pop	r0
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	0f 90       	pop	r0
    3478:	1f 90       	pop	r1
    347a:	18 95       	reti

0000347c <UReadData>:

char UReadData()
{
    347c:	df 93       	push	r29
    347e:	cf 93       	push	r28
    3480:	0f 92       	push	r0
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
	char data;
	
	//Check if q is empty
	if(UQFront==-1)
    3486:	80 91 f6 01 	lds	r24, 0x01F6
    348a:	8f 3f       	cpi	r24, 0xFF	; 255
    348c:	11 f4       	brne	.+4      	; 0x3492 <UReadData+0x16>
		return 0;
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	24 c0       	rjmp	.+72     	; 0x34da <UReadData+0x5e>
	
	data=URBuff[UQFront];
    3492:	80 91 f6 01 	lds	r24, 0x01F6
    3496:	99 27       	eor	r25, r25
    3498:	87 fd       	sbrc	r24, 7
    349a:	90 95       	com	r25
    349c:	88 50       	subi	r24, 0x08	; 8
    349e:	9e 4f       	sbci	r25, 0xFE	; 254
    34a0:	fc 01       	movw	r30, r24
    34a2:	80 81       	ld	r24, Z
    34a4:	89 83       	std	Y+1, r24	; 0x01
	
	if(UQFront==UQEnd)
    34a6:	90 91 f6 01 	lds	r25, 0x01F6
    34aa:	80 91 f7 01 	lds	r24, 0x01F7
    34ae:	98 17       	cp	r25, r24
    34b0:	41 f4       	brne	.+16     	; 0x34c2 <UReadData+0x46>
	{
	//If single data is left
	//So empty q
	UQFront=UQEnd=-1;
    34b2:	8f ef       	ldi	r24, 0xFF	; 255
    34b4:	80 93 f7 01 	sts	0x01F7, r24
    34b8:	80 91 f7 01 	lds	r24, 0x01F7
    34bc:	80 93 f6 01 	sts	0x01F6, r24
    34c0:	0b c0       	rjmp	.+22     	; 0x34d8 <UReadData+0x5c>
	}
	else
	{
		UQFront++;
    34c2:	80 91 f6 01 	lds	r24, 0x01F6
    34c6:	8f 5f       	subi	r24, 0xFF	; 255
    34c8:	80 93 f6 01 	sts	0x01F6, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
    34cc:	80 91 f6 01 	lds	r24, 0x01F6
    34d0:	80 34       	cpi	r24, 0x40	; 64
    34d2:	11 f4       	brne	.+4      	; 0x34d8 <UReadData+0x5c>
		UQFront=0;
    34d4:	10 92 f6 01 	sts	0x01F6, r1
	}

	return data;
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34da:	0f 90       	pop	r0
    34dc:	cf 91       	pop	r28
    34de:	df 91       	pop	r29
    34e0:	08 95       	ret

000034e2 <UWriteData>:

void UWriteData(char data)
{
    34e2:	df 93       	push	r29
    34e4:	cf 93       	push	r28
    34e6:	0f 92       	push	r0
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	89 83       	std	Y+1, r24	; 0x01
	//Wait For Transmitter to become ready
	while(!(UCSRA & (1<<UDRE)));
    34ee:	00 00       	nop
    34f0:	8b e2       	ldi	r24, 0x2B	; 43
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	fc 01       	movw	r30, r24
    34f6:	80 81       	ld	r24, Z
    34f8:	88 2f       	mov	r24, r24
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	80 72       	andi	r24, 0x20	; 32
    34fe:	90 70       	andi	r25, 0x00	; 0
    3500:	00 97       	sbiw	r24, 0x00	; 0
    3502:	b1 f3       	breq	.-20     	; 0x34f0 <UWriteData+0xe>

	//Now write
	UDR=data;
    3504:	8c e2       	ldi	r24, 0x2C	; 44
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	29 81       	ldd	r18, Y+1	; 0x01
    350a:	fc 01       	movw	r30, r24
    350c:	20 83       	st	Z, r18
}
    350e:	0f 90       	pop	r0
    3510:	cf 91       	pop	r28
    3512:	df 91       	pop	r29
    3514:	08 95       	ret

00003516 <UDataAvailable>:

uint8_t UDataAvailable()
{
    3516:	df 93       	push	r29
    3518:	cf 93       	push	r28
    351a:	cd b7       	in	r28, 0x3d	; 61
    351c:	de b7       	in	r29, 0x3e	; 62
	if(UQFront==-1) return 0;
    351e:	80 91 f6 01 	lds	r24, 0x01F6
    3522:	8f 3f       	cpi	r24, 0xFF	; 255
    3524:	11 f4       	brne	.+4      	; 0x352a <UDataAvailable+0x14>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	21 c0       	rjmp	.+66     	; 0x356c <UDataAvailable+0x56>
	if(UQFront<UQEnd)
    352a:	90 91 f6 01 	lds	r25, 0x01F6
    352e:	80 91 f7 01 	lds	r24, 0x01F7
    3532:	98 17       	cp	r25, r24
    3534:	54 f4       	brge	.+20     	; 0x354a <UDataAvailable+0x34>
		return(UQEnd-UQFront+1);
    3536:	80 91 f7 01 	lds	r24, 0x01F7
    353a:	98 2f       	mov	r25, r24
    353c:	80 91 f6 01 	lds	r24, 0x01F6
    3540:	29 2f       	mov	r18, r25
    3542:	28 1b       	sub	r18, r24
    3544:	82 2f       	mov	r24, r18
    3546:	8f 5f       	subi	r24, 0xFF	; 255
    3548:	11 c0       	rjmp	.+34     	; 0x356c <UDataAvailable+0x56>
	else if(UQFront>UQEnd)
    354a:	90 91 f6 01 	lds	r25, 0x01F6
    354e:	80 91 f7 01 	lds	r24, 0x01F7
    3552:	89 17       	cp	r24, r25
    3554:	54 f4       	brge	.+20     	; 0x356a <UDataAvailable+0x54>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
    3556:	80 91 f7 01 	lds	r24, 0x01F7
    355a:	98 2f       	mov	r25, r24
    355c:	80 91 f6 01 	lds	r24, 0x01F6
    3560:	29 2f       	mov	r18, r25
    3562:	28 1b       	sub	r18, r24
    3564:	82 2f       	mov	r24, r18
    3566:	8f 5b       	subi	r24, 0xBF	; 191
    3568:	01 c0       	rjmp	.+2      	; 0x356c <UDataAvailable+0x56>
	else
		return 1;
    356a:	81 e0       	ldi	r24, 0x01	; 1
}
    356c:	cf 91       	pop	r28
    356e:	df 91       	pop	r29
    3570:	08 95       	ret

00003572 <UWriteString>:

void UWriteString(char *str)
{
    3572:	df 93       	push	r29
    3574:	cf 93       	push	r28
    3576:	00 d0       	rcall	.+0      	; 0x3578 <UWriteString+0x6>
    3578:	cd b7       	in	r28, 0x3d	; 61
    357a:	de b7       	in	r29, 0x3e	; 62
    357c:	9a 83       	std	Y+2, r25	; 0x02
    357e:	89 83       	std	Y+1, r24	; 0x01
	while((*str)!='\0')
    3580:	0b c0       	rjmp	.+22     	; 0x3598 <UWriteString+0x26>
	{
		UWriteData(*str);
    3582:	89 81       	ldd	r24, Y+1	; 0x01
    3584:	9a 81       	ldd	r25, Y+2	; 0x02
    3586:	fc 01       	movw	r30, r24
    3588:	80 81       	ld	r24, Z
    358a:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <UWriteData>
		str++;
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	9a 81       	ldd	r25, Y+2	; 0x02
    3592:	01 96       	adiw	r24, 0x01	; 1
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01
		return 1;
}

void UWriteString(char *str)
{
	while((*str)!='\0')
    3598:	89 81       	ldd	r24, Y+1	; 0x01
    359a:	9a 81       	ldd	r25, Y+2	; 0x02
    359c:	fc 01       	movw	r30, r24
    359e:	80 81       	ld	r24, Z
    35a0:	88 23       	and	r24, r24
    35a2:	79 f7       	brne	.-34     	; 0x3582 <UWriteString+0x10>
	{
		UWriteData(*str);
		str++;
	}
}
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <UReadBuffer>:

void UReadBuffer(void *buff,uint16_t len)
{
    35ae:	0f 93       	push	r16
    35b0:	1f 93       	push	r17
    35b2:	df 93       	push	r29
    35b4:	cf 93       	push	r28
    35b6:	00 d0       	rcall	.+0      	; 0x35b8 <UReadBuffer+0xa>
    35b8:	00 d0       	rcall	.+0      	; 0x35ba <UReadBuffer+0xc>
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <UReadBuffer+0xe>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	9c 83       	std	Y+4, r25	; 0x04
    35c2:	8b 83       	std	Y+3, r24	; 0x03
    35c4:	7e 83       	std	Y+6, r23	; 0x06
    35c6:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t i;
	for(i=0;i<len;i++)
    35c8:	1a 82       	std	Y+2, r1	; 0x02
    35ca:	19 82       	std	Y+1, r1	; 0x01
    35cc:	10 c0       	rjmp	.+32     	; 0x35ee <UReadBuffer+0x40>
	{
		((char*)buff)[i]=UReadData();
    35ce:	2b 81       	ldd	r18, Y+3	; 0x03
    35d0:	3c 81       	ldd	r19, Y+4	; 0x04
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	89 01       	movw	r16, r18
    35d8:	08 0f       	add	r16, r24
    35da:	19 1f       	adc	r17, r25
    35dc:	0e 94 3e 1a 	call	0x347c	; 0x347c <UReadData>
    35e0:	f8 01       	movw	r30, r16
    35e2:	80 83       	st	Z, r24
}

void UReadBuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	9a 81       	ldd	r25, Y+2	; 0x02
    35e8:	01 96       	adiw	r24, 0x01	; 1
    35ea:	9a 83       	std	Y+2, r25	; 0x02
    35ec:	89 83       	std	Y+1, r24	; 0x01
    35ee:	29 81       	ldd	r18, Y+1	; 0x01
    35f0:	3a 81       	ldd	r19, Y+2	; 0x02
    35f2:	8d 81       	ldd	r24, Y+5	; 0x05
    35f4:	9e 81       	ldd	r25, Y+6	; 0x06
    35f6:	28 17       	cp	r18, r24
    35f8:	39 07       	cpc	r19, r25
    35fa:	48 f3       	brcs	.-46     	; 0x35ce <UReadBuffer+0x20>
	{
		((char*)buff)[i]=UReadData();
	}
}
    35fc:	26 96       	adiw	r28, 0x06	; 6
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	cf 91       	pop	r28
    360a:	df 91       	pop	r29
    360c:	1f 91       	pop	r17
    360e:	0f 91       	pop	r16
    3610:	08 95       	ret

00003612 <UFlushBuffer>:
void UFlushBuffer()
{
    3612:	df 93       	push	r29
    3614:	cf 93       	push	r28
    3616:	cd b7       	in	r28, 0x3d	; 61
    3618:	de b7       	in	r29, 0x3e	; 62
	while(UDataAvailable()>0)
    361a:	02 c0       	rjmp	.+4      	; 0x3620 <UFlushBuffer+0xe>
	{
		UReadData();
    361c:	0e 94 3e 1a 	call	0x347c	; 0x347c <UReadData>
		((char*)buff)[i]=UReadData();
	}
}
void UFlushBuffer()
{
	while(UDataAvailable()>0)
    3620:	0e 94 8b 1a 	call	0x3516	; 0x3516 <UDataAvailable>
    3624:	88 23       	and	r24, r24
    3626:	d1 f7       	brne	.-12     	; 0x361c <UFlushBuffer+0xa>
	{
		UReadData();
	}
}
    3628:	cf 91       	pop	r28
    362a:	df 91       	pop	r29
    362c:	08 95       	ret

0000362e <main>:
#include "lib/sim300/sim300.h"


void Halt();
int main(void)
{
    362e:	0f 93       	push	r16
    3630:	1f 93       	push	r17
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	cd b7       	in	r28, 0x3d	; 61
    3638:	de b7       	in	r29, 0x3e	; 62
    363a:	cf 52       	subi	r28, 0x2F	; 47
    363c:	d1 40       	sbci	r29, 0x01	; 1
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
	//Initialize LCD Module
	LCDInit(LS_NONE);
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <LCDInit>
	
	//Intro Message
	LCDWriteString("SIM300 Demo !");
    364e:	88 ed       	ldi	r24, 0xD8	; 216
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	LCDWriteStringXY(0,1,"By Avinash Gupta");
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    365e:	86 ee       	ldi	r24, 0xE6	; 230
    3660:	90 e0       	ldi	r25, 0x00	; 0
    3662:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	aa e7       	ldi	r26, 0x7A	; 122
    366c:	b4 e4       	ldi	r27, 0x44	; 68
    366e:	8e 83       	std	Y+6, r24	; 0x06
    3670:	9f 83       	std	Y+7, r25	; 0x07
    3672:	a8 87       	std	Y+8, r26	; 0x08
    3674:	b9 87       	std	Y+9, r27	; 0x09
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    3676:	6e 81       	ldd	r22, Y+6	; 0x06
    3678:	7f 81       	ldd	r23, Y+7	; 0x07
    367a:	88 85       	ldd	r24, Y+8	; 0x08
    367c:	99 85       	ldd	r25, Y+9	; 0x09
    367e:	20 e0       	ldi	r18, 0x00	; 0
    3680:	30 e0       	ldi	r19, 0x00	; 0
    3682:	4a e7       	ldi	r20, 0x7A	; 122
    3684:	55 e4       	ldi	r21, 0x45	; 69
    3686:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	8a 87       	std	Y+10, r24	; 0x0a
    3690:	9b 87       	std	Y+11, r25	; 0x0b
    3692:	ac 87       	std	Y+12, r26	; 0x0c
    3694:	bd 87       	std	Y+13, r27	; 0x0d
	if (__tmp < 1.0)
    3696:	11 e0       	ldi	r17, 0x01	; 1
    3698:	6a 85       	ldd	r22, Y+10	; 0x0a
    369a:	7b 85       	ldd	r23, Y+11	; 0x0b
    369c:	8c 85       	ldd	r24, Y+12	; 0x0c
    369e:	9d 85       	ldd	r25, Y+13	; 0x0d
    36a0:	20 e0       	ldi	r18, 0x00	; 0
    36a2:	30 e0       	ldi	r19, 0x00	; 0
    36a4:	40 e8       	ldi	r20, 0x80	; 128
    36a6:	5f e3       	ldi	r21, 0x3F	; 63
    36a8:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    36ac:	88 23       	and	r24, r24
    36ae:	0c f0       	brlt	.+2      	; 0x36b2 <main+0x84>
    36b0:	10 e0       	ldi	r17, 0x00	; 0
    36b2:	11 23       	and	r17, r17
    36b4:	29 f0       	breq	.+10     	; 0x36c0 <main+0x92>
		__ticks = 1;
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	9f 87       	std	Y+15, r25	; 0x0f
    36bc:	8e 87       	std	Y+14, r24	; 0x0e
    36be:	46 c0       	rjmp	.+140    	; 0x374c <main+0x11e>
	else if (__tmp > 65535)
    36c0:	11 e0       	ldi	r17, 0x01	; 1
    36c2:	6a 85       	ldd	r22, Y+10	; 0x0a
    36c4:	7b 85       	ldd	r23, Y+11	; 0x0b
    36c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    36c8:	9d 85       	ldd	r25, Y+13	; 0x0d
    36ca:	20 e0       	ldi	r18, 0x00	; 0
    36cc:	3f ef       	ldi	r19, 0xFF	; 255
    36ce:	4f e7       	ldi	r20, 0x7F	; 127
    36d0:	57 e4       	ldi	r21, 0x47	; 71
    36d2:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    36d6:	18 16       	cp	r1, r24
    36d8:	0c f0       	brlt	.+2      	; 0x36dc <main+0xae>
    36da:	10 e0       	ldi	r17, 0x00	; 0
    36dc:	11 23       	and	r17, r17
    36de:	61 f1       	breq	.+88     	; 0x3738 <main+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36e0:	6e 81       	ldd	r22, Y+6	; 0x06
    36e2:	7f 81       	ldd	r23, Y+7	; 0x07
    36e4:	88 85       	ldd	r24, Y+8	; 0x08
    36e6:	99 85       	ldd	r25, Y+9	; 0x09
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e2       	ldi	r20, 0x20	; 32
    36ee:	51 e4       	ldi	r21, 0x41	; 65
    36f0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    36f4:	dc 01       	movw	r26, r24
    36f6:	cb 01       	movw	r24, r22
    36f8:	bc 01       	movw	r22, r24
    36fa:	cd 01       	movw	r24, r26
    36fc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3700:	dc 01       	movw	r26, r24
    3702:	cb 01       	movw	r24, r22
    3704:	9f 87       	std	Y+15, r25	; 0x0f
    3706:	8e 87       	std	Y+14, r24	; 0x0e
    3708:	12 c0       	rjmp	.+36     	; 0x372e <main+0x100>
    370a:	80 e9       	ldi	r24, 0x90	; 144
    370c:	91 e0       	ldi	r25, 0x01	; 1
    370e:	99 8b       	std	Y+17, r25	; 0x11
    3710:	88 8b       	std	Y+16, r24	; 0x10
    3712:	88 89       	ldd	r24, Y+16	; 0x10
    3714:	99 89       	ldd	r25, Y+17	; 0x11
    3716:	8c 01       	movw	r16, r24
    3718:	c8 01       	movw	r24, r16
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <main+0xec>
    371e:	8c 01       	movw	r16, r24
    3720:	19 8b       	std	Y+17, r17	; 0x11
    3722:	08 8b       	std	Y+16, r16	; 0x10
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3724:	8e 85       	ldd	r24, Y+14	; 0x0e
    3726:	9f 85       	ldd	r25, Y+15	; 0x0f
    3728:	01 97       	sbiw	r24, 0x01	; 1
    372a:	9f 87       	std	Y+15, r25	; 0x0f
    372c:	8e 87       	std	Y+14, r24	; 0x0e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    372e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3730:	9f 85       	ldd	r25, Y+15	; 0x0f
    3732:	00 97       	sbiw	r24, 0x00	; 0
    3734:	51 f7       	brne	.-44     	; 0x370a <main+0xdc>
    3736:	17 c0       	rjmp	.+46     	; 0x3766 <main+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3738:	6a 85       	ldd	r22, Y+10	; 0x0a
    373a:	7b 85       	ldd	r23, Y+11	; 0x0b
    373c:	8c 85       	ldd	r24, Y+12	; 0x0c
    373e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3740:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3744:	dc 01       	movw	r26, r24
    3746:	cb 01       	movw	r24, r22
    3748:	9f 87       	std	Y+15, r25	; 0x0f
    374a:	8e 87       	std	Y+14, r24	; 0x0e
    374c:	8e 85       	ldd	r24, Y+14	; 0x0e
    374e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3750:	9b 8b       	std	Y+19, r25	; 0x13
    3752:	8a 8b       	std	Y+18, r24	; 0x12
    3754:	8a 89       	ldd	r24, Y+18	; 0x12
    3756:	9b 89       	ldd	r25, Y+19	; 0x13
    3758:	8c 01       	movw	r16, r24
    375a:	f8 01       	movw	r30, r16
    375c:	31 97       	sbiw	r30, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <main+0x12e>
    3760:	8f 01       	movw	r16, r30
    3762:	1b 8b       	std	Y+19, r17	; 0x13
    3764:	0a 8b       	std	Y+18, r16	; 0x12
	
	_delay_ms(1000);
	
	LCDClear();
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	60 e0       	ldi	r22, 0x00	; 0
    376a:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	
	
	//Initialize SIM300 module
	LCDWriteString("Initializing ...");
    376e:	87 ef       	ldi	r24, 0xF7	; 247
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	int8_t r= SIM300Init();
    3776:	0e 94 73 14 	call	0x28e6	; 0x28e6 <SIM300Init>
    377a:	89 83       	std	Y+1, r24	; 0x01
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	aa e7       	ldi	r26, 0x7A	; 122
    3782:	b4 e4       	ldi	r27, 0x44	; 68
    3784:	8c 8b       	std	Y+20, r24	; 0x14
    3786:	9d 8b       	std	Y+21, r25	; 0x15
    3788:	ae 8b       	std	Y+22, r26	; 0x16
    378a:	bf 8b       	std	Y+23, r27	; 0x17
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    378c:	6c 89       	ldd	r22, Y+20	; 0x14
    378e:	7d 89       	ldd	r23, Y+21	; 0x15
    3790:	8e 89       	ldd	r24, Y+22	; 0x16
    3792:	9f 89       	ldd	r25, Y+23	; 0x17
    3794:	20 e0       	ldi	r18, 0x00	; 0
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	4a e7       	ldi	r20, 0x7A	; 122
    379a:	55 e4       	ldi	r21, 0x45	; 69
    379c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	88 8f       	std	Y+24, r24	; 0x18
    37a6:	99 8f       	std	Y+25, r25	; 0x19
    37a8:	aa 8f       	std	Y+26, r26	; 0x1a
    37aa:	bb 8f       	std	Y+27, r27	; 0x1b
	if (__tmp < 1.0)
    37ac:	11 e0       	ldi	r17, 0x01	; 1
    37ae:	68 8d       	ldd	r22, Y+24	; 0x18
    37b0:	79 8d       	ldd	r23, Y+25	; 0x19
    37b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37b4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e8       	ldi	r20, 0x80	; 128
    37bc:	5f e3       	ldi	r21, 0x3F	; 63
    37be:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    37c2:	88 23       	and	r24, r24
    37c4:	0c f0       	brlt	.+2      	; 0x37c8 <main+0x19a>
    37c6:	10 e0       	ldi	r17, 0x00	; 0
    37c8:	11 23       	and	r17, r17
    37ca:	29 f0       	breq	.+10     	; 0x37d6 <main+0x1a8>
		__ticks = 1;
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	9d 8f       	std	Y+29, r25	; 0x1d
    37d2:	8c 8f       	std	Y+28, r24	; 0x1c
    37d4:	46 c0       	rjmp	.+140    	; 0x3862 <main+0x234>
	else if (__tmp > 65535)
    37d6:	11 e0       	ldi	r17, 0x01	; 1
    37d8:	68 8d       	ldd	r22, Y+24	; 0x18
    37da:	79 8d       	ldd	r23, Y+25	; 0x19
    37dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    37de:	9b 8d       	ldd	r25, Y+27	; 0x1b
    37e0:	20 e0       	ldi	r18, 0x00	; 0
    37e2:	3f ef       	ldi	r19, 0xFF	; 255
    37e4:	4f e7       	ldi	r20, 0x7F	; 127
    37e6:	57 e4       	ldi	r21, 0x47	; 71
    37e8:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    37ec:	18 16       	cp	r1, r24
    37ee:	0c f0       	brlt	.+2      	; 0x37f2 <main+0x1c4>
    37f0:	10 e0       	ldi	r17, 0x00	; 0
    37f2:	11 23       	and	r17, r17
    37f4:	61 f1       	breq	.+88     	; 0x384e <main+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37f6:	6c 89       	ldd	r22, Y+20	; 0x14
    37f8:	7d 89       	ldd	r23, Y+21	; 0x15
    37fa:	8e 89       	ldd	r24, Y+22	; 0x16
    37fc:	9f 89       	ldd	r25, Y+23	; 0x17
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e2       	ldi	r20, 0x20	; 32
    3804:	51 e4       	ldi	r21, 0x41	; 65
    3806:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	bc 01       	movw	r22, r24
    3810:	cd 01       	movw	r24, r26
    3812:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3816:	dc 01       	movw	r26, r24
    3818:	cb 01       	movw	r24, r22
    381a:	9d 8f       	std	Y+29, r25	; 0x1d
    381c:	8c 8f       	std	Y+28, r24	; 0x1c
    381e:	12 c0       	rjmp	.+36     	; 0x3844 <main+0x216>
    3820:	80 e9       	ldi	r24, 0x90	; 144
    3822:	91 e0       	ldi	r25, 0x01	; 1
    3824:	9f 8f       	std	Y+31, r25	; 0x1f
    3826:	8e 8f       	std	Y+30, r24	; 0x1e
    3828:	8e 8d       	ldd	r24, Y+30	; 0x1e
    382a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    382c:	8c 01       	movw	r16, r24
    382e:	c8 01       	movw	r24, r16
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <main+0x202>
    3834:	8c 01       	movw	r16, r24
    3836:	1f 8f       	std	Y+31, r17	; 0x1f
    3838:	0e 8f       	std	Y+30, r16	; 0x1e
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    383a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    383c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    383e:	01 97       	sbiw	r24, 0x01	; 1
    3840:	9d 8f       	std	Y+29, r25	; 0x1d
    3842:	8c 8f       	std	Y+28, r24	; 0x1c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3844:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3846:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3848:	00 97       	sbiw	r24, 0x00	; 0
    384a:	51 f7       	brne	.-44     	; 0x3820 <main+0x1f2>
    384c:	17 c0       	rjmp	.+46     	; 0x387c <main+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    384e:	68 8d       	ldd	r22, Y+24	; 0x18
    3850:	79 8d       	ldd	r23, Y+25	; 0x19
    3852:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3854:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3856:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    385a:	dc 01       	movw	r26, r24
    385c:	cb 01       	movw	r24, r22
    385e:	9d 8f       	std	Y+29, r25	; 0x1d
    3860:	8c 8f       	std	Y+28, r24	; 0x1c
    3862:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3864:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3866:	99 a3       	std	Y+33, r25	; 0x21
    3868:	88 a3       	std	Y+32, r24	; 0x20
    386a:	88 a1       	ldd	r24, Y+32	; 0x20
    386c:	99 a1       	ldd	r25, Y+33	; 0x21
    386e:	8c 01       	movw	r16, r24
    3870:	f8 01       	movw	r30, r16
    3872:	31 97       	sbiw	r30, 0x01	; 1
    3874:	f1 f7       	brne	.-4      	; 0x3872 <main+0x244>
    3876:	8f 01       	movw	r16, r30
    3878:	19 a3       	std	Y+33, r17	; 0x21
    387a:	08 a3       	std	Y+32, r16	; 0x20
	
	_delay_ms(1000);
	
	//Check the status of initialization
	switch(r)
    387c:	89 81       	ldd	r24, Y+1	; 0x01
    387e:	99 27       	eor	r25, r25
    3880:	87 fd       	sbrc	r24, 7
    3882:	90 95       	com	r25
    3884:	ff ef       	ldi	r31, 0xFF	; 255
    3886:	8e 3f       	cpi	r24, 0xFE	; 254
    3888:	9f 07       	cpc	r25, r31
    388a:	69 f1       	breq	.+90     	; 0x38e6 <main+0x2b8>
    388c:	2f ef       	ldi	r18, 0xFF	; 255
    388e:	8f 3f       	cpi	r24, 0xFF	; 255
    3890:	92 07       	cpc	r25, r18
    3892:	2c f4       	brge	.+10     	; 0x389e <main+0x270>
    3894:	ef ef       	ldi	r30, 0xFF	; 255
    3896:	8d 3f       	cpi	r24, 0xFD	; 253
    3898:	9e 07       	cpc	r25, r30
    389a:	89 f0       	breq	.+34     	; 0x38be <main+0x290>
    389c:	2e c0       	rjmp	.+92     	; 0x38fa <main+0x2cc>
    389e:	ff ef       	ldi	r31, 0xFF	; 255
    38a0:	8f 3f       	cpi	r24, 0xFF	; 255
    38a2:	9f 07       	cpc	r25, r31
    38a4:	b1 f0       	breq	.+44     	; 0x38d2 <main+0x2a4>
    38a6:	81 30       	cpi	r24, 0x01	; 1
    38a8:	91 05       	cpc	r25, r1
    38aa:	39 f5       	brne	.+78     	; 0x38fa <main+0x2cc>
	{
		case SIM300_OK:
			LCDWriteStringXY(0,1,"OK !");
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	61 e0       	ldi	r22, 0x01	; 1
    38b0:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    38b4:	88 e0       	ldi	r24, 0x08	; 8
    38b6:	91 e0       	ldi	r25, 0x01	; 1
    38b8:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			break; 
    38bc:	28 c0       	rjmp	.+80     	; 0x390e <main+0x2e0>
		case SIM300_TIMEOUT:
			LCDWriteStringXY(0,1,"No response");
    38be:	80 e0       	ldi	r24, 0x00	; 0
    38c0:	61 e0       	ldi	r22, 0x01	; 1
    38c2:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    38c6:	8d e0       	ldi	r24, 0x0D	; 13
    38c8:	91 e0       	ldi	r25, 0x01	; 1
    38ca:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			Halt();
    38ce:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
		case SIM300_INVALID_RESPONSE:
			LCDWriteStringXY(0,1,"Inv response");
    38d2:	80 e0       	ldi	r24, 0x00	; 0
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    38da:	89 e1       	ldi	r24, 0x19	; 25
    38dc:	91 e0       	ldi	r25, 0x01	; 1
    38de:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			Halt();
    38e2:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
		case SIM300_FAIL:
			LCDWriteStringXY(0,1,"Fail");
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	61 e0       	ldi	r22, 0x01	; 1
    38ea:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    38ee:	86 e2       	ldi	r24, 0x26	; 38
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			Halt();
    38f6:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
		default:
			LCDWriteStringXY(0,1,"Unknown Error");
    38fa:	80 e0       	ldi	r24, 0x00	; 0
    38fc:	61 e0       	ldi	r22, 0x01	; 1
    38fe:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    3902:	8b e2       	ldi	r24, 0x2B	; 43
    3904:	91 e0       	ldi	r25, 0x01	; 1
    3906:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			Halt();	
    390a:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
    390e:	80 e0       	ldi	r24, 0x00	; 0
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	aa e7       	ldi	r26, 0x7A	; 122
    3914:	b4 e4       	ldi	r27, 0x44	; 68
    3916:	8a a3       	std	Y+34, r24	; 0x22
    3918:	9b a3       	std	Y+35, r25	; 0x23
    391a:	ac a3       	std	Y+36, r26	; 0x24
    391c:	bd a3       	std	Y+37, r27	; 0x25
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    391e:	6a a1       	ldd	r22, Y+34	; 0x22
    3920:	7b a1       	ldd	r23, Y+35	; 0x23
    3922:	8c a1       	ldd	r24, Y+36	; 0x24
    3924:	9d a1       	ldd	r25, Y+37	; 0x25
    3926:	20 e0       	ldi	r18, 0x00	; 0
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	4a e7       	ldi	r20, 0x7A	; 122
    392c:	55 e4       	ldi	r21, 0x45	; 69
    392e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3932:	dc 01       	movw	r26, r24
    3934:	cb 01       	movw	r24, r22
    3936:	8e a3       	std	Y+38, r24	; 0x26
    3938:	9f a3       	std	Y+39, r25	; 0x27
    393a:	a8 a7       	std	Y+40, r26	; 0x28
    393c:	b9 a7       	std	Y+41, r27	; 0x29
	if (__tmp < 1.0)
    393e:	11 e0       	ldi	r17, 0x01	; 1
    3940:	6e a1       	ldd	r22, Y+38	; 0x26
    3942:	7f a1       	ldd	r23, Y+39	; 0x27
    3944:	88 a5       	ldd	r24, Y+40	; 0x28
    3946:	99 a5       	ldd	r25, Y+41	; 0x29
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e8       	ldi	r20, 0x80	; 128
    394e:	5f e3       	ldi	r21, 0x3F	; 63
    3950:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    3954:	88 23       	and	r24, r24
    3956:	0c f0       	brlt	.+2      	; 0x395a <main+0x32c>
    3958:	10 e0       	ldi	r17, 0x00	; 0
    395a:	11 23       	and	r17, r17
    395c:	29 f0       	breq	.+10     	; 0x3968 <main+0x33a>
		__ticks = 1;
    395e:	81 e0       	ldi	r24, 0x01	; 1
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9b a7       	std	Y+43, r25	; 0x2b
    3964:	8a a7       	std	Y+42, r24	; 0x2a
    3966:	46 c0       	rjmp	.+140    	; 0x39f4 <main+0x3c6>
	else if (__tmp > 65535)
    3968:	11 e0       	ldi	r17, 0x01	; 1
    396a:	6e a1       	ldd	r22, Y+38	; 0x26
    396c:	7f a1       	ldd	r23, Y+39	; 0x27
    396e:	88 a5       	ldd	r24, Y+40	; 0x28
    3970:	99 a5       	ldd	r25, Y+41	; 0x29
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	3f ef       	ldi	r19, 0xFF	; 255
    3976:	4f e7       	ldi	r20, 0x7F	; 127
    3978:	57 e4       	ldi	r21, 0x47	; 71
    397a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    397e:	18 16       	cp	r1, r24
    3980:	0c f0       	brlt	.+2      	; 0x3984 <main+0x356>
    3982:	10 e0       	ldi	r17, 0x00	; 0
    3984:	11 23       	and	r17, r17
    3986:	61 f1       	breq	.+88     	; 0x39e0 <main+0x3b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3988:	6a a1       	ldd	r22, Y+34	; 0x22
    398a:	7b a1       	ldd	r23, Y+35	; 0x23
    398c:	8c a1       	ldd	r24, Y+36	; 0x24
    398e:	9d a1       	ldd	r25, Y+37	; 0x25
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	40 e2       	ldi	r20, 0x20	; 32
    3996:	51 e4       	ldi	r21, 0x41	; 65
    3998:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	bc 01       	movw	r22, r24
    39a2:	cd 01       	movw	r24, r26
    39a4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    39a8:	dc 01       	movw	r26, r24
    39aa:	cb 01       	movw	r24, r22
    39ac:	9b a7       	std	Y+43, r25	; 0x2b
    39ae:	8a a7       	std	Y+42, r24	; 0x2a
    39b0:	12 c0       	rjmp	.+36     	; 0x39d6 <main+0x3a8>
    39b2:	80 e9       	ldi	r24, 0x90	; 144
    39b4:	91 e0       	ldi	r25, 0x01	; 1
    39b6:	9d a7       	std	Y+45, r25	; 0x2d
    39b8:	8c a7       	std	Y+44, r24	; 0x2c
    39ba:	8c a5       	ldd	r24, Y+44	; 0x2c
    39bc:	9d a5       	ldd	r25, Y+45	; 0x2d
    39be:	8c 01       	movw	r16, r24
    39c0:	c8 01       	movw	r24, r16
    39c2:	01 97       	sbiw	r24, 0x01	; 1
    39c4:	f1 f7       	brne	.-4      	; 0x39c2 <main+0x394>
    39c6:	8c 01       	movw	r16, r24
    39c8:	1d a7       	std	Y+45, r17	; 0x2d
    39ca:	0c a7       	std	Y+44, r16	; 0x2c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39cc:	8a a5       	ldd	r24, Y+42	; 0x2a
    39ce:	9b a5       	ldd	r25, Y+43	; 0x2b
    39d0:	01 97       	sbiw	r24, 0x01	; 1
    39d2:	9b a7       	std	Y+43, r25	; 0x2b
    39d4:	8a a7       	std	Y+42, r24	; 0x2a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39d6:	8a a5       	ldd	r24, Y+42	; 0x2a
    39d8:	9b a5       	ldd	r25, Y+43	; 0x2b
    39da:	00 97       	sbiw	r24, 0x00	; 0
    39dc:	51 f7       	brne	.-44     	; 0x39b2 <main+0x384>
    39de:	17 c0       	rjmp	.+46     	; 0x3a0e <main+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e0:	6e a1       	ldd	r22, Y+38	; 0x26
    39e2:	7f a1       	ldd	r23, Y+39	; 0x27
    39e4:	88 a5       	ldd	r24, Y+40	; 0x28
    39e6:	99 a5       	ldd	r25, Y+41	; 0x29
    39e8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    39ec:	dc 01       	movw	r26, r24
    39ee:	cb 01       	movw	r24, r22
    39f0:	9b a7       	std	Y+43, r25	; 0x2b
    39f2:	8a a7       	std	Y+42, r24	; 0x2a
    39f4:	8a a5       	ldd	r24, Y+42	; 0x2a
    39f6:	9b a5       	ldd	r25, Y+43	; 0x2b
    39f8:	9f a7       	std	Y+47, r25	; 0x2f
    39fa:	8e a7       	std	Y+46, r24	; 0x2e
    39fc:	8e a5       	ldd	r24, Y+46	; 0x2e
    39fe:	9f a5       	ldd	r25, Y+47	; 0x2f
    3a00:	8c 01       	movw	r16, r24
    3a02:	f8 01       	movw	r30, r16
    3a04:	31 97       	sbiw	r30, 0x01	; 1
    3a06:	f1 f7       	brne	.-4      	; 0x3a04 <main+0x3d6>
    3a08:	8f 01       	movw	r16, r30
    3a0a:	1f a7       	std	Y+47, r17	; 0x2f
    3a0c:	0e a7       	std	Y+46, r16	; 0x2e
	}
	
	_delay_ms(1000);
	
	//IMEI No display
	LCDClear();
    3a0e:	81 e0       	ldi	r24, 0x01	; 1
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	
	char imei[16];
	
	r=SIM300GetIMEI(imei);
    3a16:	ce 01       	movw	r24, r28
    3a18:	80 56       	subi	r24, 0x60	; 96
    3a1a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a1c:	0e 94 27 19 	call	0x324e	; 0x324e <SIM300GetIMEI>
    3a20:	89 83       	std	Y+1, r24	; 0x01
	
	if(r==SIM300_TIMEOUT)
    3a22:	89 81       	ldd	r24, Y+1	; 0x01
    3a24:	8d 3f       	cpi	r24, 0xFD	; 253
    3a26:	31 f4       	brne	.+12     	; 0x3a34 <main+0x406>
	{
		LCDWriteString("Comm Error !");
    3a28:	89 e3       	ldi	r24, 0x39	; 57
    3a2a:	91 e0       	ldi	r25, 0x01	; 1
    3a2c:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		Halt();
    3a30:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
	}
	
	LCDWriteString("Device IMEI:");
    3a34:	86 e4       	ldi	r24, 0x46	; 70
    3a36:	91 e0       	ldi	r25, 0x01	; 1
    3a38:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	LCDWriteStringXY(0,1,imei);
    3a3c:	80 e0       	ldi	r24, 0x00	; 0
    3a3e:	61 e0       	ldi	r22, 0x01	; 1
    3a40:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    3a44:	ce 01       	movw	r24, r28
    3a46:	80 56       	subi	r24, 0x60	; 96
    3a48:	9f 4f       	sbci	r25, 0xFF	; 255
    3a4a:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	90 e0       	ldi	r25, 0x00	; 0
    3a52:	aa e7       	ldi	r26, 0x7A	; 122
    3a54:	b4 e4       	ldi	r27, 0x44	; 68
    3a56:	88 ab       	std	Y+48, r24	; 0x30
    3a58:	99 ab       	std	Y+49, r25	; 0x31
    3a5a:	aa ab       	std	Y+50, r26	; 0x32
    3a5c:	bb ab       	std	Y+51, r27	; 0x33
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    3a5e:	68 a9       	ldd	r22, Y+48	; 0x30
    3a60:	79 a9       	ldd	r23, Y+49	; 0x31
    3a62:	8a a9       	ldd	r24, Y+50	; 0x32
    3a64:	9b a9       	ldd	r25, Y+51	; 0x33
    3a66:	20 e0       	ldi	r18, 0x00	; 0
    3a68:	30 e0       	ldi	r19, 0x00	; 0
    3a6a:	4a e7       	ldi	r20, 0x7A	; 122
    3a6c:	55 e4       	ldi	r21, 0x45	; 69
    3a6e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3a72:	dc 01       	movw	r26, r24
    3a74:	cb 01       	movw	r24, r22
    3a76:	8c ab       	std	Y+52, r24	; 0x34
    3a78:	9d ab       	std	Y+53, r25	; 0x35
    3a7a:	ae ab       	std	Y+54, r26	; 0x36
    3a7c:	bf ab       	std	Y+55, r27	; 0x37
	if (__tmp < 1.0)
    3a7e:	11 e0       	ldi	r17, 0x01	; 1
    3a80:	6c a9       	ldd	r22, Y+52	; 0x34
    3a82:	7d a9       	ldd	r23, Y+53	; 0x35
    3a84:	8e a9       	ldd	r24, Y+54	; 0x36
    3a86:	9f a9       	ldd	r25, Y+55	; 0x37
    3a88:	20 e0       	ldi	r18, 0x00	; 0
    3a8a:	30 e0       	ldi	r19, 0x00	; 0
    3a8c:	40 e8       	ldi	r20, 0x80	; 128
    3a8e:	5f e3       	ldi	r21, 0x3F	; 63
    3a90:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    3a94:	88 23       	and	r24, r24
    3a96:	0c f0       	brlt	.+2      	; 0x3a9a <main+0x46c>
    3a98:	10 e0       	ldi	r17, 0x00	; 0
    3a9a:	11 23       	and	r17, r17
    3a9c:	29 f0       	breq	.+10     	; 0x3aa8 <main+0x47a>
		__ticks = 1;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	99 af       	std	Y+57, r25	; 0x39
    3aa4:	88 af       	std	Y+56, r24	; 0x38
    3aa6:	46 c0       	rjmp	.+140    	; 0x3b34 <main+0x506>
	else if (__tmp > 65535)
    3aa8:	11 e0       	ldi	r17, 0x01	; 1
    3aaa:	6c a9       	ldd	r22, Y+52	; 0x34
    3aac:	7d a9       	ldd	r23, Y+53	; 0x35
    3aae:	8e a9       	ldd	r24, Y+54	; 0x36
    3ab0:	9f a9       	ldd	r25, Y+55	; 0x37
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	3f ef       	ldi	r19, 0xFF	; 255
    3ab6:	4f e7       	ldi	r20, 0x7F	; 127
    3ab8:	57 e4       	ldi	r21, 0x47	; 71
    3aba:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    3abe:	18 16       	cp	r1, r24
    3ac0:	0c f0       	brlt	.+2      	; 0x3ac4 <main+0x496>
    3ac2:	10 e0       	ldi	r17, 0x00	; 0
    3ac4:	11 23       	and	r17, r17
    3ac6:	61 f1       	breq	.+88     	; 0x3b20 <main+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ac8:	68 a9       	ldd	r22, Y+48	; 0x30
    3aca:	79 a9       	ldd	r23, Y+49	; 0x31
    3acc:	8a a9       	ldd	r24, Y+50	; 0x32
    3ace:	9b a9       	ldd	r25, Y+51	; 0x33
    3ad0:	20 e0       	ldi	r18, 0x00	; 0
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	40 e2       	ldi	r20, 0x20	; 32
    3ad6:	51 e4       	ldi	r21, 0x41	; 65
    3ad8:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3adc:	dc 01       	movw	r26, r24
    3ade:	cb 01       	movw	r24, r22
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	99 af       	std	Y+57, r25	; 0x39
    3aee:	88 af       	std	Y+56, r24	; 0x38
    3af0:	12 c0       	rjmp	.+36     	; 0x3b16 <main+0x4e8>
    3af2:	80 e9       	ldi	r24, 0x90	; 144
    3af4:	91 e0       	ldi	r25, 0x01	; 1
    3af6:	9b af       	std	Y+59, r25	; 0x3b
    3af8:	8a af       	std	Y+58, r24	; 0x3a
    3afa:	8a ad       	ldd	r24, Y+58	; 0x3a
    3afc:	9b ad       	ldd	r25, Y+59	; 0x3b
    3afe:	8c 01       	movw	r16, r24
    3b00:	c8 01       	movw	r24, r16
    3b02:	01 97       	sbiw	r24, 0x01	; 1
    3b04:	f1 f7       	brne	.-4      	; 0x3b02 <main+0x4d4>
    3b06:	8c 01       	movw	r16, r24
    3b08:	1b af       	std	Y+59, r17	; 0x3b
    3b0a:	0a af       	std	Y+58, r16	; 0x3a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b0c:	88 ad       	ldd	r24, Y+56	; 0x38
    3b0e:	99 ad       	ldd	r25, Y+57	; 0x39
    3b10:	01 97       	sbiw	r24, 0x01	; 1
    3b12:	99 af       	std	Y+57, r25	; 0x39
    3b14:	88 af       	std	Y+56, r24	; 0x38
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b16:	88 ad       	ldd	r24, Y+56	; 0x38
    3b18:	99 ad       	ldd	r25, Y+57	; 0x39
    3b1a:	00 97       	sbiw	r24, 0x00	; 0
    3b1c:	51 f7       	brne	.-44     	; 0x3af2 <main+0x4c4>
    3b1e:	17 c0       	rjmp	.+46     	; 0x3b4e <main+0x520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b20:	6c a9       	ldd	r22, Y+52	; 0x34
    3b22:	7d a9       	ldd	r23, Y+53	; 0x35
    3b24:	8e a9       	ldd	r24, Y+54	; 0x36
    3b26:	9f a9       	ldd	r25, Y+55	; 0x37
    3b28:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	99 af       	std	Y+57, r25	; 0x39
    3b32:	88 af       	std	Y+56, r24	; 0x38
    3b34:	88 ad       	ldd	r24, Y+56	; 0x38
    3b36:	99 ad       	ldd	r25, Y+57	; 0x39
    3b38:	9d af       	std	Y+61, r25	; 0x3d
    3b3a:	8c af       	std	Y+60, r24	; 0x3c
    3b3c:	8c ad       	ldd	r24, Y+60	; 0x3c
    3b3e:	9d ad       	ldd	r25, Y+61	; 0x3d
    3b40:	8c 01       	movw	r16, r24
    3b42:	f8 01       	movw	r30, r16
    3b44:	31 97       	sbiw	r30, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <main+0x516>
    3b48:	8f 01       	movw	r16, r30
    3b4a:	1d af       	std	Y+61, r17	; 0x3d
    3b4c:	0c af       	std	Y+60, r16	; 0x3c
	
	_delay_ms(1000);
	
	//Manufacturer ID
	LCDClear();
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	60 e0       	ldi	r22, 0x00	; 0
    3b52:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	
	char man_id[48];
	
	r=SIM300GetManufacturer(man_id);
    3b56:	ce 01       	movw	r24, r28
    3b58:	80 55       	subi	r24, 0x50	; 80
    3b5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b5c:	0e 94 55 19 	call	0x32aa	; 0x32aa <SIM300GetManufacturer>
    3b60:	89 83       	std	Y+1, r24	; 0x01
	
	if(r==SIM300_TIMEOUT)
    3b62:	89 81       	ldd	r24, Y+1	; 0x01
    3b64:	8d 3f       	cpi	r24, 0xFD	; 253
    3b66:	31 f4       	brne	.+12     	; 0x3b74 <main+0x546>
	{
		LCDWriteString("Comm Error !");
    3b68:	89 e3       	ldi	r24, 0x39	; 57
    3b6a:	91 e0       	ldi	r25, 0x01	; 1
    3b6c:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		Halt();
    3b70:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
	}
	
	LCDWriteString("Manufacturer:");
    3b74:	83 e5       	ldi	r24, 0x53	; 83
    3b76:	91 e0       	ldi	r25, 0x01	; 1
    3b78:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	LCDWriteStringXY(0,1,man_id);
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	61 e0       	ldi	r22, 0x01	; 1
    3b80:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    3b84:	ce 01       	movw	r24, r28
    3b86:	80 55       	subi	r24, 0x50	; 80
    3b88:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8a:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    3b8e:	9e 01       	movw	r18, r28
    3b90:	22 5c       	subi	r18, 0xC2	; 194
    3b92:	3f 4f       	sbci	r19, 0xFF	; 255
    3b94:	80 e0       	ldi	r24, 0x00	; 0
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	aa e7       	ldi	r26, 0x7A	; 122
    3b9a:	b4 e4       	ldi	r27, 0x44	; 68
    3b9c:	f9 01       	movw	r30, r18
    3b9e:	80 83       	st	Z, r24
    3ba0:	91 83       	std	Z+1, r25	; 0x01
    3ba2:	a2 83       	std	Z+2, r26	; 0x02
    3ba4:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    3ba6:	8e 01       	movw	r16, r28
    3ba8:	0e 5b       	subi	r16, 0xBE	; 190
    3baa:	1f 4f       	sbci	r17, 0xFF	; 255
    3bac:	ce 01       	movw	r24, r28
    3bae:	ce 96       	adiw	r24, 0x3e	; 62
    3bb0:	fc 01       	movw	r30, r24
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	20 e0       	ldi	r18, 0x00	; 0
    3bbc:	30 e0       	ldi	r19, 0x00	; 0
    3bbe:	4a e7       	ldi	r20, 0x7A	; 122
    3bc0:	55 e4       	ldi	r21, 0x45	; 69
    3bc2:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3bc6:	dc 01       	movw	r26, r24
    3bc8:	cb 01       	movw	r24, r22
    3bca:	f8 01       	movw	r30, r16
    3bcc:	80 83       	st	Z, r24
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	a2 83       	std	Z+2, r26	; 0x02
    3bd2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	8e 5b       	subi	r24, 0xBE	; 190
    3bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    3bda:	11 e0       	ldi	r17, 0x01	; 1
    3bdc:	fc 01       	movw	r30, r24
    3bde:	60 81       	ld	r22, Z
    3be0:	71 81       	ldd	r23, Z+1	; 0x01
    3be2:	82 81       	ldd	r24, Z+2	; 0x02
    3be4:	93 81       	ldd	r25, Z+3	; 0x03
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	0c f0       	brlt	.+2      	; 0x3bf8 <main+0x5ca>
    3bf6:	10 e0       	ldi	r17, 0x00	; 0
    3bf8:	11 23       	and	r17, r17
    3bfa:	49 f0       	breq	.+18     	; 0x3c0e <main+0x5e0>
		__ticks = 1;
    3bfc:	ce 01       	movw	r24, r28
    3bfe:	8a 5b       	subi	r24, 0xBA	; 186
    3c00:	9f 4f       	sbci	r25, 0xFF	; 255
    3c02:	21 e0       	ldi	r18, 0x01	; 1
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	fc 01       	movw	r30, r24
    3c08:	31 83       	std	Z+1, r19	; 0x01
    3c0a:	20 83       	st	Z, r18
    3c0c:	73 c0       	rjmp	.+230    	; 0x3cf4 <main+0x6c6>
	else if (__tmp > 65535)
    3c0e:	ce 01       	movw	r24, r28
    3c10:	8e 5b       	subi	r24, 0xBE	; 190
    3c12:	9f 4f       	sbci	r25, 0xFF	; 255
    3c14:	11 e0       	ldi	r17, 0x01	; 1
    3c16:	fc 01       	movw	r30, r24
    3c18:	60 81       	ld	r22, Z
    3c1a:	71 81       	ldd	r23, Z+1	; 0x01
    3c1c:	82 81       	ldd	r24, Z+2	; 0x02
    3c1e:	93 81       	ldd	r25, Z+3	; 0x03
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	3f ef       	ldi	r19, 0xFF	; 255
    3c24:	4f e7       	ldi	r20, 0x7F	; 127
    3c26:	57 e4       	ldi	r21, 0x47	; 71
    3c28:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    3c2c:	18 16       	cp	r1, r24
    3c2e:	0c f0       	brlt	.+2      	; 0x3c32 <main+0x604>
    3c30:	10 e0       	ldi	r17, 0x00	; 0
    3c32:	11 23       	and	r17, r17
    3c34:	09 f4       	brne	.+2      	; 0x3c38 <main+0x60a>
    3c36:	4c c0       	rjmp	.+152    	; 0x3cd0 <main+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c38:	ce 01       	movw	r24, r28
    3c3a:	ce 96       	adiw	r24, 0x3e	; 62
    3c3c:	fc 01       	movw	r30, r24
    3c3e:	60 81       	ld	r22, Z
    3c40:	71 81       	ldd	r23, Z+1	; 0x01
    3c42:	82 81       	ldd	r24, Z+2	; 0x02
    3c44:	93 81       	ldd	r25, Z+3	; 0x03
    3c46:	20 e0       	ldi	r18, 0x00	; 0
    3c48:	30 e0       	ldi	r19, 0x00	; 0
    3c4a:	40 e2       	ldi	r20, 0x20	; 32
    3c4c:	51 e4       	ldi	r21, 0x41	; 65
    3c4e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3c52:	dc 01       	movw	r26, r24
    3c54:	cb 01       	movw	r24, r22
    3c56:	8e 01       	movw	r16, r28
    3c58:	0a 5b       	subi	r16, 0xBA	; 186
    3c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5c:	bc 01       	movw	r22, r24
    3c5e:	cd 01       	movw	r24, r26
    3c60:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3c64:	dc 01       	movw	r26, r24
    3c66:	cb 01       	movw	r24, r22
    3c68:	f8 01       	movw	r30, r16
    3c6a:	91 83       	std	Z+1, r25	; 0x01
    3c6c:	80 83       	st	Z, r24
    3c6e:	27 c0       	rjmp	.+78     	; 0x3cbe <main+0x690>
    3c70:	ce 01       	movw	r24, r28
    3c72:	88 5b       	subi	r24, 0xB8	; 184
    3c74:	9f 4f       	sbci	r25, 0xFF	; 255
    3c76:	20 e9       	ldi	r18, 0x90	; 144
    3c78:	31 e0       	ldi	r19, 0x01	; 1
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	31 83       	std	Z+1, r19	; 0x01
    3c7e:	20 83       	st	Z, r18
    3c80:	ce 01       	movw	r24, r28
    3c82:	88 5b       	subi	r24, 0xB8	; 184
    3c84:	9f 4f       	sbci	r25, 0xFF	; 255
    3c86:	fc 01       	movw	r30, r24
    3c88:	80 81       	ld	r24, Z
    3c8a:	91 81       	ldd	r25, Z+1	; 0x01
    3c8c:	8c 01       	movw	r16, r24
    3c8e:	c8 01       	movw	r24, r16
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <main+0x662>
    3c94:	8c 01       	movw	r16, r24
    3c96:	ce 01       	movw	r24, r28
    3c98:	88 5b       	subi	r24, 0xB8	; 184
    3c9a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c9c:	fc 01       	movw	r30, r24
    3c9e:	11 83       	std	Z+1, r17	; 0x01
    3ca0:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	8a 5b       	subi	r24, 0xBA	; 186
    3ca6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca8:	9e 01       	movw	r18, r28
    3caa:	2a 5b       	subi	r18, 0xBA	; 186
    3cac:	3f 4f       	sbci	r19, 0xFF	; 255
    3cae:	f9 01       	movw	r30, r18
    3cb0:	20 81       	ld	r18, Z
    3cb2:	31 81       	ldd	r19, Z+1	; 0x01
    3cb4:	21 50       	subi	r18, 0x01	; 1
    3cb6:	30 40       	sbci	r19, 0x00	; 0
    3cb8:	fc 01       	movw	r30, r24
    3cba:	31 83       	std	Z+1, r19	; 0x01
    3cbc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cbe:	ce 01       	movw	r24, r28
    3cc0:	8a 5b       	subi	r24, 0xBA	; 186
    3cc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc4:	fc 01       	movw	r30, r24
    3cc6:	80 81       	ld	r24, Z
    3cc8:	91 81       	ldd	r25, Z+1	; 0x01
    3cca:	00 97       	sbiw	r24, 0x00	; 0
    3ccc:	89 f6       	brne	.-94     	; 0x3c70 <main+0x642>
    3cce:	2f c0       	rjmp	.+94     	; 0x3d2e <main+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cd0:	8e 01       	movw	r16, r28
    3cd2:	0a 5b       	subi	r16, 0xBA	; 186
    3cd4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cd6:	ce 01       	movw	r24, r28
    3cd8:	8e 5b       	subi	r24, 0xBE	; 190
    3cda:	9f 4f       	sbci	r25, 0xFF	; 255
    3cdc:	fc 01       	movw	r30, r24
    3cde:	60 81       	ld	r22, Z
    3ce0:	71 81       	ldd	r23, Z+1	; 0x01
    3ce2:	82 81       	ldd	r24, Z+2	; 0x02
    3ce4:	93 81       	ldd	r25, Z+3	; 0x03
    3ce6:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3cea:	dc 01       	movw	r26, r24
    3cec:	cb 01       	movw	r24, r22
    3cee:	f8 01       	movw	r30, r16
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	80 83       	st	Z, r24
    3cf4:	ce 01       	movw	r24, r28
    3cf6:	86 5b       	subi	r24, 0xB6	; 182
    3cf8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cfa:	9e 01       	movw	r18, r28
    3cfc:	2a 5b       	subi	r18, 0xBA	; 186
    3cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    3d00:	f9 01       	movw	r30, r18
    3d02:	20 81       	ld	r18, Z
    3d04:	31 81       	ldd	r19, Z+1	; 0x01
    3d06:	fc 01       	movw	r30, r24
    3d08:	31 83       	std	Z+1, r19	; 0x01
    3d0a:	20 83       	st	Z, r18
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	86 5b       	subi	r24, 0xB6	; 182
    3d10:	9f 4f       	sbci	r25, 0xFF	; 255
    3d12:	fc 01       	movw	r30, r24
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	8c 01       	movw	r16, r24
    3d1a:	c8 01       	movw	r24, r16
    3d1c:	01 97       	sbiw	r24, 0x01	; 1
    3d1e:	f1 f7       	brne	.-4      	; 0x3d1c <main+0x6ee>
    3d20:	8c 01       	movw	r16, r24
    3d22:	ce 01       	movw	r24, r28
    3d24:	86 5b       	subi	r24, 0xB6	; 182
    3d26:	9f 4f       	sbci	r25, 0xFF	; 255
    3d28:	fc 01       	movw	r30, r24
    3d2a:	11 83       	std	Z+1, r17	; 0x01
    3d2c:	00 83       	st	Z, r16
	
	_delay_ms(1000);
	
	//Manufacturer ID
	LCDClear();
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	60 e0       	ldi	r22, 0x00	; 0
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	
	char model[48];
	
	r=SIM300GetModel(model);
    3d36:	ce 01       	movw	r24, r28
    3d38:	80 52       	subi	r24, 0x20	; 32
    3d3a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d3c:	0e 94 83 19 	call	0x3306	; 0x3306 <SIM300GetModel>
    3d40:	89 83       	std	Y+1, r24	; 0x01
	
	if(r==SIM300_TIMEOUT)
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	8d 3f       	cpi	r24, 0xFD	; 253
    3d46:	31 f4       	brne	.+12     	; 0x3d54 <main+0x726>
	{
		LCDWriteString("Comm Error !");
    3d48:	89 e3       	ldi	r24, 0x39	; 57
    3d4a:	91 e0       	ldi	r25, 0x01	; 1
    3d4c:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		Halt();
    3d50:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
	}
	
	LCDWriteString("Model:");
    3d54:	81 e6       	ldi	r24, 0x61	; 97
    3d56:	91 e0       	ldi	r25, 0x01	; 1
    3d58:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	LCDWriteStringXY(0,1,model);
    3d5c:	80 e0       	ldi	r24, 0x00	; 0
    3d5e:	61 e0       	ldi	r22, 0x01	; 1
    3d60:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    3d64:	ce 01       	movw	r24, r28
    3d66:	80 52       	subi	r24, 0x20	; 32
    3d68:	9f 4f       	sbci	r25, 0xFF	; 255
    3d6a:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    3d6e:	9e 01       	movw	r18, r28
    3d70:	24 5b       	subi	r18, 0xB4	; 180
    3d72:	3f 4f       	sbci	r19, 0xFF	; 255
    3d74:	80 e0       	ldi	r24, 0x00	; 0
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	aa e7       	ldi	r26, 0x7A	; 122
    3d7a:	b4 e4       	ldi	r27, 0x44	; 68
    3d7c:	f9 01       	movw	r30, r18
    3d7e:	80 83       	st	Z, r24
    3d80:	91 83       	std	Z+1, r25	; 0x01
    3d82:	a2 83       	std	Z+2, r26	; 0x02
    3d84:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    3d86:	8e 01       	movw	r16, r28
    3d88:	00 5b       	subi	r16, 0xB0	; 176
    3d8a:	1f 4f       	sbci	r17, 0xFF	; 255
    3d8c:	ce 01       	movw	r24, r28
    3d8e:	84 5b       	subi	r24, 0xB4	; 180
    3d90:	9f 4f       	sbci	r25, 0xFF	; 255
    3d92:	fc 01       	movw	r30, r24
    3d94:	60 81       	ld	r22, Z
    3d96:	71 81       	ldd	r23, Z+1	; 0x01
    3d98:	82 81       	ldd	r24, Z+2	; 0x02
    3d9a:	93 81       	ldd	r25, Z+3	; 0x03
    3d9c:	20 e0       	ldi	r18, 0x00	; 0
    3d9e:	30 e0       	ldi	r19, 0x00	; 0
    3da0:	4a e7       	ldi	r20, 0x7A	; 122
    3da2:	55 e4       	ldi	r21, 0x45	; 69
    3da4:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3da8:	dc 01       	movw	r26, r24
    3daa:	cb 01       	movw	r24, r22
    3dac:	f8 01       	movw	r30, r16
    3dae:	80 83       	st	Z, r24
    3db0:	91 83       	std	Z+1, r25	; 0x01
    3db2:	a2 83       	std	Z+2, r26	; 0x02
    3db4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3db6:	ce 01       	movw	r24, r28
    3db8:	80 5b       	subi	r24, 0xB0	; 176
    3dba:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbc:	11 e0       	ldi	r17, 0x01	; 1
    3dbe:	fc 01       	movw	r30, r24
    3dc0:	60 81       	ld	r22, Z
    3dc2:	71 81       	ldd	r23, Z+1	; 0x01
    3dc4:	82 81       	ldd	r24, Z+2	; 0x02
    3dc6:	93 81       	ldd	r25, Z+3	; 0x03
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e8       	ldi	r20, 0x80	; 128
    3dce:	5f e3       	ldi	r21, 0x3F	; 63
    3dd0:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    3dd4:	88 23       	and	r24, r24
    3dd6:	0c f0       	brlt	.+2      	; 0x3dda <main+0x7ac>
    3dd8:	10 e0       	ldi	r17, 0x00	; 0
    3dda:	11 23       	and	r17, r17
    3ddc:	49 f0       	breq	.+18     	; 0x3df0 <main+0x7c2>
		__ticks = 1;
    3dde:	ce 01       	movw	r24, r28
    3de0:	8c 5a       	subi	r24, 0xAC	; 172
    3de2:	9f 4f       	sbci	r25, 0xFF	; 255
    3de4:	21 e0       	ldi	r18, 0x01	; 1
    3de6:	30 e0       	ldi	r19, 0x00	; 0
    3de8:	fc 01       	movw	r30, r24
    3dea:	31 83       	std	Z+1, r19	; 0x01
    3dec:	20 83       	st	Z, r18
    3dee:	74 c0       	rjmp	.+232    	; 0x3ed8 <main+0x8aa>
	else if (__tmp > 65535)
    3df0:	ce 01       	movw	r24, r28
    3df2:	80 5b       	subi	r24, 0xB0	; 176
    3df4:	9f 4f       	sbci	r25, 0xFF	; 255
    3df6:	11 e0       	ldi	r17, 0x01	; 1
    3df8:	fc 01       	movw	r30, r24
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	3f ef       	ldi	r19, 0xFF	; 255
    3e06:	4f e7       	ldi	r20, 0x7F	; 127
    3e08:	57 e4       	ldi	r21, 0x47	; 71
    3e0a:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    3e0e:	18 16       	cp	r1, r24
    3e10:	0c f0       	brlt	.+2      	; 0x3e14 <main+0x7e6>
    3e12:	10 e0       	ldi	r17, 0x00	; 0
    3e14:	11 23       	and	r17, r17
    3e16:	09 f4       	brne	.+2      	; 0x3e1a <main+0x7ec>
    3e18:	4d c0       	rjmp	.+154    	; 0x3eb4 <main+0x886>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e1a:	ce 01       	movw	r24, r28
    3e1c:	84 5b       	subi	r24, 0xB4	; 180
    3e1e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e20:	fc 01       	movw	r30, r24
    3e22:	60 81       	ld	r22, Z
    3e24:	71 81       	ldd	r23, Z+1	; 0x01
    3e26:	82 81       	ldd	r24, Z+2	; 0x02
    3e28:	93 81       	ldd	r25, Z+3	; 0x03
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	30 e0       	ldi	r19, 0x00	; 0
    3e2e:	40 e2       	ldi	r20, 0x20	; 32
    3e30:	51 e4       	ldi	r21, 0x41	; 65
    3e32:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3e36:	dc 01       	movw	r26, r24
    3e38:	cb 01       	movw	r24, r22
    3e3a:	8e 01       	movw	r16, r28
    3e3c:	0c 5a       	subi	r16, 0xAC	; 172
    3e3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3e40:	bc 01       	movw	r22, r24
    3e42:	cd 01       	movw	r24, r26
    3e44:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3e48:	dc 01       	movw	r26, r24
    3e4a:	cb 01       	movw	r24, r22
    3e4c:	f8 01       	movw	r30, r16
    3e4e:	91 83       	std	Z+1, r25	; 0x01
    3e50:	80 83       	st	Z, r24
    3e52:	27 c0       	rjmp	.+78     	; 0x3ea2 <main+0x874>
    3e54:	ce 01       	movw	r24, r28
    3e56:	8a 5a       	subi	r24, 0xAA	; 170
    3e58:	9f 4f       	sbci	r25, 0xFF	; 255
    3e5a:	20 e9       	ldi	r18, 0x90	; 144
    3e5c:	31 e0       	ldi	r19, 0x01	; 1
    3e5e:	fc 01       	movw	r30, r24
    3e60:	31 83       	std	Z+1, r19	; 0x01
    3e62:	20 83       	st	Z, r18
    3e64:	ce 01       	movw	r24, r28
    3e66:	8a 5a       	subi	r24, 0xAA	; 170
    3e68:	9f 4f       	sbci	r25, 0xFF	; 255
    3e6a:	fc 01       	movw	r30, r24
    3e6c:	80 81       	ld	r24, Z
    3e6e:	91 81       	ldd	r25, Z+1	; 0x01
    3e70:	8c 01       	movw	r16, r24
    3e72:	c8 01       	movw	r24, r16
    3e74:	01 97       	sbiw	r24, 0x01	; 1
    3e76:	f1 f7       	brne	.-4      	; 0x3e74 <main+0x846>
    3e78:	8c 01       	movw	r16, r24
    3e7a:	ce 01       	movw	r24, r28
    3e7c:	8a 5a       	subi	r24, 0xAA	; 170
    3e7e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e80:	fc 01       	movw	r30, r24
    3e82:	11 83       	std	Z+1, r17	; 0x01
    3e84:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e86:	ce 01       	movw	r24, r28
    3e88:	8c 5a       	subi	r24, 0xAC	; 172
    3e8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e8c:	9e 01       	movw	r18, r28
    3e8e:	2c 5a       	subi	r18, 0xAC	; 172
    3e90:	3f 4f       	sbci	r19, 0xFF	; 255
    3e92:	f9 01       	movw	r30, r18
    3e94:	20 81       	ld	r18, Z
    3e96:	31 81       	ldd	r19, Z+1	; 0x01
    3e98:	21 50       	subi	r18, 0x01	; 1
    3e9a:	30 40       	sbci	r19, 0x00	; 0
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	31 83       	std	Z+1, r19	; 0x01
    3ea0:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ea2:	ce 01       	movw	r24, r28
    3ea4:	8c 5a       	subi	r24, 0xAC	; 172
    3ea6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	80 81       	ld	r24, Z
    3eac:	91 81       	ldd	r25, Z+1	; 0x01
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	89 f6       	brne	.-94     	; 0x3e54 <main+0x826>
    3eb2:	2f c0       	rjmp	.+94     	; 0x3f12 <main+0x8e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3eb4:	8e 01       	movw	r16, r28
    3eb6:	0c 5a       	subi	r16, 0xAC	; 172
    3eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    3eba:	ce 01       	movw	r24, r28
    3ebc:	80 5b       	subi	r24, 0xB0	; 176
    3ebe:	9f 4f       	sbci	r25, 0xFF	; 255
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	60 81       	ld	r22, Z
    3ec4:	71 81       	ldd	r23, Z+1	; 0x01
    3ec6:	82 81       	ldd	r24, Z+2	; 0x02
    3ec8:	93 81       	ldd	r25, Z+3	; 0x03
    3eca:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3ece:	dc 01       	movw	r26, r24
    3ed0:	cb 01       	movw	r24, r22
    3ed2:	f8 01       	movw	r30, r16
    3ed4:	91 83       	std	Z+1, r25	; 0x01
    3ed6:	80 83       	st	Z, r24
    3ed8:	ce 01       	movw	r24, r28
    3eda:	88 5a       	subi	r24, 0xA8	; 168
    3edc:	9f 4f       	sbci	r25, 0xFF	; 255
    3ede:	9e 01       	movw	r18, r28
    3ee0:	2c 5a       	subi	r18, 0xAC	; 172
    3ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ee4:	f9 01       	movw	r30, r18
    3ee6:	20 81       	ld	r18, Z
    3ee8:	31 81       	ldd	r19, Z+1	; 0x01
    3eea:	fc 01       	movw	r30, r24
    3eec:	31 83       	std	Z+1, r19	; 0x01
    3eee:	20 83       	st	Z, r18
    3ef0:	ce 01       	movw	r24, r28
    3ef2:	88 5a       	subi	r24, 0xA8	; 168
    3ef4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ef6:	fc 01       	movw	r30, r24
    3ef8:	80 81       	ld	r24, Z
    3efa:	91 81       	ldd	r25, Z+1	; 0x01
    3efc:	8c 01       	movw	r16, r24
    3efe:	c8 01       	movw	r24, r16
    3f00:	01 97       	sbiw	r24, 0x01	; 1
    3f02:	f1 f7       	brne	.-4      	; 0x3f00 <main+0x8d2>
    3f04:	8c 01       	movw	r16, r24
    3f06:	ce 01       	movw	r24, r28
    3f08:	88 5a       	subi	r24, 0xA8	; 168
    3f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	11 83       	std	Z+1, r17	; 0x01
    3f10:	00 83       	st	Z, r16
	_delay_ms(1000);
	

	
	//Check Sim Card Presence
	LCDClear();
    3f12:	81 e0       	ldi	r24, 0x01	; 1
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	LCDWriteString("Checking SIMCard");
    3f1a:	88 e6       	ldi	r24, 0x68	; 104
    3f1c:	91 e0       	ldi	r25, 0x01	; 1
    3f1e:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    3f22:	9e 01       	movw	r18, r28
    3f24:	26 5a       	subi	r18, 0xA6	; 166
    3f26:	3f 4f       	sbci	r19, 0xFF	; 255
    3f28:	80 e0       	ldi	r24, 0x00	; 0
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	aa e7       	ldi	r26, 0x7A	; 122
    3f2e:	b4 e4       	ldi	r27, 0x44	; 68
    3f30:	f9 01       	movw	r30, r18
    3f32:	80 83       	st	Z, r24
    3f34:	91 83       	std	Z+1, r25	; 0x01
    3f36:	a2 83       	std	Z+2, r26	; 0x02
    3f38:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    3f3a:	8e 01       	movw	r16, r28
    3f3c:	02 5a       	subi	r16, 0xA2	; 162
    3f3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f40:	ce 01       	movw	r24, r28
    3f42:	86 5a       	subi	r24, 0xA6	; 166
    3f44:	9f 4f       	sbci	r25, 0xFF	; 255
    3f46:	fc 01       	movw	r30, r24
    3f48:	60 81       	ld	r22, Z
    3f4a:	71 81       	ldd	r23, Z+1	; 0x01
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	93 81       	ldd	r25, Z+3	; 0x03
    3f50:	20 e0       	ldi	r18, 0x00	; 0
    3f52:	30 e0       	ldi	r19, 0x00	; 0
    3f54:	4a e7       	ldi	r20, 0x7A	; 122
    3f56:	55 e4       	ldi	r21, 0x45	; 69
    3f58:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3f5c:	dc 01       	movw	r26, r24
    3f5e:	cb 01       	movw	r24, r22
    3f60:	f8 01       	movw	r30, r16
    3f62:	80 83       	st	Z, r24
    3f64:	91 83       	std	Z+1, r25	; 0x01
    3f66:	a2 83       	std	Z+2, r26	; 0x02
    3f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f6a:	ce 01       	movw	r24, r28
    3f6c:	82 5a       	subi	r24, 0xA2	; 162
    3f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f70:	11 e0       	ldi	r17, 0x01	; 1
    3f72:	fc 01       	movw	r30, r24
    3f74:	60 81       	ld	r22, Z
    3f76:	71 81       	ldd	r23, Z+1	; 0x01
    3f78:	82 81       	ldd	r24, Z+2	; 0x02
    3f7a:	93 81       	ldd	r25, Z+3	; 0x03
    3f7c:	20 e0       	ldi	r18, 0x00	; 0
    3f7e:	30 e0       	ldi	r19, 0x00	; 0
    3f80:	40 e8       	ldi	r20, 0x80	; 128
    3f82:	5f e3       	ldi	r21, 0x3F	; 63
    3f84:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    3f88:	88 23       	and	r24, r24
    3f8a:	0c f0       	brlt	.+2      	; 0x3f8e <main+0x960>
    3f8c:	10 e0       	ldi	r17, 0x00	; 0
    3f8e:	11 23       	and	r17, r17
    3f90:	49 f0       	breq	.+18     	; 0x3fa4 <main+0x976>
		__ticks = 1;
    3f92:	ce 01       	movw	r24, r28
    3f94:	8e 59       	subi	r24, 0x9E	; 158
    3f96:	9f 4f       	sbci	r25, 0xFF	; 255
    3f98:	21 e0       	ldi	r18, 0x01	; 1
    3f9a:	30 e0       	ldi	r19, 0x00	; 0
    3f9c:	fc 01       	movw	r30, r24
    3f9e:	31 83       	std	Z+1, r19	; 0x01
    3fa0:	20 83       	st	Z, r18
    3fa2:	74 c0       	rjmp	.+232    	; 0x408c <main+0xa5e>
	else if (__tmp > 65535)
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	82 5a       	subi	r24, 0xA2	; 162
    3fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    3faa:	11 e0       	ldi	r17, 0x01	; 1
    3fac:	fc 01       	movw	r30, r24
    3fae:	60 81       	ld	r22, Z
    3fb0:	71 81       	ldd	r23, Z+1	; 0x01
    3fb2:	82 81       	ldd	r24, Z+2	; 0x02
    3fb4:	93 81       	ldd	r25, Z+3	; 0x03
    3fb6:	20 e0       	ldi	r18, 0x00	; 0
    3fb8:	3f ef       	ldi	r19, 0xFF	; 255
    3fba:	4f e7       	ldi	r20, 0x7F	; 127
    3fbc:	57 e4       	ldi	r21, 0x47	; 71
    3fbe:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    3fc2:	18 16       	cp	r1, r24
    3fc4:	0c f0       	brlt	.+2      	; 0x3fc8 <main+0x99a>
    3fc6:	10 e0       	ldi	r17, 0x00	; 0
    3fc8:	11 23       	and	r17, r17
    3fca:	09 f4       	brne	.+2      	; 0x3fce <main+0x9a0>
    3fcc:	4d c0       	rjmp	.+154    	; 0x4068 <main+0xa3a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fce:	ce 01       	movw	r24, r28
    3fd0:	86 5a       	subi	r24, 0xA6	; 166
    3fd2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd4:	fc 01       	movw	r30, r24
    3fd6:	60 81       	ld	r22, Z
    3fd8:	71 81       	ldd	r23, Z+1	; 0x01
    3fda:	82 81       	ldd	r24, Z+2	; 0x02
    3fdc:	93 81       	ldd	r25, Z+3	; 0x03
    3fde:	20 e0       	ldi	r18, 0x00	; 0
    3fe0:	30 e0       	ldi	r19, 0x00	; 0
    3fe2:	40 e2       	ldi	r20, 0x20	; 32
    3fe4:	51 e4       	ldi	r21, 0x41	; 65
    3fe6:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    3fea:	dc 01       	movw	r26, r24
    3fec:	cb 01       	movw	r24, r22
    3fee:	8e 01       	movw	r16, r28
    3ff0:	0e 59       	subi	r16, 0x9E	; 158
    3ff2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ff4:	bc 01       	movw	r22, r24
    3ff6:	cd 01       	movw	r24, r26
    3ff8:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    3ffc:	dc 01       	movw	r26, r24
    3ffe:	cb 01       	movw	r24, r22
    4000:	f8 01       	movw	r30, r16
    4002:	91 83       	std	Z+1, r25	; 0x01
    4004:	80 83       	st	Z, r24
    4006:	27 c0       	rjmp	.+78     	; 0x4056 <main+0xa28>
    4008:	ce 01       	movw	r24, r28
    400a:	8c 59       	subi	r24, 0x9C	; 156
    400c:	9f 4f       	sbci	r25, 0xFF	; 255
    400e:	20 e9       	ldi	r18, 0x90	; 144
    4010:	31 e0       	ldi	r19, 0x01	; 1
    4012:	fc 01       	movw	r30, r24
    4014:	31 83       	std	Z+1, r19	; 0x01
    4016:	20 83       	st	Z, r18
    4018:	ce 01       	movw	r24, r28
    401a:	8c 59       	subi	r24, 0x9C	; 156
    401c:	9f 4f       	sbci	r25, 0xFF	; 255
    401e:	fc 01       	movw	r30, r24
    4020:	80 81       	ld	r24, Z
    4022:	91 81       	ldd	r25, Z+1	; 0x01
    4024:	8c 01       	movw	r16, r24
    4026:	c8 01       	movw	r24, r16
    4028:	01 97       	sbiw	r24, 0x01	; 1
    402a:	f1 f7       	brne	.-4      	; 0x4028 <main+0x9fa>
    402c:	8c 01       	movw	r16, r24
    402e:	ce 01       	movw	r24, r28
    4030:	8c 59       	subi	r24, 0x9C	; 156
    4032:	9f 4f       	sbci	r25, 0xFF	; 255
    4034:	fc 01       	movw	r30, r24
    4036:	11 83       	std	Z+1, r17	; 0x01
    4038:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    403a:	ce 01       	movw	r24, r28
    403c:	8e 59       	subi	r24, 0x9E	; 158
    403e:	9f 4f       	sbci	r25, 0xFF	; 255
    4040:	9e 01       	movw	r18, r28
    4042:	2e 59       	subi	r18, 0x9E	; 158
    4044:	3f 4f       	sbci	r19, 0xFF	; 255
    4046:	f9 01       	movw	r30, r18
    4048:	20 81       	ld	r18, Z
    404a:	31 81       	ldd	r19, Z+1	; 0x01
    404c:	21 50       	subi	r18, 0x01	; 1
    404e:	30 40       	sbci	r19, 0x00	; 0
    4050:	fc 01       	movw	r30, r24
    4052:	31 83       	std	Z+1, r19	; 0x01
    4054:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4056:	ce 01       	movw	r24, r28
    4058:	8e 59       	subi	r24, 0x9E	; 158
    405a:	9f 4f       	sbci	r25, 0xFF	; 255
    405c:	fc 01       	movw	r30, r24
    405e:	80 81       	ld	r24, Z
    4060:	91 81       	ldd	r25, Z+1	; 0x01
    4062:	00 97       	sbiw	r24, 0x00	; 0
    4064:	89 f6       	brne	.-94     	; 0x4008 <main+0x9da>
    4066:	2f c0       	rjmp	.+94     	; 0x40c6 <main+0xa98>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4068:	8e 01       	movw	r16, r28
    406a:	0e 59       	subi	r16, 0x9E	; 158
    406c:	1f 4f       	sbci	r17, 0xFF	; 255
    406e:	ce 01       	movw	r24, r28
    4070:	82 5a       	subi	r24, 0xA2	; 162
    4072:	9f 4f       	sbci	r25, 0xFF	; 255
    4074:	fc 01       	movw	r30, r24
    4076:	60 81       	ld	r22, Z
    4078:	71 81       	ldd	r23, Z+1	; 0x01
    407a:	82 81       	ldd	r24, Z+2	; 0x02
    407c:	93 81       	ldd	r25, Z+3	; 0x03
    407e:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    4082:	dc 01       	movw	r26, r24
    4084:	cb 01       	movw	r24, r22
    4086:	f8 01       	movw	r30, r16
    4088:	91 83       	std	Z+1, r25	; 0x01
    408a:	80 83       	st	Z, r24
    408c:	ce 01       	movw	r24, r28
    408e:	8a 59       	subi	r24, 0x9A	; 154
    4090:	9f 4f       	sbci	r25, 0xFF	; 255
    4092:	9e 01       	movw	r18, r28
    4094:	2e 59       	subi	r18, 0x9E	; 158
    4096:	3f 4f       	sbci	r19, 0xFF	; 255
    4098:	f9 01       	movw	r30, r18
    409a:	20 81       	ld	r18, Z
    409c:	31 81       	ldd	r19, Z+1	; 0x01
    409e:	fc 01       	movw	r30, r24
    40a0:	31 83       	std	Z+1, r19	; 0x01
    40a2:	20 83       	st	Z, r18
    40a4:	ce 01       	movw	r24, r28
    40a6:	8a 59       	subi	r24, 0x9A	; 154
    40a8:	9f 4f       	sbci	r25, 0xFF	; 255
    40aa:	fc 01       	movw	r30, r24
    40ac:	80 81       	ld	r24, Z
    40ae:	91 81       	ldd	r25, Z+1	; 0x01
    40b0:	8c 01       	movw	r16, r24
    40b2:	c8 01       	movw	r24, r16
    40b4:	01 97       	sbiw	r24, 0x01	; 1
    40b6:	f1 f7       	brne	.-4      	; 0x40b4 <main+0xa86>
    40b8:	8c 01       	movw	r16, r24
    40ba:	ce 01       	movw	r24, r28
    40bc:	8a 59       	subi	r24, 0x9A	; 154
    40be:	9f 4f       	sbci	r25, 0xFF	; 255
    40c0:	fc 01       	movw	r30, r24
    40c2:	11 83       	std	Z+1, r17	; 0x01
    40c4:	00 83       	st	Z, r16
	
	_delay_ms(1000);
	
	r=SIM300IsSIMInserted();
    40c6:	0e 94 1e 18 	call	0x303c	; 0x303c <SIM300IsSIMInserted>
    40ca:	89 83       	std	Y+1, r24	; 0x01
	
	if (r==SIM300_SIM_NOT_PRESENT)
    40cc:	89 81       	ldd	r24, Y+1	; 0x01
    40ce:	88 23       	and	r24, r24
    40d0:	59 f4       	brne	.+22     	; 0x40e8 <main+0xaba>
	{
		//Sim card is NOT present
		LCDWriteStringXY(0,1,"No SIM Card !");
    40d2:	80 e0       	ldi	r24, 0x00	; 0
    40d4:	61 e0       	ldi	r22, 0x01	; 1
    40d6:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    40da:	89 e7       	ldi	r24, 0x79	; 121
    40dc:	91 e0       	ldi	r25, 0x01	; 1
    40de:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		
		Halt();
    40e2:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
    40e6:	ec c0       	rjmp	.+472    	; 0x42c0 <main+0xc92>
	}
	else if(r==SIM300_TIMEOUT)
    40e8:	89 81       	ldd	r24, Y+1	; 0x01
    40ea:	8d 3f       	cpi	r24, 0xFD	; 253
    40ec:	59 f4       	brne	.+22     	; 0x4104 <main+0xad6>
	{
		//Communication Error
		LCDWriteStringXY(0,1,"Comm Error !");
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	61 e0       	ldi	r22, 0x01	; 1
    40f2:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    40f6:	89 e3       	ldi	r24, 0x39	; 57
    40f8:	91 e0       	ldi	r25, 0x01	; 1
    40fa:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		
		Halt();
    40fe:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
    4102:	de c0       	rjmp	.+444    	; 0x42c0 <main+0xc92>
	}
	else if(r==SIM300_SIM_PRESENT)
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	81 30       	cpi	r24, 0x01	; 1
    4108:	09 f0       	breq	.+2      	; 0x410c <main+0xade>
    410a:	da c0       	rjmp	.+436    	; 0x42c0 <main+0xc92>
	{
		//Sim card present
		LCDWriteStringXY(0,1,"SIM Card Present");
    410c:	80 e0       	ldi	r24, 0x00	; 0
    410e:	61 e0       	ldi	r22, 0x01	; 1
    4110:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    4114:	87 e8       	ldi	r24, 0x87	; 135
    4116:	91 e0       	ldi	r25, 0x01	; 1
    4118:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    411c:	9e 01       	movw	r18, r28
    411e:	28 59       	subi	r18, 0x98	; 152
    4120:	3f 4f       	sbci	r19, 0xFF	; 255
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	90 e0       	ldi	r25, 0x00	; 0
    4126:	aa e7       	ldi	r26, 0x7A	; 122
    4128:	b4 e4       	ldi	r27, 0x44	; 68
    412a:	f9 01       	movw	r30, r18
    412c:	80 83       	st	Z, r24
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	a2 83       	std	Z+2, r26	; 0x02
    4132:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    4134:	8e 01       	movw	r16, r28
    4136:	04 59       	subi	r16, 0x94	; 148
    4138:	1f 4f       	sbci	r17, 0xFF	; 255
    413a:	ce 01       	movw	r24, r28
    413c:	88 59       	subi	r24, 0x98	; 152
    413e:	9f 4f       	sbci	r25, 0xFF	; 255
    4140:	fc 01       	movw	r30, r24
    4142:	60 81       	ld	r22, Z
    4144:	71 81       	ldd	r23, Z+1	; 0x01
    4146:	82 81       	ldd	r24, Z+2	; 0x02
    4148:	93 81       	ldd	r25, Z+3	; 0x03
    414a:	20 e0       	ldi	r18, 0x00	; 0
    414c:	30 e0       	ldi	r19, 0x00	; 0
    414e:	4a e7       	ldi	r20, 0x7A	; 122
    4150:	55 e4       	ldi	r21, 0x45	; 69
    4152:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    4156:	dc 01       	movw	r26, r24
    4158:	cb 01       	movw	r24, r22
    415a:	f8 01       	movw	r30, r16
    415c:	80 83       	st	Z, r24
    415e:	91 83       	std	Z+1, r25	; 0x01
    4160:	a2 83       	std	Z+2, r26	; 0x02
    4162:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4164:	ce 01       	movw	r24, r28
    4166:	84 59       	subi	r24, 0x94	; 148
    4168:	9f 4f       	sbci	r25, 0xFF	; 255
    416a:	11 e0       	ldi	r17, 0x01	; 1
    416c:	fc 01       	movw	r30, r24
    416e:	60 81       	ld	r22, Z
    4170:	71 81       	ldd	r23, Z+1	; 0x01
    4172:	82 81       	ldd	r24, Z+2	; 0x02
    4174:	93 81       	ldd	r25, Z+3	; 0x03
    4176:	20 e0       	ldi	r18, 0x00	; 0
    4178:	30 e0       	ldi	r19, 0x00	; 0
    417a:	40 e8       	ldi	r20, 0x80	; 128
    417c:	5f e3       	ldi	r21, 0x3F	; 63
    417e:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    4182:	88 23       	and	r24, r24
    4184:	0c f0       	brlt	.+2      	; 0x4188 <main+0xb5a>
    4186:	10 e0       	ldi	r17, 0x00	; 0
    4188:	11 23       	and	r17, r17
    418a:	49 f0       	breq	.+18     	; 0x419e <main+0xb70>
		__ticks = 1;
    418c:	ce 01       	movw	r24, r28
    418e:	80 59       	subi	r24, 0x90	; 144
    4190:	9f 4f       	sbci	r25, 0xFF	; 255
    4192:	21 e0       	ldi	r18, 0x01	; 1
    4194:	30 e0       	ldi	r19, 0x00	; 0
    4196:	fc 01       	movw	r30, r24
    4198:	31 83       	std	Z+1, r19	; 0x01
    419a:	20 83       	st	Z, r18
    419c:	74 c0       	rjmp	.+232    	; 0x4286 <main+0xc58>
	else if (__tmp > 65535)
    419e:	ce 01       	movw	r24, r28
    41a0:	84 59       	subi	r24, 0x94	; 148
    41a2:	9f 4f       	sbci	r25, 0xFF	; 255
    41a4:	11 e0       	ldi	r17, 0x01	; 1
    41a6:	fc 01       	movw	r30, r24
    41a8:	60 81       	ld	r22, Z
    41aa:	71 81       	ldd	r23, Z+1	; 0x01
    41ac:	82 81       	ldd	r24, Z+2	; 0x02
    41ae:	93 81       	ldd	r25, Z+3	; 0x03
    41b0:	20 e0       	ldi	r18, 0x00	; 0
    41b2:	3f ef       	ldi	r19, 0xFF	; 255
    41b4:	4f e7       	ldi	r20, 0x7F	; 127
    41b6:	57 e4       	ldi	r21, 0x47	; 71
    41b8:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    41bc:	18 16       	cp	r1, r24
    41be:	0c f0       	brlt	.+2      	; 0x41c2 <main+0xb94>
    41c0:	10 e0       	ldi	r17, 0x00	; 0
    41c2:	11 23       	and	r17, r17
    41c4:	09 f4       	brne	.+2      	; 0x41c8 <main+0xb9a>
    41c6:	4d c0       	rjmp	.+154    	; 0x4262 <main+0xc34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41c8:	ce 01       	movw	r24, r28
    41ca:	88 59       	subi	r24, 0x98	; 152
    41cc:	9f 4f       	sbci	r25, 0xFF	; 255
    41ce:	fc 01       	movw	r30, r24
    41d0:	60 81       	ld	r22, Z
    41d2:	71 81       	ldd	r23, Z+1	; 0x01
    41d4:	82 81       	ldd	r24, Z+2	; 0x02
    41d6:	93 81       	ldd	r25, Z+3	; 0x03
    41d8:	20 e0       	ldi	r18, 0x00	; 0
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	40 e2       	ldi	r20, 0x20	; 32
    41de:	51 e4       	ldi	r21, 0x41	; 65
    41e0:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    41e4:	dc 01       	movw	r26, r24
    41e6:	cb 01       	movw	r24, r22
    41e8:	8e 01       	movw	r16, r28
    41ea:	00 59       	subi	r16, 0x90	; 144
    41ec:	1f 4f       	sbci	r17, 0xFF	; 255
    41ee:	bc 01       	movw	r22, r24
    41f0:	cd 01       	movw	r24, r26
    41f2:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    41f6:	dc 01       	movw	r26, r24
    41f8:	cb 01       	movw	r24, r22
    41fa:	f8 01       	movw	r30, r16
    41fc:	91 83       	std	Z+1, r25	; 0x01
    41fe:	80 83       	st	Z, r24
    4200:	27 c0       	rjmp	.+78     	; 0x4250 <main+0xc22>
    4202:	ce 01       	movw	r24, r28
    4204:	8e 58       	subi	r24, 0x8E	; 142
    4206:	9f 4f       	sbci	r25, 0xFF	; 255
    4208:	20 e9       	ldi	r18, 0x90	; 144
    420a:	31 e0       	ldi	r19, 0x01	; 1
    420c:	fc 01       	movw	r30, r24
    420e:	31 83       	std	Z+1, r19	; 0x01
    4210:	20 83       	st	Z, r18
    4212:	ce 01       	movw	r24, r28
    4214:	8e 58       	subi	r24, 0x8E	; 142
    4216:	9f 4f       	sbci	r25, 0xFF	; 255
    4218:	fc 01       	movw	r30, r24
    421a:	80 81       	ld	r24, Z
    421c:	91 81       	ldd	r25, Z+1	; 0x01
    421e:	8c 01       	movw	r16, r24
    4220:	c8 01       	movw	r24, r16
    4222:	01 97       	sbiw	r24, 0x01	; 1
    4224:	f1 f7       	brne	.-4      	; 0x4222 <main+0xbf4>
    4226:	8c 01       	movw	r16, r24
    4228:	ce 01       	movw	r24, r28
    422a:	8e 58       	subi	r24, 0x8E	; 142
    422c:	9f 4f       	sbci	r25, 0xFF	; 255
    422e:	fc 01       	movw	r30, r24
    4230:	11 83       	std	Z+1, r17	; 0x01
    4232:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4234:	ce 01       	movw	r24, r28
    4236:	80 59       	subi	r24, 0x90	; 144
    4238:	9f 4f       	sbci	r25, 0xFF	; 255
    423a:	9e 01       	movw	r18, r28
    423c:	20 59       	subi	r18, 0x90	; 144
    423e:	3f 4f       	sbci	r19, 0xFF	; 255
    4240:	f9 01       	movw	r30, r18
    4242:	20 81       	ld	r18, Z
    4244:	31 81       	ldd	r19, Z+1	; 0x01
    4246:	21 50       	subi	r18, 0x01	; 1
    4248:	30 40       	sbci	r19, 0x00	; 0
    424a:	fc 01       	movw	r30, r24
    424c:	31 83       	std	Z+1, r19	; 0x01
    424e:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4250:	ce 01       	movw	r24, r28
    4252:	80 59       	subi	r24, 0x90	; 144
    4254:	9f 4f       	sbci	r25, 0xFF	; 255
    4256:	fc 01       	movw	r30, r24
    4258:	80 81       	ld	r24, Z
    425a:	91 81       	ldd	r25, Z+1	; 0x01
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	89 f6       	brne	.-94     	; 0x4202 <main+0xbd4>
    4260:	2f c0       	rjmp	.+94     	; 0x42c0 <main+0xc92>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4262:	8e 01       	movw	r16, r28
    4264:	00 59       	subi	r16, 0x90	; 144
    4266:	1f 4f       	sbci	r17, 0xFF	; 255
    4268:	ce 01       	movw	r24, r28
    426a:	84 59       	subi	r24, 0x94	; 148
    426c:	9f 4f       	sbci	r25, 0xFF	; 255
    426e:	fc 01       	movw	r30, r24
    4270:	60 81       	ld	r22, Z
    4272:	71 81       	ldd	r23, Z+1	; 0x01
    4274:	82 81       	ldd	r24, Z+2	; 0x02
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    427c:	dc 01       	movw	r26, r24
    427e:	cb 01       	movw	r24, r22
    4280:	f8 01       	movw	r30, r16
    4282:	91 83       	std	Z+1, r25	; 0x01
    4284:	80 83       	st	Z, r24
    4286:	ce 01       	movw	r24, r28
    4288:	8c 58       	subi	r24, 0x8C	; 140
    428a:	9f 4f       	sbci	r25, 0xFF	; 255
    428c:	9e 01       	movw	r18, r28
    428e:	20 59       	subi	r18, 0x90	; 144
    4290:	3f 4f       	sbci	r19, 0xFF	; 255
    4292:	f9 01       	movw	r30, r18
    4294:	20 81       	ld	r18, Z
    4296:	31 81       	ldd	r19, Z+1	; 0x01
    4298:	fc 01       	movw	r30, r24
    429a:	31 83       	std	Z+1, r19	; 0x01
    429c:	20 83       	st	Z, r18
    429e:	ce 01       	movw	r24, r28
    42a0:	8c 58       	subi	r24, 0x8C	; 140
    42a2:	9f 4f       	sbci	r25, 0xFF	; 255
    42a4:	fc 01       	movw	r30, r24
    42a6:	80 81       	ld	r24, Z
    42a8:	91 81       	ldd	r25, Z+1	; 0x01
    42aa:	8c 01       	movw	r16, r24
    42ac:	c8 01       	movw	r24, r16
    42ae:	01 97       	sbiw	r24, 0x01	; 1
    42b0:	f1 f7       	brne	.-4      	; 0x42ae <main+0xc80>
    42b2:	8c 01       	movw	r16, r24
    42b4:	ce 01       	movw	r24, r28
    42b6:	8c 58       	subi	r24, 0x8C	; 140
    42b8:	9f 4f       	sbci	r25, 0xFF	; 255
    42ba:	fc 01       	movw	r30, r24
    42bc:	11 83       	std	Z+1, r17	; 0x01
    42be:	00 83       	st	Z, r16
			
		_delay_ms(1000);
	}
	
	//Network search
	LCDClear();
    42c0:	81 e0       	ldi	r24, 0x01	; 1
    42c2:	60 e0       	ldi	r22, 0x00	; 0
    42c4:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	LCDWriteStringXY(0,0,"SearchingNetwork");
    42c8:	80 e0       	ldi	r24, 0x00	; 0
    42ca:	60 e0       	ldi	r22, 0x00	; 0
    42cc:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    42d0:	88 e9       	ldi	r24, 0x98	; 152
    42d2:	91 e0       	ldi	r25, 0x01	; 1
    42d4:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
	
	uint8_t		nw_found=0;
    42d8:	1d 82       	std	Y+5, r1	; 0x05
	uint16_t	tries=0;
    42da:	1b 82       	std	Y+3, r1	; 0x03
    42dc:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t		x=0;
    42de:	1c 82       	std	Y+4, r1	; 0x04
	
	while(!nw_found)
    42e0:	ff c0       	rjmp	.+510    	; 0x44e0 <main+0xeb2>
	{
		r=SIM300GetNetStat();
    42e2:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <SIM300GetNetStat>
    42e6:	89 83       	std	Y+1, r24	; 0x01
		
		if(r==SIM300_NW_SEARCHING)
    42e8:	89 81       	ldd	r24, Y+1	; 0x01
    42ea:	82 30       	cpi	r24, 0x02	; 2
    42ec:	09 f0       	breq	.+2      	; 0x42f0 <main+0xcc2>
    42ee:	fd c0       	rjmp	.+506    	; 0x44ea <main+0xebc>
		{
			LCDWriteStringXY(0,1,"%0%0%0%0%0%0%0%0%0%0%0%0%0%0%0%0");
    42f0:	80 e0       	ldi	r24, 0x00	; 0
    42f2:	61 e0       	ldi	r22, 0x01	; 1
    42f4:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    42f8:	89 ea       	ldi	r24, 0xA9	; 169
    42fa:	91 e0       	ldi	r25, 0x01	; 1
    42fc:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			LCDWriteStringXY(x,1,"%1");
    4300:	8c 81       	ldd	r24, Y+4	; 0x04
    4302:	61 e0       	ldi	r22, 0x01	; 1
    4304:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
    4308:	8a ec       	ldi	r24, 0xCA	; 202
    430a:	91 e0       	ldi	r25, 0x01	; 1
    430c:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
			LCDGotoXY(17,1);
    4310:	81 e1       	ldi	r24, 0x11	; 17
    4312:	61 e0       	ldi	r22, 0x01	; 1
    4314:	0e 94 3e 14 	call	0x287c	; 0x287c <LCDGotoXY>
			
			x++;
    4318:	8c 81       	ldd	r24, Y+4	; 0x04
    431a:	8f 5f       	subi	r24, 0xFF	; 255
    431c:	8c 83       	std	Y+4, r24	; 0x04
			
			if(x==16) x=0;
    431e:	8c 81       	ldd	r24, Y+4	; 0x04
    4320:	80 31       	cpi	r24, 0x10	; 16
    4322:	09 f4       	brne	.+2      	; 0x4326 <main+0xcf8>
    4324:	1c 82       	std	Y+4, r1	; 0x04
    4326:	9e 01       	movw	r18, r28
    4328:	2a 58       	subi	r18, 0x8A	; 138
    432a:	3f 4f       	sbci	r19, 0xFF	; 255
    432c:	80 e0       	ldi	r24, 0x00	; 0
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	a8 e4       	ldi	r26, 0x48	; 72
    4332:	b2 e4       	ldi	r27, 0x42	; 66
    4334:	f9 01       	movw	r30, r18
    4336:	80 83       	st	Z, r24
    4338:	91 83       	std	Z+1, r25	; 0x01
    433a:	a2 83       	std	Z+2, r26	; 0x02
    433c:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    433e:	8e 01       	movw	r16, r28
    4340:	06 58       	subi	r16, 0x86	; 134
    4342:	1f 4f       	sbci	r17, 0xFF	; 255
    4344:	ce 01       	movw	r24, r28
    4346:	8a 58       	subi	r24, 0x8A	; 138
    4348:	9f 4f       	sbci	r25, 0xFF	; 255
    434a:	fc 01       	movw	r30, r24
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	82 81       	ldd	r24, Z+2	; 0x02
    4352:	93 81       	ldd	r25, Z+3	; 0x03
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	4a e7       	ldi	r20, 0x7A	; 122
    435a:	55 e4       	ldi	r21, 0x45	; 69
    435c:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	f8 01       	movw	r30, r16
    4366:	80 83       	st	Z, r24
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	a2 83       	std	Z+2, r26	; 0x02
    436c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    436e:	ce 01       	movw	r24, r28
    4370:	86 58       	subi	r24, 0x86	; 134
    4372:	9f 4f       	sbci	r25, 0xFF	; 255
    4374:	11 e0       	ldi	r17, 0x01	; 1
    4376:	fc 01       	movw	r30, r24
    4378:	60 81       	ld	r22, Z
    437a:	71 81       	ldd	r23, Z+1	; 0x01
    437c:	82 81       	ldd	r24, Z+2	; 0x02
    437e:	93 81       	ldd	r25, Z+3	; 0x03
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	40 e8       	ldi	r20, 0x80	; 128
    4386:	5f e3       	ldi	r21, 0x3F	; 63
    4388:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    438c:	88 23       	and	r24, r24
    438e:	0c f0       	brlt	.+2      	; 0x4392 <main+0xd64>
    4390:	10 e0       	ldi	r17, 0x00	; 0
    4392:	11 23       	and	r17, r17
    4394:	49 f0       	breq	.+18     	; 0x43a8 <main+0xd7a>
		__ticks = 1;
    4396:	ce 01       	movw	r24, r28
    4398:	82 58       	subi	r24, 0x82	; 130
    439a:	9f 4f       	sbci	r25, 0xFF	; 255
    439c:	21 e0       	ldi	r18, 0x01	; 1
    439e:	30 e0       	ldi	r19, 0x00	; 0
    43a0:	fc 01       	movw	r30, r24
    43a2:	31 83       	std	Z+1, r19	; 0x01
    43a4:	20 83       	st	Z, r18
    43a6:	74 c0       	rjmp	.+232    	; 0x4490 <main+0xe62>
	else if (__tmp > 65535)
    43a8:	ce 01       	movw	r24, r28
    43aa:	86 58       	subi	r24, 0x86	; 134
    43ac:	9f 4f       	sbci	r25, 0xFF	; 255
    43ae:	11 e0       	ldi	r17, 0x01	; 1
    43b0:	fc 01       	movw	r30, r24
    43b2:	60 81       	ld	r22, Z
    43b4:	71 81       	ldd	r23, Z+1	; 0x01
    43b6:	82 81       	ldd	r24, Z+2	; 0x02
    43b8:	93 81       	ldd	r25, Z+3	; 0x03
    43ba:	20 e0       	ldi	r18, 0x00	; 0
    43bc:	3f ef       	ldi	r19, 0xFF	; 255
    43be:	4f e7       	ldi	r20, 0x7F	; 127
    43c0:	57 e4       	ldi	r21, 0x47	; 71
    43c2:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    43c6:	18 16       	cp	r1, r24
    43c8:	0c f0       	brlt	.+2      	; 0x43cc <main+0xd9e>
    43ca:	10 e0       	ldi	r17, 0x00	; 0
    43cc:	11 23       	and	r17, r17
    43ce:	09 f4       	brne	.+2      	; 0x43d2 <main+0xda4>
    43d0:	4d c0       	rjmp	.+154    	; 0x446c <main+0xe3e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d2:	ce 01       	movw	r24, r28
    43d4:	8a 58       	subi	r24, 0x8A	; 138
    43d6:	9f 4f       	sbci	r25, 0xFF	; 255
    43d8:	fc 01       	movw	r30, r24
    43da:	60 81       	ld	r22, Z
    43dc:	71 81       	ldd	r23, Z+1	; 0x01
    43de:	82 81       	ldd	r24, Z+2	; 0x02
    43e0:	93 81       	ldd	r25, Z+3	; 0x03
    43e2:	20 e0       	ldi	r18, 0x00	; 0
    43e4:	30 e0       	ldi	r19, 0x00	; 0
    43e6:	40 e2       	ldi	r20, 0x20	; 32
    43e8:	51 e4       	ldi	r21, 0x41	; 65
    43ea:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	8e 01       	movw	r16, r28
    43f4:	02 58       	subi	r16, 0x82	; 130
    43f6:	1f 4f       	sbci	r17, 0xFF	; 255
    43f8:	bc 01       	movw	r22, r24
    43fa:	cd 01       	movw	r24, r26
    43fc:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    4400:	dc 01       	movw	r26, r24
    4402:	cb 01       	movw	r24, r22
    4404:	f8 01       	movw	r30, r16
    4406:	91 83       	std	Z+1, r25	; 0x01
    4408:	80 83       	st	Z, r24
    440a:	27 c0       	rjmp	.+78     	; 0x445a <main+0xe2c>
    440c:	ce 01       	movw	r24, r28
    440e:	80 58       	subi	r24, 0x80	; 128
    4410:	9f 4f       	sbci	r25, 0xFF	; 255
    4412:	20 e9       	ldi	r18, 0x90	; 144
    4414:	31 e0       	ldi	r19, 0x01	; 1
    4416:	fc 01       	movw	r30, r24
    4418:	31 83       	std	Z+1, r19	; 0x01
    441a:	20 83       	st	Z, r18
    441c:	ce 01       	movw	r24, r28
    441e:	80 58       	subi	r24, 0x80	; 128
    4420:	9f 4f       	sbci	r25, 0xFF	; 255
    4422:	fc 01       	movw	r30, r24
    4424:	80 81       	ld	r24, Z
    4426:	91 81       	ldd	r25, Z+1	; 0x01
    4428:	8c 01       	movw	r16, r24
    442a:	c8 01       	movw	r24, r16
    442c:	01 97       	sbiw	r24, 0x01	; 1
    442e:	f1 f7       	brne	.-4      	; 0x442c <main+0xdfe>
    4430:	8c 01       	movw	r16, r24
    4432:	ce 01       	movw	r24, r28
    4434:	80 58       	subi	r24, 0x80	; 128
    4436:	9f 4f       	sbci	r25, 0xFF	; 255
    4438:	fc 01       	movw	r30, r24
    443a:	11 83       	std	Z+1, r17	; 0x01
    443c:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443e:	ce 01       	movw	r24, r28
    4440:	82 58       	subi	r24, 0x82	; 130
    4442:	9f 4f       	sbci	r25, 0xFF	; 255
    4444:	9e 01       	movw	r18, r28
    4446:	22 58       	subi	r18, 0x82	; 130
    4448:	3f 4f       	sbci	r19, 0xFF	; 255
    444a:	f9 01       	movw	r30, r18
    444c:	20 81       	ld	r18, Z
    444e:	31 81       	ldd	r19, Z+1	; 0x01
    4450:	21 50       	subi	r18, 0x01	; 1
    4452:	30 40       	sbci	r19, 0x00	; 0
    4454:	fc 01       	movw	r30, r24
    4456:	31 83       	std	Z+1, r19	; 0x01
    4458:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    445a:	ce 01       	movw	r24, r28
    445c:	82 58       	subi	r24, 0x82	; 130
    445e:	9f 4f       	sbci	r25, 0xFF	; 255
    4460:	fc 01       	movw	r30, r24
    4462:	80 81       	ld	r24, Z
    4464:	91 81       	ldd	r25, Z+1	; 0x01
    4466:	00 97       	sbiw	r24, 0x00	; 0
    4468:	89 f6       	brne	.-94     	; 0x440c <main+0xdde>
    446a:	2f c0       	rjmp	.+94     	; 0x44ca <main+0xe9c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    446c:	8e 01       	movw	r16, r28
    446e:	02 58       	subi	r16, 0x82	; 130
    4470:	1f 4f       	sbci	r17, 0xFF	; 255
    4472:	ce 01       	movw	r24, r28
    4474:	86 58       	subi	r24, 0x86	; 134
    4476:	9f 4f       	sbci	r25, 0xFF	; 255
    4478:	fc 01       	movw	r30, r24
    447a:	60 81       	ld	r22, Z
    447c:	71 81       	ldd	r23, Z+1	; 0x01
    447e:	82 81       	ldd	r24, Z+2	; 0x02
    4480:	93 81       	ldd	r25, Z+3	; 0x03
    4482:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	f8 01       	movw	r30, r16
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
    4490:	ce 01       	movw	r24, r28
    4492:	8e 57       	subi	r24, 0x7E	; 126
    4494:	9f 4f       	sbci	r25, 0xFF	; 255
    4496:	9e 01       	movw	r18, r28
    4498:	22 58       	subi	r18, 0x82	; 130
    449a:	3f 4f       	sbci	r19, 0xFF	; 255
    449c:	f9 01       	movw	r30, r18
    449e:	20 81       	ld	r18, Z
    44a0:	31 81       	ldd	r19, Z+1	; 0x01
    44a2:	fc 01       	movw	r30, r24
    44a4:	31 83       	std	Z+1, r19	; 0x01
    44a6:	20 83       	st	Z, r18
    44a8:	ce 01       	movw	r24, r28
    44aa:	8e 57       	subi	r24, 0x7E	; 126
    44ac:	9f 4f       	sbci	r25, 0xFF	; 255
    44ae:	fc 01       	movw	r30, r24
    44b0:	80 81       	ld	r24, Z
    44b2:	91 81       	ldd	r25, Z+1	; 0x01
    44b4:	8c 01       	movw	r16, r24
    44b6:	c8 01       	movw	r24, r16
    44b8:	01 97       	sbiw	r24, 0x01	; 1
    44ba:	f1 f7       	brne	.-4      	; 0x44b8 <main+0xe8a>
    44bc:	8c 01       	movw	r16, r24
    44be:	ce 01       	movw	r24, r28
    44c0:	8e 57       	subi	r24, 0x7E	; 126
    44c2:	9f 4f       	sbci	r25, 0xFF	; 255
    44c4:	fc 01       	movw	r30, r24
    44c6:	11 83       	std	Z+1, r17	; 0x01
    44c8:	00 83       	st	Z, r16
			
			_delay_ms(50);
			
			tries++;
    44ca:	8a 81       	ldd	r24, Y+2	; 0x02
    44cc:	9b 81       	ldd	r25, Y+3	; 0x03
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	9b 83       	std	Y+3, r25	; 0x03
    44d2:	8a 83       	std	Y+2, r24	; 0x02
			
			if(tries==600)	
    44d4:	8a 81       	ldd	r24, Y+2	; 0x02
    44d6:	9b 81       	ldd	r25, Y+3	; 0x03
    44d8:	f2 e0       	ldi	r31, 0x02	; 2
    44da:	88 35       	cpi	r24, 0x58	; 88
    44dc:	9f 07       	cpc	r25, r31
    44de:	39 f0       	breq	.+14     	; 0x44ee <main+0xec0>
	
	uint8_t		nw_found=0;
	uint16_t	tries=0;
	uint8_t		x=0;
	
	while(!nw_found)
    44e0:	8d 81       	ldd	r24, Y+5	; 0x05
    44e2:	88 23       	and	r24, r24
    44e4:	09 f4       	brne	.+2      	; 0x44e8 <main+0xeba>
    44e6:	fd ce       	rjmp	.-518    	; 0x42e2 <main+0xcb4>
    44e8:	03 c0       	rjmp	.+6      	; 0x44f0 <main+0xec2>
			
			if(tries==600)	
				break;
		}
		else
			break;	
    44ea:	00 00       	nop
    44ec:	01 c0       	rjmp	.+2      	; 0x44f0 <main+0xec2>
			_delay_ms(50);
			
			tries++;
			
			if(tries==600)	
				break;
    44ee:	00 00       	nop
		}
		else
			break;	
		 
	}
	LCDClear();
    44f0:	81 e0       	ldi	r24, 0x01	; 1
    44f2:	60 e0       	ldi	r22, 0x00	; 0
    44f4:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	
	if(r==SIM300_NW_REGISTERED_HOME)
    44f8:	89 81       	ldd	r24, Y+1	; 0x01
    44fa:	81 30       	cpi	r24, 0x01	; 1
    44fc:	29 f4       	brne	.+10     	; 0x4508 <main+0xeda>
	{
		LCDWriteString("Network Found");
    44fe:	8d ec       	ldi	r24, 0xCD	; 205
    4500:	91 e0       	ldi	r25, 0x01	; 1
    4502:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    4506:	06 c0       	rjmp	.+12     	; 0x4514 <main+0xee6>
	}
	else
	{
		LCDWriteString("Cant Connt to NW!");
    4508:	8b ed       	ldi	r24, 0xDB	; 219
    450a:	91 e0       	ldi	r25, 0x01	; 1
    450c:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		Halt();
    4510:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
    4514:	9e 01       	movw	r18, r28
    4516:	2c 57       	subi	r18, 0x7C	; 124
    4518:	3f 4f       	sbci	r19, 0xFF	; 255
    451a:	80 e0       	ldi	r24, 0x00	; 0
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	aa e7       	ldi	r26, 0x7A	; 122
    4520:	b4 e4       	ldi	r27, 0x44	; 68
    4522:	f9 01       	movw	r30, r18
    4524:	80 83       	st	Z, r24
    4526:	91 83       	std	Z+1, r25	; 0x01
    4528:	a2 83       	std	Z+2, r26	; 0x02
    452a:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    452c:	8e 01       	movw	r16, r28
    452e:	08 57       	subi	r16, 0x78	; 120
    4530:	1f 4f       	sbci	r17, 0xFF	; 255
    4532:	ce 01       	movw	r24, r28
    4534:	8c 57       	subi	r24, 0x7C	; 124
    4536:	9f 4f       	sbci	r25, 0xFF	; 255
    4538:	fc 01       	movw	r30, r24
    453a:	60 81       	ld	r22, Z
    453c:	71 81       	ldd	r23, Z+1	; 0x01
    453e:	82 81       	ldd	r24, Z+2	; 0x02
    4540:	93 81       	ldd	r25, Z+3	; 0x03
    4542:	20 e0       	ldi	r18, 0x00	; 0
    4544:	30 e0       	ldi	r19, 0x00	; 0
    4546:	4a e7       	ldi	r20, 0x7A	; 122
    4548:	55 e4       	ldi	r21, 0x45	; 69
    454a:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    454e:	dc 01       	movw	r26, r24
    4550:	cb 01       	movw	r24, r22
    4552:	f8 01       	movw	r30, r16
    4554:	80 83       	st	Z, r24
    4556:	91 83       	std	Z+1, r25	; 0x01
    4558:	a2 83       	std	Z+2, r26	; 0x02
    455a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    455c:	ce 01       	movw	r24, r28
    455e:	88 57       	subi	r24, 0x78	; 120
    4560:	9f 4f       	sbci	r25, 0xFF	; 255
    4562:	11 e0       	ldi	r17, 0x01	; 1
    4564:	fc 01       	movw	r30, r24
    4566:	60 81       	ld	r22, Z
    4568:	71 81       	ldd	r23, Z+1	; 0x01
    456a:	82 81       	ldd	r24, Z+2	; 0x02
    456c:	93 81       	ldd	r25, Z+3	; 0x03
    456e:	20 e0       	ldi	r18, 0x00	; 0
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	40 e8       	ldi	r20, 0x80	; 128
    4574:	5f e3       	ldi	r21, 0x3F	; 63
    4576:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    457a:	88 23       	and	r24, r24
    457c:	0c f0       	brlt	.+2      	; 0x4580 <main+0xf52>
    457e:	10 e0       	ldi	r17, 0x00	; 0
    4580:	11 23       	and	r17, r17
    4582:	49 f0       	breq	.+18     	; 0x4596 <main+0xf68>
		__ticks = 1;
    4584:	ce 01       	movw	r24, r28
    4586:	84 57       	subi	r24, 0x74	; 116
    4588:	9f 4f       	sbci	r25, 0xFF	; 255
    458a:	21 e0       	ldi	r18, 0x01	; 1
    458c:	30 e0       	ldi	r19, 0x00	; 0
    458e:	fc 01       	movw	r30, r24
    4590:	31 83       	std	Z+1, r19	; 0x01
    4592:	20 83       	st	Z, r18
    4594:	74 c0       	rjmp	.+232    	; 0x467e <main+0x1050>
	else if (__tmp > 65535)
    4596:	ce 01       	movw	r24, r28
    4598:	88 57       	subi	r24, 0x78	; 120
    459a:	9f 4f       	sbci	r25, 0xFF	; 255
    459c:	11 e0       	ldi	r17, 0x01	; 1
    459e:	fc 01       	movw	r30, r24
    45a0:	60 81       	ld	r22, Z
    45a2:	71 81       	ldd	r23, Z+1	; 0x01
    45a4:	82 81       	ldd	r24, Z+2	; 0x02
    45a6:	93 81       	ldd	r25, Z+3	; 0x03
    45a8:	20 e0       	ldi	r18, 0x00	; 0
    45aa:	3f ef       	ldi	r19, 0xFF	; 255
    45ac:	4f e7       	ldi	r20, 0x7F	; 127
    45ae:	57 e4       	ldi	r21, 0x47	; 71
    45b0:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    45b4:	18 16       	cp	r1, r24
    45b6:	0c f0       	brlt	.+2      	; 0x45ba <main+0xf8c>
    45b8:	10 e0       	ldi	r17, 0x00	; 0
    45ba:	11 23       	and	r17, r17
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <main+0xf92>
    45be:	4d c0       	rjmp	.+154    	; 0x465a <main+0x102c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45c0:	ce 01       	movw	r24, r28
    45c2:	8c 57       	subi	r24, 0x7C	; 124
    45c4:	9f 4f       	sbci	r25, 0xFF	; 255
    45c6:	fc 01       	movw	r30, r24
    45c8:	60 81       	ld	r22, Z
    45ca:	71 81       	ldd	r23, Z+1	; 0x01
    45cc:	82 81       	ldd	r24, Z+2	; 0x02
    45ce:	93 81       	ldd	r25, Z+3	; 0x03
    45d0:	20 e0       	ldi	r18, 0x00	; 0
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	40 e2       	ldi	r20, 0x20	; 32
    45d6:	51 e4       	ldi	r21, 0x41	; 65
    45d8:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	8e 01       	movw	r16, r28
    45e2:	04 57       	subi	r16, 0x74	; 116
    45e4:	1f 4f       	sbci	r17, 0xFF	; 255
    45e6:	bc 01       	movw	r22, r24
    45e8:	cd 01       	movw	r24, r26
    45ea:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    45ee:	dc 01       	movw	r26, r24
    45f0:	cb 01       	movw	r24, r22
    45f2:	f8 01       	movw	r30, r16
    45f4:	91 83       	std	Z+1, r25	; 0x01
    45f6:	80 83       	st	Z, r24
    45f8:	27 c0       	rjmp	.+78     	; 0x4648 <main+0x101a>
    45fa:	ce 01       	movw	r24, r28
    45fc:	82 57       	subi	r24, 0x72	; 114
    45fe:	9f 4f       	sbci	r25, 0xFF	; 255
    4600:	20 e9       	ldi	r18, 0x90	; 144
    4602:	31 e0       	ldi	r19, 0x01	; 1
    4604:	fc 01       	movw	r30, r24
    4606:	31 83       	std	Z+1, r19	; 0x01
    4608:	20 83       	st	Z, r18
    460a:	ce 01       	movw	r24, r28
    460c:	82 57       	subi	r24, 0x72	; 114
    460e:	9f 4f       	sbci	r25, 0xFF	; 255
    4610:	fc 01       	movw	r30, r24
    4612:	80 81       	ld	r24, Z
    4614:	91 81       	ldd	r25, Z+1	; 0x01
    4616:	8c 01       	movw	r16, r24
    4618:	c8 01       	movw	r24, r16
    461a:	01 97       	sbiw	r24, 0x01	; 1
    461c:	f1 f7       	brne	.-4      	; 0x461a <main+0xfec>
    461e:	8c 01       	movw	r16, r24
    4620:	ce 01       	movw	r24, r28
    4622:	82 57       	subi	r24, 0x72	; 114
    4624:	9f 4f       	sbci	r25, 0xFF	; 255
    4626:	fc 01       	movw	r30, r24
    4628:	11 83       	std	Z+1, r17	; 0x01
    462a:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    462c:	ce 01       	movw	r24, r28
    462e:	84 57       	subi	r24, 0x74	; 116
    4630:	9f 4f       	sbci	r25, 0xFF	; 255
    4632:	9e 01       	movw	r18, r28
    4634:	24 57       	subi	r18, 0x74	; 116
    4636:	3f 4f       	sbci	r19, 0xFF	; 255
    4638:	f9 01       	movw	r30, r18
    463a:	20 81       	ld	r18, Z
    463c:	31 81       	ldd	r19, Z+1	; 0x01
    463e:	21 50       	subi	r18, 0x01	; 1
    4640:	30 40       	sbci	r19, 0x00	; 0
    4642:	fc 01       	movw	r30, r24
    4644:	31 83       	std	Z+1, r19	; 0x01
    4646:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4648:	ce 01       	movw	r24, r28
    464a:	84 57       	subi	r24, 0x74	; 116
    464c:	9f 4f       	sbci	r25, 0xFF	; 255
    464e:	fc 01       	movw	r30, r24
    4650:	80 81       	ld	r24, Z
    4652:	91 81       	ldd	r25, Z+1	; 0x01
    4654:	00 97       	sbiw	r24, 0x00	; 0
    4656:	89 f6       	brne	.-94     	; 0x45fa <main+0xfcc>
    4658:	2f c0       	rjmp	.+94     	; 0x46b8 <main+0x108a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465a:	8e 01       	movw	r16, r28
    465c:	04 57       	subi	r16, 0x74	; 116
    465e:	1f 4f       	sbci	r17, 0xFF	; 255
    4660:	ce 01       	movw	r24, r28
    4662:	88 57       	subi	r24, 0x78	; 120
    4664:	9f 4f       	sbci	r25, 0xFF	; 255
    4666:	fc 01       	movw	r30, r24
    4668:	60 81       	ld	r22, Z
    466a:	71 81       	ldd	r23, Z+1	; 0x01
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    4674:	dc 01       	movw	r26, r24
    4676:	cb 01       	movw	r24, r22
    4678:	f8 01       	movw	r30, r16
    467a:	91 83       	std	Z+1, r25	; 0x01
    467c:	80 83       	st	Z, r24
    467e:	ce 01       	movw	r24, r28
    4680:	80 57       	subi	r24, 0x70	; 112
    4682:	9f 4f       	sbci	r25, 0xFF	; 255
    4684:	9e 01       	movw	r18, r28
    4686:	24 57       	subi	r18, 0x74	; 116
    4688:	3f 4f       	sbci	r19, 0xFF	; 255
    468a:	f9 01       	movw	r30, r18
    468c:	20 81       	ld	r18, Z
    468e:	31 81       	ldd	r19, Z+1	; 0x01
    4690:	fc 01       	movw	r30, r24
    4692:	31 83       	std	Z+1, r19	; 0x01
    4694:	20 83       	st	Z, r18
    4696:	ce 01       	movw	r24, r28
    4698:	80 57       	subi	r24, 0x70	; 112
    469a:	9f 4f       	sbci	r25, 0xFF	; 255
    469c:	fc 01       	movw	r30, r24
    469e:	80 81       	ld	r24, Z
    46a0:	91 81       	ldd	r25, Z+1	; 0x01
    46a2:	8c 01       	movw	r16, r24
    46a4:	c8 01       	movw	r24, r16
    46a6:	01 97       	sbiw	r24, 0x01	; 1
    46a8:	f1 f7       	brne	.-4      	; 0x46a6 <main+0x1078>
    46aa:	8c 01       	movw	r16, r24
    46ac:	ce 01       	movw	r24, r28
    46ae:	80 57       	subi	r24, 0x70	; 112
    46b0:	9f 4f       	sbci	r25, 0xFF	; 255
    46b2:	fc 01       	movw	r30, r24
    46b4:	11 83       	std	Z+1, r17	; 0x01
    46b6:	00 83       	st	Z, r16
	}
	
	_delay_ms(1000);
	
	LCDClear();
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	60 e0       	ldi	r22, 0x00	; 0
    46bc:	0e 94 49 00 	call	0x92	; 0x92 <LCDByte>
	
	//Show Provider Name
	char pname[32];
	r=SIM300GetProviderName(pname);
    46c0:	ce 01       	movw	r24, r28
    46c2:	80 5f       	subi	r24, 0xF0	; 240
    46c4:	9e 4f       	sbci	r25, 0xFE	; 254
    46c6:	0e 94 de 18 	call	0x31bc	; 0x31bc <SIM300GetProviderName>
    46ca:	89 83       	std	Y+1, r24	; 0x01
	
	if(r==0)
    46cc:	89 81       	ldd	r24, Y+1	; 0x01
    46ce:	88 23       	and	r24, r24
    46d0:	31 f4       	brne	.+12     	; 0x46de <main+0x10b0>
	{
		LCDWriteString("Comm Error !");
    46d2:	89 e3       	ldi	r24, 0x39	; 57
    46d4:	91 e0       	ldi	r25, 0x01	; 1
    46d6:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
		Halt();
    46da:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
	}
	
	LCDWriteString(pname);
    46de:	ce 01       	movw	r24, r28
    46e0:	80 5f       	subi	r24, 0xF0	; 240
    46e2:	9e 4f       	sbci	r25, 0xFE	; 254
    46e4:	0e 94 65 13 	call	0x26ca	; 0x26ca <LCDWriteString>
    46e8:	9e 01       	movw	r18, r28
    46ea:	2e 56       	subi	r18, 0x6E	; 110
    46ec:	3f 4f       	sbci	r19, 0xFF	; 255
    46ee:	80 e0       	ldi	r24, 0x00	; 0
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	aa e7       	ldi	r26, 0x7A	; 122
    46f4:	b4 e4       	ldi	r27, 0x44	; 68
    46f6:	f9 01       	movw	r30, r18
    46f8:	80 83       	st	Z, r24
    46fa:	91 83       	std	Z+1, r25	; 0x01
    46fc:	a2 83       	std	Z+2, r26	; 0x02
    46fe:	b3 83       	std	Z+3, r27	; 0x03
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    4700:	8e 01       	movw	r16, r28
    4702:	0a 56       	subi	r16, 0x6A	; 106
    4704:	1f 4f       	sbci	r17, 0xFF	; 255
    4706:	ce 01       	movw	r24, r28
    4708:	8e 56       	subi	r24, 0x6E	; 110
    470a:	9f 4f       	sbci	r25, 0xFF	; 255
    470c:	fc 01       	movw	r30, r24
    470e:	60 81       	ld	r22, Z
    4710:	71 81       	ldd	r23, Z+1	; 0x01
    4712:	82 81       	ldd	r24, Z+2	; 0x02
    4714:	93 81       	ldd	r25, Z+3	; 0x03
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	4a e7       	ldi	r20, 0x7A	; 122
    471c:	55 e4       	ldi	r21, 0x45	; 69
    471e:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    4722:	dc 01       	movw	r26, r24
    4724:	cb 01       	movw	r24, r22
    4726:	f8 01       	movw	r30, r16
    4728:	80 83       	st	Z, r24
    472a:	91 83       	std	Z+1, r25	; 0x01
    472c:	a2 83       	std	Z+2, r26	; 0x02
    472e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4730:	ce 01       	movw	r24, r28
    4732:	8a 56       	subi	r24, 0x6A	; 106
    4734:	9f 4f       	sbci	r25, 0xFF	; 255
    4736:	11 e0       	ldi	r17, 0x01	; 1
    4738:	fc 01       	movw	r30, r24
    473a:	60 81       	ld	r22, Z
    473c:	71 81       	ldd	r23, Z+1	; 0x01
    473e:	82 81       	ldd	r24, Z+2	; 0x02
    4740:	93 81       	ldd	r25, Z+3	; 0x03
    4742:	20 e0       	ldi	r18, 0x00	; 0
    4744:	30 e0       	ldi	r19, 0x00	; 0
    4746:	40 e8       	ldi	r20, 0x80	; 128
    4748:	5f e3       	ldi	r21, 0x3F	; 63
    474a:	0e 94 37 28 	call	0x506e	; 0x506e <__ltsf2>
    474e:	88 23       	and	r24, r24
    4750:	0c f0       	brlt	.+2      	; 0x4754 <main+0x1126>
    4752:	10 e0       	ldi	r17, 0x00	; 0
    4754:	11 23       	and	r17, r17
    4756:	49 f0       	breq	.+18     	; 0x476a <main+0x113c>
		__ticks = 1;
    4758:	ce 01       	movw	r24, r28
    475a:	86 56       	subi	r24, 0x66	; 102
    475c:	9f 4f       	sbci	r25, 0xFF	; 255
    475e:	21 e0       	ldi	r18, 0x01	; 1
    4760:	30 e0       	ldi	r19, 0x00	; 0
    4762:	fc 01       	movw	r30, r24
    4764:	31 83       	std	Z+1, r19	; 0x01
    4766:	20 83       	st	Z, r18
    4768:	74 c0       	rjmp	.+232    	; 0x4852 <main+0x1224>
	else if (__tmp > 65535)
    476a:	ce 01       	movw	r24, r28
    476c:	8a 56       	subi	r24, 0x6A	; 106
    476e:	9f 4f       	sbci	r25, 0xFF	; 255
    4770:	11 e0       	ldi	r17, 0x01	; 1
    4772:	fc 01       	movw	r30, r24
    4774:	60 81       	ld	r22, Z
    4776:	71 81       	ldd	r23, Z+1	; 0x01
    4778:	82 81       	ldd	r24, Z+2	; 0x02
    477a:	93 81       	ldd	r25, Z+3	; 0x03
    477c:	20 e0       	ldi	r18, 0x00	; 0
    477e:	3f ef       	ldi	r19, 0xFF	; 255
    4780:	4f e7       	ldi	r20, 0x7F	; 127
    4782:	57 e4       	ldi	r21, 0x47	; 71
    4784:	0e 94 d7 27 	call	0x4fae	; 0x4fae <__gtsf2>
    4788:	18 16       	cp	r1, r24
    478a:	0c f0       	brlt	.+2      	; 0x478e <main+0x1160>
    478c:	10 e0       	ldi	r17, 0x00	; 0
    478e:	11 23       	and	r17, r17
    4790:	09 f4       	brne	.+2      	; 0x4794 <main+0x1166>
    4792:	4d c0       	rjmp	.+154    	; 0x482e <main+0x1200>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4794:	ce 01       	movw	r24, r28
    4796:	8e 56       	subi	r24, 0x6E	; 110
    4798:	9f 4f       	sbci	r25, 0xFF	; 255
    479a:	fc 01       	movw	r30, r24
    479c:	60 81       	ld	r22, Z
    479e:	71 81       	ldd	r23, Z+1	; 0x01
    47a0:	82 81       	ldd	r24, Z+2	; 0x02
    47a2:	93 81       	ldd	r25, Z+3	; 0x03
    47a4:	20 e0       	ldi	r18, 0x00	; 0
    47a6:	30 e0       	ldi	r19, 0x00	; 0
    47a8:	40 e2       	ldi	r20, 0x20	; 32
    47aa:	51 e4       	ldi	r21, 0x41	; 65
    47ac:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <__mulsf3>
    47b0:	dc 01       	movw	r26, r24
    47b2:	cb 01       	movw	r24, r22
    47b4:	8e 01       	movw	r16, r28
    47b6:	06 56       	subi	r16, 0x66	; 102
    47b8:	1f 4f       	sbci	r17, 0xFF	; 255
    47ba:	bc 01       	movw	r22, r24
    47bc:	cd 01       	movw	r24, r26
    47be:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    47c2:	dc 01       	movw	r26, r24
    47c4:	cb 01       	movw	r24, r22
    47c6:	f8 01       	movw	r30, r16
    47c8:	91 83       	std	Z+1, r25	; 0x01
    47ca:	80 83       	st	Z, r24
    47cc:	27 c0       	rjmp	.+78     	; 0x481c <main+0x11ee>
    47ce:	ce 01       	movw	r24, r28
    47d0:	84 56       	subi	r24, 0x64	; 100
    47d2:	9f 4f       	sbci	r25, 0xFF	; 255
    47d4:	20 e9       	ldi	r18, 0x90	; 144
    47d6:	31 e0       	ldi	r19, 0x01	; 1
    47d8:	fc 01       	movw	r30, r24
    47da:	31 83       	std	Z+1, r19	; 0x01
    47dc:	20 83       	st	Z, r18
    47de:	ce 01       	movw	r24, r28
    47e0:	84 56       	subi	r24, 0x64	; 100
    47e2:	9f 4f       	sbci	r25, 0xFF	; 255
    47e4:	fc 01       	movw	r30, r24
    47e6:	80 81       	ld	r24, Z
    47e8:	91 81       	ldd	r25, Z+1	; 0x01
    47ea:	8c 01       	movw	r16, r24
    47ec:	c8 01       	movw	r24, r16
    47ee:	01 97       	sbiw	r24, 0x01	; 1
    47f0:	f1 f7       	brne	.-4      	; 0x47ee <main+0x11c0>
    47f2:	8c 01       	movw	r16, r24
    47f4:	ce 01       	movw	r24, r28
    47f6:	84 56       	subi	r24, 0x64	; 100
    47f8:	9f 4f       	sbci	r25, 0xFF	; 255
    47fa:	fc 01       	movw	r30, r24
    47fc:	11 83       	std	Z+1, r17	; 0x01
    47fe:	00 83       	st	Z, r16
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4800:	ce 01       	movw	r24, r28
    4802:	86 56       	subi	r24, 0x66	; 102
    4804:	9f 4f       	sbci	r25, 0xFF	; 255
    4806:	9e 01       	movw	r18, r28
    4808:	26 56       	subi	r18, 0x66	; 102
    480a:	3f 4f       	sbci	r19, 0xFF	; 255
    480c:	f9 01       	movw	r30, r18
    480e:	20 81       	ld	r18, Z
    4810:	31 81       	ldd	r19, Z+1	; 0x01
    4812:	21 50       	subi	r18, 0x01	; 1
    4814:	30 40       	sbci	r19, 0x00	; 0
    4816:	fc 01       	movw	r30, r24
    4818:	31 83       	std	Z+1, r19	; 0x01
    481a:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    481c:	ce 01       	movw	r24, r28
    481e:	86 56       	subi	r24, 0x66	; 102
    4820:	9f 4f       	sbci	r25, 0xFF	; 255
    4822:	fc 01       	movw	r30, r24
    4824:	80 81       	ld	r24, Z
    4826:	91 81       	ldd	r25, Z+1	; 0x01
    4828:	00 97       	sbiw	r24, 0x00	; 0
    482a:	89 f6       	brne	.-94     	; 0x47ce <main+0x11a0>
    482c:	2f c0       	rjmp	.+94     	; 0x488c <main+0x125e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482e:	8e 01       	movw	r16, r28
    4830:	06 56       	subi	r16, 0x66	; 102
    4832:	1f 4f       	sbci	r17, 0xFF	; 255
    4834:	ce 01       	movw	r24, r28
    4836:	8a 56       	subi	r24, 0x6A	; 106
    4838:	9f 4f       	sbci	r25, 0xFF	; 255
    483a:	fc 01       	movw	r30, r24
    483c:	60 81       	ld	r22, Z
    483e:	71 81       	ldd	r23, Z+1	; 0x01
    4840:	82 81       	ldd	r24, Z+2	; 0x02
    4842:	93 81       	ldd	r25, Z+3	; 0x03
    4844:	0e 94 5b 24 	call	0x48b6	; 0x48b6 <__fixunssfsi>
    4848:	dc 01       	movw	r26, r24
    484a:	cb 01       	movw	r24, r22
    484c:	f8 01       	movw	r30, r16
    484e:	91 83       	std	Z+1, r25	; 0x01
    4850:	80 83       	st	Z, r24
    4852:	ce 01       	movw	r24, r28
    4854:	82 56       	subi	r24, 0x62	; 98
    4856:	9f 4f       	sbci	r25, 0xFF	; 255
    4858:	9e 01       	movw	r18, r28
    485a:	26 56       	subi	r18, 0x66	; 102
    485c:	3f 4f       	sbci	r19, 0xFF	; 255
    485e:	f9 01       	movw	r30, r18
    4860:	20 81       	ld	r18, Z
    4862:	31 81       	ldd	r19, Z+1	; 0x01
    4864:	fc 01       	movw	r30, r24
    4866:	31 83       	std	Z+1, r19	; 0x01
    4868:	20 83       	st	Z, r18
    486a:	ce 01       	movw	r24, r28
    486c:	82 56       	subi	r24, 0x62	; 98
    486e:	9f 4f       	sbci	r25, 0xFF	; 255
    4870:	fc 01       	movw	r30, r24
    4872:	80 81       	ld	r24, Z
    4874:	91 81       	ldd	r25, Z+1	; 0x01
    4876:	8c 01       	movw	r16, r24
    4878:	c8 01       	movw	r24, r16
    487a:	01 97       	sbiw	r24, 0x01	; 1
    487c:	f1 f7       	brne	.-4      	; 0x487a <main+0x124c>
    487e:	8c 01       	movw	r16, r24
    4880:	ce 01       	movw	r24, r28
    4882:	82 56       	subi	r24, 0x62	; 98
    4884:	9f 4f       	sbci	r25, 0xFF	; 255
    4886:	fc 01       	movw	r30, r24
    4888:	11 83       	std	Z+1, r17	; 0x01
    488a:	00 83       	st	Z, r16
	
	_delay_ms(1000);
	
	Halt();
    488c:	0e 94 56 24 	call	0x48ac	; 0x48ac <Halt>
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e0       	ldi	r25, 0x00	; 0
}
    4894:	c1 5d       	subi	r28, 0xD1	; 209
    4896:	de 4f       	sbci	r29, 0xFE	; 254
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	1f 91       	pop	r17
    48a8:	0f 91       	pop	r16
    48aa:	08 95       	ret

000048ac <Halt>:

void Halt()
{
    48ac:	df 93       	push	r29
    48ae:	cf 93       	push	r28
    48b0:	cd b7       	in	r28, 0x3d	; 61
    48b2:	de b7       	in	r29, 0x3e	; 62
	while(1);
    48b4:	ff cf       	rjmp	.-2      	; 0x48b4 <Halt+0x8>

000048b6 <__fixunssfsi>:
    48b6:	ef 92       	push	r14
    48b8:	ff 92       	push	r15
    48ba:	0f 93       	push	r16
    48bc:	1f 93       	push	r17
    48be:	7b 01       	movw	r14, r22
    48c0:	8c 01       	movw	r16, r24
    48c2:	20 e0       	ldi	r18, 0x00	; 0
    48c4:	30 e0       	ldi	r19, 0x00	; 0
    48c6:	40 e0       	ldi	r20, 0x00	; 0
    48c8:	5f e4       	ldi	r21, 0x4F	; 79
    48ca:	0e 94 07 28 	call	0x500e	; 0x500e <__gesf2>
    48ce:	87 fd       	sbrc	r24, 7
    48d0:	11 c0       	rjmp	.+34     	; 0x48f4 <__fixunssfsi+0x3e>
    48d2:	c8 01       	movw	r24, r16
    48d4:	b7 01       	movw	r22, r14
    48d6:	20 e0       	ldi	r18, 0x00	; 0
    48d8:	30 e0       	ldi	r19, 0x00	; 0
    48da:	40 e0       	ldi	r20, 0x00	; 0
    48dc:	5f e4       	ldi	r21, 0x4F	; 79
    48de:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <__subsf3>
    48e2:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fixsfsi>
    48e6:	9b 01       	movw	r18, r22
    48e8:	ac 01       	movw	r20, r24
    48ea:	20 50       	subi	r18, 0x00	; 0
    48ec:	30 40       	sbci	r19, 0x00	; 0
    48ee:	40 40       	sbci	r20, 0x00	; 0
    48f0:	50 48       	sbci	r21, 0x80	; 128
    48f2:	06 c0       	rjmp	.+12     	; 0x4900 <__fixunssfsi+0x4a>
    48f4:	c8 01       	movw	r24, r16
    48f6:	b7 01       	movw	r22, r14
    48f8:	0e 94 67 28 	call	0x50ce	; 0x50ce <__fixsfsi>
    48fc:	9b 01       	movw	r18, r22
    48fe:	ac 01       	movw	r20, r24
    4900:	b9 01       	movw	r22, r18
    4902:	ca 01       	movw	r24, r20
    4904:	1f 91       	pop	r17
    4906:	0f 91       	pop	r16
    4908:	ff 90       	pop	r15
    490a:	ef 90       	pop	r14
    490c:	08 95       	ret

0000490e <_fpadd_parts>:
    490e:	a0 e0       	ldi	r26, 0x00	; 0
    4910:	b0 e0       	ldi	r27, 0x00	; 0
    4912:	ed e8       	ldi	r30, 0x8D	; 141
    4914:	f4 e2       	ldi	r31, 0x24	; 36
    4916:	0c 94 74 2a 	jmp	0x54e8	; 0x54e8 <__prologue_saves__+0x8>
    491a:	fc 01       	movw	r30, r24
    491c:	ea 01       	movw	r28, r20
    491e:	80 81       	ld	r24, Z
    4920:	82 30       	cpi	r24, 0x02	; 2
    4922:	08 f4       	brcc	.+2      	; 0x4926 <_fpadd_parts+0x18>
    4924:	38 c1       	rjmp	.+624    	; 0x4b96 <_fpadd_parts+0x288>
    4926:	db 01       	movw	r26, r22
    4928:	9c 91       	ld	r25, X
    492a:	92 30       	cpi	r25, 0x02	; 2
    492c:	08 f4       	brcc	.+2      	; 0x4930 <_fpadd_parts+0x22>
    492e:	30 c1       	rjmp	.+608    	; 0x4b90 <_fpadd_parts+0x282>
    4930:	84 30       	cpi	r24, 0x04	; 4
    4932:	59 f4       	brne	.+22     	; 0x494a <_fpadd_parts+0x3c>
    4934:	94 30       	cpi	r25, 0x04	; 4
    4936:	09 f0       	breq	.+2      	; 0x493a <_fpadd_parts+0x2c>
    4938:	2e c1       	rjmp	.+604    	; 0x4b96 <_fpadd_parts+0x288>
    493a:	91 81       	ldd	r25, Z+1	; 0x01
    493c:	11 96       	adiw	r26, 0x01	; 1
    493e:	8c 91       	ld	r24, X
    4940:	11 97       	sbiw	r26, 0x01	; 1
    4942:	98 17       	cp	r25, r24
    4944:	09 f0       	breq	.+2      	; 0x4948 <_fpadd_parts+0x3a>
    4946:	21 c1       	rjmp	.+578    	; 0x4b8a <_fpadd_parts+0x27c>
    4948:	26 c1       	rjmp	.+588    	; 0x4b96 <_fpadd_parts+0x288>
    494a:	94 30       	cpi	r25, 0x04	; 4
    494c:	09 f4       	brne	.+2      	; 0x4950 <_fpadd_parts+0x42>
    494e:	20 c1       	rjmp	.+576    	; 0x4b90 <_fpadd_parts+0x282>
    4950:	92 30       	cpi	r25, 0x02	; 2
    4952:	b1 f4       	brne	.+44     	; 0x4980 <_fpadd_parts+0x72>
    4954:	82 30       	cpi	r24, 0x02	; 2
    4956:	09 f0       	breq	.+2      	; 0x495a <_fpadd_parts+0x4c>
    4958:	1e c1       	rjmp	.+572    	; 0x4b96 <_fpadd_parts+0x288>
    495a:	ca 01       	movw	r24, r20
    495c:	af 01       	movw	r20, r30
    495e:	28 e0       	ldi	r18, 0x08	; 8
    4960:	da 01       	movw	r26, r20
    4962:	0d 90       	ld	r0, X+
    4964:	ad 01       	movw	r20, r26
    4966:	dc 01       	movw	r26, r24
    4968:	0d 92       	st	X+, r0
    496a:	cd 01       	movw	r24, r26
    496c:	21 50       	subi	r18, 0x01	; 1
    496e:	c1 f7       	brne	.-16     	; 0x4960 <_fpadd_parts+0x52>
    4970:	db 01       	movw	r26, r22
    4972:	11 96       	adiw	r26, 0x01	; 1
    4974:	8c 91       	ld	r24, X
    4976:	11 97       	sbiw	r26, 0x01	; 1
    4978:	91 81       	ldd	r25, Z+1	; 0x01
    497a:	89 23       	and	r24, r25
    497c:	89 83       	std	Y+1, r24	; 0x01
    497e:	0a c1       	rjmp	.+532    	; 0x4b94 <_fpadd_parts+0x286>
    4980:	82 30       	cpi	r24, 0x02	; 2
    4982:	09 f4       	brne	.+2      	; 0x4986 <_fpadd_parts+0x78>
    4984:	05 c1       	rjmp	.+522    	; 0x4b90 <_fpadd_parts+0x282>
    4986:	c2 80       	ldd	r12, Z+2	; 0x02
    4988:	d3 80       	ldd	r13, Z+3	; 0x03
    498a:	db 01       	movw	r26, r22
    498c:	12 96       	adiw	r26, 0x02	; 2
    498e:	6d 90       	ld	r6, X+
    4990:	7c 90       	ld	r7, X
    4992:	13 97       	sbiw	r26, 0x03	; 3
    4994:	24 81       	ldd	r18, Z+4	; 0x04
    4996:	35 81       	ldd	r19, Z+5	; 0x05
    4998:	46 81       	ldd	r20, Z+6	; 0x06
    499a:	57 81       	ldd	r21, Z+7	; 0x07
    499c:	14 96       	adiw	r26, 0x04	; 4
    499e:	ed 90       	ld	r14, X+
    49a0:	fd 90       	ld	r15, X+
    49a2:	0d 91       	ld	r16, X+
    49a4:	1c 91       	ld	r17, X
    49a6:	17 97       	sbiw	r26, 0x07	; 7
    49a8:	c6 01       	movw	r24, r12
    49aa:	86 19       	sub	r24, r6
    49ac:	97 09       	sbc	r25, r7
    49ae:	5c 01       	movw	r10, r24
    49b0:	97 ff       	sbrs	r25, 7
    49b2:	04 c0       	rjmp	.+8      	; 0x49bc <_fpadd_parts+0xae>
    49b4:	aa 24       	eor	r10, r10
    49b6:	bb 24       	eor	r11, r11
    49b8:	a8 1a       	sub	r10, r24
    49ba:	b9 0a       	sbc	r11, r25
    49bc:	b0 e2       	ldi	r27, 0x20	; 32
    49be:	ab 16       	cp	r10, r27
    49c0:	b1 04       	cpc	r11, r1
    49c2:	0c f0       	brlt	.+2      	; 0x49c6 <_fpadd_parts+0xb8>
    49c4:	61 c0       	rjmp	.+194    	; 0x4a88 <_fpadd_parts+0x17a>
    49c6:	18 16       	cp	r1, r24
    49c8:	19 06       	cpc	r1, r25
    49ca:	6c f5       	brge	.+90     	; 0x4a26 <_fpadd_parts+0x118>
    49cc:	37 01       	movw	r6, r14
    49ce:	48 01       	movw	r8, r16
    49d0:	0a 2c       	mov	r0, r10
    49d2:	04 c0       	rjmp	.+8      	; 0x49dc <_fpadd_parts+0xce>
    49d4:	96 94       	lsr	r9
    49d6:	87 94       	ror	r8
    49d8:	77 94       	ror	r7
    49da:	67 94       	ror	r6
    49dc:	0a 94       	dec	r0
    49de:	d2 f7       	brpl	.-12     	; 0x49d4 <_fpadd_parts+0xc6>
    49e0:	81 e0       	ldi	r24, 0x01	; 1
    49e2:	90 e0       	ldi	r25, 0x00	; 0
    49e4:	a0 e0       	ldi	r26, 0x00	; 0
    49e6:	b0 e0       	ldi	r27, 0x00	; 0
    49e8:	0a 2c       	mov	r0, r10
    49ea:	04 c0       	rjmp	.+8      	; 0x49f4 <_fpadd_parts+0xe6>
    49ec:	88 0f       	add	r24, r24
    49ee:	99 1f       	adc	r25, r25
    49f0:	aa 1f       	adc	r26, r26
    49f2:	bb 1f       	adc	r27, r27
    49f4:	0a 94       	dec	r0
    49f6:	d2 f7       	brpl	.-12     	; 0x49ec <_fpadd_parts+0xde>
    49f8:	01 97       	sbiw	r24, 0x01	; 1
    49fa:	a1 09       	sbc	r26, r1
    49fc:	b1 09       	sbc	r27, r1
    49fe:	8e 21       	and	r24, r14
    4a00:	9f 21       	and	r25, r15
    4a02:	a0 23       	and	r26, r16
    4a04:	b1 23       	and	r27, r17
    4a06:	ee 24       	eor	r14, r14
    4a08:	ff 24       	eor	r15, r15
    4a0a:	87 01       	movw	r16, r14
    4a0c:	e3 94       	inc	r14
    4a0e:	00 97       	sbiw	r24, 0x00	; 0
    4a10:	a1 05       	cpc	r26, r1
    4a12:	b1 05       	cpc	r27, r1
    4a14:	19 f4       	brne	.+6      	; 0x4a1c <_fpadd_parts+0x10e>
    4a16:	ee 24       	eor	r14, r14
    4a18:	ff 24       	eor	r15, r15
    4a1a:	87 01       	movw	r16, r14
    4a1c:	e6 28       	or	r14, r6
    4a1e:	f7 28       	or	r15, r7
    4a20:	08 29       	or	r16, r8
    4a22:	19 29       	or	r17, r9
    4a24:	3c c0       	rjmp	.+120    	; 0x4a9e <_fpadd_parts+0x190>
    4a26:	00 97       	sbiw	r24, 0x00	; 0
    4a28:	d1 f1       	breq	.+116    	; 0x4a9e <_fpadd_parts+0x190>
    4a2a:	ca 0c       	add	r12, r10
    4a2c:	db 1c       	adc	r13, r11
    4a2e:	39 01       	movw	r6, r18
    4a30:	4a 01       	movw	r8, r20
    4a32:	0a 2c       	mov	r0, r10
    4a34:	04 c0       	rjmp	.+8      	; 0x4a3e <_fpadd_parts+0x130>
    4a36:	96 94       	lsr	r9
    4a38:	87 94       	ror	r8
    4a3a:	77 94       	ror	r7
    4a3c:	67 94       	ror	r6
    4a3e:	0a 94       	dec	r0
    4a40:	d2 f7       	brpl	.-12     	; 0x4a36 <_fpadd_parts+0x128>
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	90 e0       	ldi	r25, 0x00	; 0
    4a46:	a0 e0       	ldi	r26, 0x00	; 0
    4a48:	b0 e0       	ldi	r27, 0x00	; 0
    4a4a:	0a 2c       	mov	r0, r10
    4a4c:	04 c0       	rjmp	.+8      	; 0x4a56 <_fpadd_parts+0x148>
    4a4e:	88 0f       	add	r24, r24
    4a50:	99 1f       	adc	r25, r25
    4a52:	aa 1f       	adc	r26, r26
    4a54:	bb 1f       	adc	r27, r27
    4a56:	0a 94       	dec	r0
    4a58:	d2 f7       	brpl	.-12     	; 0x4a4e <_fpadd_parts+0x140>
    4a5a:	01 97       	sbiw	r24, 0x01	; 1
    4a5c:	a1 09       	sbc	r26, r1
    4a5e:	b1 09       	sbc	r27, r1
    4a60:	82 23       	and	r24, r18
    4a62:	93 23       	and	r25, r19
    4a64:	a4 23       	and	r26, r20
    4a66:	b5 23       	and	r27, r21
    4a68:	21 e0       	ldi	r18, 0x01	; 1
    4a6a:	30 e0       	ldi	r19, 0x00	; 0
    4a6c:	40 e0       	ldi	r20, 0x00	; 0
    4a6e:	50 e0       	ldi	r21, 0x00	; 0
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	a1 05       	cpc	r26, r1
    4a74:	b1 05       	cpc	r27, r1
    4a76:	19 f4       	brne	.+6      	; 0x4a7e <_fpadd_parts+0x170>
    4a78:	20 e0       	ldi	r18, 0x00	; 0
    4a7a:	30 e0       	ldi	r19, 0x00	; 0
    4a7c:	a9 01       	movw	r20, r18
    4a7e:	26 29       	or	r18, r6
    4a80:	37 29       	or	r19, r7
    4a82:	48 29       	or	r20, r8
    4a84:	59 29       	or	r21, r9
    4a86:	0b c0       	rjmp	.+22     	; 0x4a9e <_fpadd_parts+0x190>
    4a88:	6c 14       	cp	r6, r12
    4a8a:	7d 04       	cpc	r7, r13
    4a8c:	24 f4       	brge	.+8      	; 0x4a96 <_fpadd_parts+0x188>
    4a8e:	ee 24       	eor	r14, r14
    4a90:	ff 24       	eor	r15, r15
    4a92:	87 01       	movw	r16, r14
    4a94:	04 c0       	rjmp	.+8      	; 0x4a9e <_fpadd_parts+0x190>
    4a96:	63 01       	movw	r12, r6
    4a98:	20 e0       	ldi	r18, 0x00	; 0
    4a9a:	30 e0       	ldi	r19, 0x00	; 0
    4a9c:	a9 01       	movw	r20, r18
    4a9e:	81 81       	ldd	r24, Z+1	; 0x01
    4aa0:	fb 01       	movw	r30, r22
    4aa2:	91 81       	ldd	r25, Z+1	; 0x01
    4aa4:	89 17       	cp	r24, r25
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <_fpadd_parts+0x19c>
    4aa8:	45 c0       	rjmp	.+138    	; 0x4b34 <_fpadd_parts+0x226>
    4aaa:	88 23       	and	r24, r24
    4aac:	49 f0       	breq	.+18     	; 0x4ac0 <_fpadd_parts+0x1b2>
    4aae:	d8 01       	movw	r26, r16
    4ab0:	c7 01       	movw	r24, r14
    4ab2:	82 1b       	sub	r24, r18
    4ab4:	93 0b       	sbc	r25, r19
    4ab6:	a4 0b       	sbc	r26, r20
    4ab8:	b5 0b       	sbc	r27, r21
    4aba:	9c 01       	movw	r18, r24
    4abc:	ad 01       	movw	r20, r26
    4abe:	04 c0       	rjmp	.+8      	; 0x4ac8 <_fpadd_parts+0x1ba>
    4ac0:	2e 19       	sub	r18, r14
    4ac2:	3f 09       	sbc	r19, r15
    4ac4:	40 0b       	sbc	r20, r16
    4ac6:	51 0b       	sbc	r21, r17
    4ac8:	57 fd       	sbrc	r21, 7
    4aca:	04 c0       	rjmp	.+8      	; 0x4ad4 <_fpadd_parts+0x1c6>
    4acc:	19 82       	std	Y+1, r1	; 0x01
    4ace:	db 82       	std	Y+3, r13	; 0x03
    4ad0:	ca 82       	std	Y+2, r12	; 0x02
    4ad2:	0b c0       	rjmp	.+22     	; 0x4aea <_fpadd_parts+0x1dc>
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	89 83       	std	Y+1, r24	; 0x01
    4ad8:	db 82       	std	Y+3, r13	; 0x03
    4ada:	ca 82       	std	Y+2, r12	; 0x02
    4adc:	50 95       	com	r21
    4ade:	40 95       	com	r20
    4ae0:	30 95       	com	r19
    4ae2:	21 95       	neg	r18
    4ae4:	3f 4f       	sbci	r19, 0xFF	; 255
    4ae6:	4f 4f       	sbci	r20, 0xFF	; 255
    4ae8:	5f 4f       	sbci	r21, 0xFF	; 255
    4aea:	2c 83       	std	Y+4, r18	; 0x04
    4aec:	3d 83       	std	Y+5, r19	; 0x05
    4aee:	4e 83       	std	Y+6, r20	; 0x06
    4af0:	5f 83       	std	Y+7, r21	; 0x07
    4af2:	0d c0       	rjmp	.+26     	; 0x4b0e <_fpadd_parts+0x200>
    4af4:	88 0f       	add	r24, r24
    4af6:	99 1f       	adc	r25, r25
    4af8:	aa 1f       	adc	r26, r26
    4afa:	bb 1f       	adc	r27, r27
    4afc:	8c 83       	std	Y+4, r24	; 0x04
    4afe:	9d 83       	std	Y+5, r25	; 0x05
    4b00:	ae 83       	std	Y+6, r26	; 0x06
    4b02:	bf 83       	std	Y+7, r27	; 0x07
    4b04:	8a 81       	ldd	r24, Y+2	; 0x02
    4b06:	9b 81       	ldd	r25, Y+3	; 0x03
    4b08:	01 97       	sbiw	r24, 0x01	; 1
    4b0a:	9b 83       	std	Y+3, r25	; 0x03
    4b0c:	8a 83       	std	Y+2, r24	; 0x02
    4b0e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b10:	9d 81       	ldd	r25, Y+5	; 0x05
    4b12:	ae 81       	ldd	r26, Y+6	; 0x06
    4b14:	bf 81       	ldd	r27, Y+7	; 0x07
    4b16:	9c 01       	movw	r18, r24
    4b18:	ad 01       	movw	r20, r26
    4b1a:	21 50       	subi	r18, 0x01	; 1
    4b1c:	30 40       	sbci	r19, 0x00	; 0
    4b1e:	40 40       	sbci	r20, 0x00	; 0
    4b20:	50 40       	sbci	r21, 0x00	; 0
    4b22:	2f 3f       	cpi	r18, 0xFF	; 255
    4b24:	ef ef       	ldi	r30, 0xFF	; 255
    4b26:	3e 07       	cpc	r19, r30
    4b28:	ef ef       	ldi	r30, 0xFF	; 255
    4b2a:	4e 07       	cpc	r20, r30
    4b2c:	ef e3       	ldi	r30, 0x3F	; 63
    4b2e:	5e 07       	cpc	r21, r30
    4b30:	08 f3       	brcs	.-62     	; 0x4af4 <_fpadd_parts+0x1e6>
    4b32:	0b c0       	rjmp	.+22     	; 0x4b4a <_fpadd_parts+0x23c>
    4b34:	89 83       	std	Y+1, r24	; 0x01
    4b36:	db 82       	std	Y+3, r13	; 0x03
    4b38:	ca 82       	std	Y+2, r12	; 0x02
    4b3a:	2e 0d       	add	r18, r14
    4b3c:	3f 1d       	adc	r19, r15
    4b3e:	40 1f       	adc	r20, r16
    4b40:	51 1f       	adc	r21, r17
    4b42:	2c 83       	std	Y+4, r18	; 0x04
    4b44:	3d 83       	std	Y+5, r19	; 0x05
    4b46:	4e 83       	std	Y+6, r20	; 0x06
    4b48:	5f 83       	std	Y+7, r21	; 0x07
    4b4a:	83 e0       	ldi	r24, 0x03	; 3
    4b4c:	88 83       	st	Y, r24
    4b4e:	2c 81       	ldd	r18, Y+4	; 0x04
    4b50:	3d 81       	ldd	r19, Y+5	; 0x05
    4b52:	4e 81       	ldd	r20, Y+6	; 0x06
    4b54:	5f 81       	ldd	r21, Y+7	; 0x07
    4b56:	57 ff       	sbrs	r21, 7
    4b58:	1d c0       	rjmp	.+58     	; 0x4b94 <_fpadd_parts+0x286>
    4b5a:	da 01       	movw	r26, r20
    4b5c:	c9 01       	movw	r24, r18
    4b5e:	81 70       	andi	r24, 0x01	; 1
    4b60:	90 70       	andi	r25, 0x00	; 0
    4b62:	a0 70       	andi	r26, 0x00	; 0
    4b64:	b0 70       	andi	r27, 0x00	; 0
    4b66:	56 95       	lsr	r21
    4b68:	47 95       	ror	r20
    4b6a:	37 95       	ror	r19
    4b6c:	27 95       	ror	r18
    4b6e:	82 2b       	or	r24, r18
    4b70:	93 2b       	or	r25, r19
    4b72:	a4 2b       	or	r26, r20
    4b74:	b5 2b       	or	r27, r21
    4b76:	8c 83       	std	Y+4, r24	; 0x04
    4b78:	9d 83       	std	Y+5, r25	; 0x05
    4b7a:	ae 83       	std	Y+6, r26	; 0x06
    4b7c:	bf 83       	std	Y+7, r27	; 0x07
    4b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b80:	9b 81       	ldd	r25, Y+3	; 0x03
    4b82:	01 96       	adiw	r24, 0x01	; 1
    4b84:	9b 83       	std	Y+3, r25	; 0x03
    4b86:	8a 83       	std	Y+2, r24	; 0x02
    4b88:	05 c0       	rjmp	.+10     	; 0x4b94 <_fpadd_parts+0x286>
    4b8a:	ed ee       	ldi	r30, 0xED	; 237
    4b8c:	f1 e0       	ldi	r31, 0x01	; 1
    4b8e:	03 c0       	rjmp	.+6      	; 0x4b96 <_fpadd_parts+0x288>
    4b90:	fb 01       	movw	r30, r22
    4b92:	01 c0       	rjmp	.+2      	; 0x4b96 <_fpadd_parts+0x288>
    4b94:	fe 01       	movw	r30, r28
    4b96:	cf 01       	movw	r24, r30
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	ee e0       	ldi	r30, 0x0E	; 14
    4b9e:	0c 94 90 2a 	jmp	0x5520	; 0x5520 <__epilogue_restores__+0x8>

00004ba2 <__addsf3>:
    4ba2:	a0 e2       	ldi	r26, 0x20	; 32
    4ba4:	b0 e0       	ldi	r27, 0x00	; 0
    4ba6:	e7 ed       	ldi	r30, 0xD7	; 215
    4ba8:	f5 e2       	ldi	r31, 0x25	; 37
    4baa:	0c 94 7c 2a 	jmp	0x54f8	; 0x54f8 <__prologue_saves__+0x18>
    4bae:	69 83       	std	Y+1, r22	; 0x01
    4bb0:	7a 83       	std	Y+2, r23	; 0x02
    4bb2:	8b 83       	std	Y+3, r24	; 0x03
    4bb4:	9c 83       	std	Y+4, r25	; 0x04
    4bb6:	2d 83       	std	Y+5, r18	; 0x05
    4bb8:	3e 83       	std	Y+6, r19	; 0x06
    4bba:	4f 83       	std	Y+7, r20	; 0x07
    4bbc:	58 87       	std	Y+8, r21	; 0x08
    4bbe:	89 e0       	ldi	r24, 0x09	; 9
    4bc0:	e8 2e       	mov	r14, r24
    4bc2:	f1 2c       	mov	r15, r1
    4bc4:	ec 0e       	add	r14, r28
    4bc6:	fd 1e       	adc	r15, r29
    4bc8:	ce 01       	movw	r24, r28
    4bca:	01 96       	adiw	r24, 0x01	; 1
    4bcc:	b7 01       	movw	r22, r14
    4bce:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4bd2:	8e 01       	movw	r16, r28
    4bd4:	0f 5e       	subi	r16, 0xEF	; 239
    4bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd8:	ce 01       	movw	r24, r28
    4bda:	05 96       	adiw	r24, 0x05	; 5
    4bdc:	b8 01       	movw	r22, r16
    4bde:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4be2:	c7 01       	movw	r24, r14
    4be4:	b8 01       	movw	r22, r16
    4be6:	ae 01       	movw	r20, r28
    4be8:	47 5e       	subi	r20, 0xE7	; 231
    4bea:	5f 4f       	sbci	r21, 0xFF	; 255
    4bec:	0e 94 87 24 	call	0x490e	; 0x490e <_fpadd_parts>
    4bf0:	0e 94 b9 28 	call	0x5172	; 0x5172 <__pack_f>
    4bf4:	a0 96       	adiw	r28, 0x20	; 32
    4bf6:	e6 e0       	ldi	r30, 0x06	; 6
    4bf8:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__epilogue_restores__+0x18>

00004bfc <__subsf3>:
    4bfc:	a0 e2       	ldi	r26, 0x20	; 32
    4bfe:	b0 e0       	ldi	r27, 0x00	; 0
    4c00:	e4 e0       	ldi	r30, 0x04	; 4
    4c02:	f6 e2       	ldi	r31, 0x26	; 38
    4c04:	0c 94 7c 2a 	jmp	0x54f8	; 0x54f8 <__prologue_saves__+0x18>
    4c08:	69 83       	std	Y+1, r22	; 0x01
    4c0a:	7a 83       	std	Y+2, r23	; 0x02
    4c0c:	8b 83       	std	Y+3, r24	; 0x03
    4c0e:	9c 83       	std	Y+4, r25	; 0x04
    4c10:	2d 83       	std	Y+5, r18	; 0x05
    4c12:	3e 83       	std	Y+6, r19	; 0x06
    4c14:	4f 83       	std	Y+7, r20	; 0x07
    4c16:	58 87       	std	Y+8, r21	; 0x08
    4c18:	8e 01       	movw	r16, r28
    4c1a:	07 5f       	subi	r16, 0xF7	; 247
    4c1c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c1e:	ce 01       	movw	r24, r28
    4c20:	01 96       	adiw	r24, 0x01	; 1
    4c22:	b8 01       	movw	r22, r16
    4c24:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4c28:	91 e1       	ldi	r25, 0x11	; 17
    4c2a:	e9 2e       	mov	r14, r25
    4c2c:	f1 2c       	mov	r15, r1
    4c2e:	ec 0e       	add	r14, r28
    4c30:	fd 1e       	adc	r15, r29
    4c32:	ce 01       	movw	r24, r28
    4c34:	05 96       	adiw	r24, 0x05	; 5
    4c36:	b7 01       	movw	r22, r14
    4c38:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4c3c:	8a 89       	ldd	r24, Y+18	; 0x12
    4c3e:	91 e0       	ldi	r25, 0x01	; 1
    4c40:	89 27       	eor	r24, r25
    4c42:	8a 8b       	std	Y+18, r24	; 0x12
    4c44:	c8 01       	movw	r24, r16
    4c46:	b7 01       	movw	r22, r14
    4c48:	ae 01       	movw	r20, r28
    4c4a:	47 5e       	subi	r20, 0xE7	; 231
    4c4c:	5f 4f       	sbci	r21, 0xFF	; 255
    4c4e:	0e 94 87 24 	call	0x490e	; 0x490e <_fpadd_parts>
    4c52:	0e 94 b9 28 	call	0x5172	; 0x5172 <__pack_f>
    4c56:	a0 96       	adiw	r28, 0x20	; 32
    4c58:	e6 e0       	ldi	r30, 0x06	; 6
    4c5a:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__epilogue_restores__+0x18>

00004c5e <__mulsf3>:
    4c5e:	a0 e2       	ldi	r26, 0x20	; 32
    4c60:	b0 e0       	ldi	r27, 0x00	; 0
    4c62:	e5 e3       	ldi	r30, 0x35	; 53
    4c64:	f6 e2       	ldi	r31, 0x26	; 38
    4c66:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__prologue_saves__>
    4c6a:	69 83       	std	Y+1, r22	; 0x01
    4c6c:	7a 83       	std	Y+2, r23	; 0x02
    4c6e:	8b 83       	std	Y+3, r24	; 0x03
    4c70:	9c 83       	std	Y+4, r25	; 0x04
    4c72:	2d 83       	std	Y+5, r18	; 0x05
    4c74:	3e 83       	std	Y+6, r19	; 0x06
    4c76:	4f 83       	std	Y+7, r20	; 0x07
    4c78:	58 87       	std	Y+8, r21	; 0x08
    4c7a:	ce 01       	movw	r24, r28
    4c7c:	01 96       	adiw	r24, 0x01	; 1
    4c7e:	be 01       	movw	r22, r28
    4c80:	67 5f       	subi	r22, 0xF7	; 247
    4c82:	7f 4f       	sbci	r23, 0xFF	; 255
    4c84:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4c88:	ce 01       	movw	r24, r28
    4c8a:	05 96       	adiw	r24, 0x05	; 5
    4c8c:	be 01       	movw	r22, r28
    4c8e:	6f 5e       	subi	r22, 0xEF	; 239
    4c90:	7f 4f       	sbci	r23, 0xFF	; 255
    4c92:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4c96:	99 85       	ldd	r25, Y+9	; 0x09
    4c98:	92 30       	cpi	r25, 0x02	; 2
    4c9a:	78 f0       	brcs	.+30     	; 0x4cba <__mulsf3+0x5c>
    4c9c:	89 89       	ldd	r24, Y+17	; 0x11
    4c9e:	82 30       	cpi	r24, 0x02	; 2
    4ca0:	c0 f0       	brcs	.+48     	; 0x4cd2 <__mulsf3+0x74>
    4ca2:	94 30       	cpi	r25, 0x04	; 4
    4ca4:	19 f4       	brne	.+6      	; 0x4cac <__mulsf3+0x4e>
    4ca6:	82 30       	cpi	r24, 0x02	; 2
    4ca8:	41 f4       	brne	.+16     	; 0x4cba <__mulsf3+0x5c>
    4caa:	cb c0       	rjmp	.+406    	; 0x4e42 <__mulsf3+0x1e4>
    4cac:	84 30       	cpi	r24, 0x04	; 4
    4cae:	19 f4       	brne	.+6      	; 0x4cb6 <__mulsf3+0x58>
    4cb0:	92 30       	cpi	r25, 0x02	; 2
    4cb2:	79 f4       	brne	.+30     	; 0x4cd2 <__mulsf3+0x74>
    4cb4:	c6 c0       	rjmp	.+396    	; 0x4e42 <__mulsf3+0x1e4>
    4cb6:	92 30       	cpi	r25, 0x02	; 2
    4cb8:	51 f4       	brne	.+20     	; 0x4cce <__mulsf3+0x70>
    4cba:	81 e0       	ldi	r24, 0x01	; 1
    4cbc:	2a 85       	ldd	r18, Y+10	; 0x0a
    4cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    4cc0:	29 17       	cp	r18, r25
    4cc2:	09 f4       	brne	.+2      	; 0x4cc6 <__mulsf3+0x68>
    4cc4:	80 e0       	ldi	r24, 0x00	; 0
    4cc6:	8a 87       	std	Y+10, r24	; 0x0a
    4cc8:	ce 01       	movw	r24, r28
    4cca:	09 96       	adiw	r24, 0x09	; 9
    4ccc:	bc c0       	rjmp	.+376    	; 0x4e46 <__mulsf3+0x1e8>
    4cce:	82 30       	cpi	r24, 0x02	; 2
    4cd0:	51 f4       	brne	.+20     	; 0x4ce6 <__mulsf3+0x88>
    4cd2:	81 e0       	ldi	r24, 0x01	; 1
    4cd4:	2a 85       	ldd	r18, Y+10	; 0x0a
    4cd6:	9a 89       	ldd	r25, Y+18	; 0x12
    4cd8:	29 17       	cp	r18, r25
    4cda:	09 f4       	brne	.+2      	; 0x4cde <__mulsf3+0x80>
    4cdc:	80 e0       	ldi	r24, 0x00	; 0
    4cde:	8a 8b       	std	Y+18, r24	; 0x12
    4ce0:	ce 01       	movw	r24, r28
    4ce2:	41 96       	adiw	r24, 0x11	; 17
    4ce4:	b0 c0       	rjmp	.+352    	; 0x4e46 <__mulsf3+0x1e8>
    4ce6:	6d 84       	ldd	r6, Y+13	; 0x0d
    4ce8:	7e 84       	ldd	r7, Y+14	; 0x0e
    4cea:	8f 84       	ldd	r8, Y+15	; 0x0f
    4cec:	98 88       	ldd	r9, Y+16	; 0x10
    4cee:	ed 88       	ldd	r14, Y+21	; 0x15
    4cf0:	fe 88       	ldd	r15, Y+22	; 0x16
    4cf2:	0f 89       	ldd	r16, Y+23	; 0x17
    4cf4:	18 8d       	ldd	r17, Y+24	; 0x18
    4cf6:	e0 e2       	ldi	r30, 0x20	; 32
    4cf8:	f0 e0       	ldi	r31, 0x00	; 0
    4cfa:	80 e0       	ldi	r24, 0x00	; 0
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	dc 01       	movw	r26, r24
    4d00:	aa 24       	eor	r10, r10
    4d02:	bb 24       	eor	r11, r11
    4d04:	65 01       	movw	r12, r10
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	30 e0       	ldi	r19, 0x00	; 0
    4d0a:	a9 01       	movw	r20, r18
    4d0c:	b3 01       	movw	r22, r6
    4d0e:	61 70       	andi	r22, 0x01	; 1
    4d10:	70 70       	andi	r23, 0x00	; 0
    4d12:	61 15       	cp	r22, r1
    4d14:	71 05       	cpc	r23, r1
    4d16:	d1 f0       	breq	.+52     	; 0x4d4c <__mulsf3+0xee>
    4d18:	2e 0d       	add	r18, r14
    4d1a:	3f 1d       	adc	r19, r15
    4d1c:	40 1f       	adc	r20, r16
    4d1e:	51 1f       	adc	r21, r17
    4d20:	15 01       	movw	r2, r10
    4d22:	26 01       	movw	r4, r12
    4d24:	28 0e       	add	r2, r24
    4d26:	39 1e       	adc	r3, r25
    4d28:	4a 1e       	adc	r4, r26
    4d2a:	5b 1e       	adc	r5, r27
    4d2c:	81 e0       	ldi	r24, 0x01	; 1
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	a0 e0       	ldi	r26, 0x00	; 0
    4d32:	b0 e0       	ldi	r27, 0x00	; 0
    4d34:	2e 15       	cp	r18, r14
    4d36:	3f 05       	cpc	r19, r15
    4d38:	40 07       	cpc	r20, r16
    4d3a:	51 07       	cpc	r21, r17
    4d3c:	18 f0       	brcs	.+6      	; 0x4d44 <__mulsf3+0xe6>
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	dc 01       	movw	r26, r24
    4d44:	82 0d       	add	r24, r2
    4d46:	93 1d       	adc	r25, r3
    4d48:	a4 1d       	adc	r26, r4
    4d4a:	b5 1d       	adc	r27, r5
    4d4c:	aa 0c       	add	r10, r10
    4d4e:	bb 1c       	adc	r11, r11
    4d50:	cc 1c       	adc	r12, r12
    4d52:	dd 1c       	adc	r13, r13
    4d54:	17 ff       	sbrs	r17, 7
    4d56:	09 c0       	rjmp	.+18     	; 0x4d6a <__mulsf3+0x10c>
    4d58:	61 e0       	ldi	r22, 0x01	; 1
    4d5a:	26 2e       	mov	r2, r22
    4d5c:	31 2c       	mov	r3, r1
    4d5e:	41 2c       	mov	r4, r1
    4d60:	51 2c       	mov	r5, r1
    4d62:	a2 28       	or	r10, r2
    4d64:	b3 28       	or	r11, r3
    4d66:	c4 28       	or	r12, r4
    4d68:	d5 28       	or	r13, r5
    4d6a:	31 97       	sbiw	r30, 0x01	; 1
    4d6c:	49 f0       	breq	.+18     	; 0x4d80 <__mulsf3+0x122>
    4d6e:	ee 0c       	add	r14, r14
    4d70:	ff 1c       	adc	r15, r15
    4d72:	00 1f       	adc	r16, r16
    4d74:	11 1f       	adc	r17, r17
    4d76:	96 94       	lsr	r9
    4d78:	87 94       	ror	r8
    4d7a:	77 94       	ror	r7
    4d7c:	67 94       	ror	r6
    4d7e:	c6 cf       	rjmp	.-116    	; 0x4d0c <__mulsf3+0xae>
    4d80:	6b 89       	ldd	r22, Y+19	; 0x13
    4d82:	7c 89       	ldd	r23, Y+20	; 0x14
    4d84:	eb 85       	ldd	r30, Y+11	; 0x0b
    4d86:	fc 85       	ldd	r31, Y+12	; 0x0c
    4d88:	6e 0f       	add	r22, r30
    4d8a:	7f 1f       	adc	r23, r31
    4d8c:	6e 5f       	subi	r22, 0xFE	; 254
    4d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    4d90:	7c 8f       	std	Y+28, r23	; 0x1c
    4d92:	6b 8f       	std	Y+27, r22	; 0x1b
    4d94:	61 e0       	ldi	r22, 0x01	; 1
    4d96:	ea 85       	ldd	r30, Y+10	; 0x0a
    4d98:	7a 89       	ldd	r23, Y+18	; 0x12
    4d9a:	e7 17       	cp	r30, r23
    4d9c:	09 f4       	brne	.+2      	; 0x4da0 <__mulsf3+0x142>
    4d9e:	60 e0       	ldi	r22, 0x00	; 0
    4da0:	6a 8f       	std	Y+26, r22	; 0x1a
    4da2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4da4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4da6:	10 c0       	rjmp	.+32     	; 0x4dc8 <__mulsf3+0x16a>
    4da8:	fc 01       	movw	r30, r24
    4daa:	e1 70       	andi	r30, 0x01	; 1
    4dac:	f0 70       	andi	r31, 0x00	; 0
    4dae:	30 97       	sbiw	r30, 0x00	; 0
    4db0:	29 f0       	breq	.+10     	; 0x4dbc <__mulsf3+0x15e>
    4db2:	56 95       	lsr	r21
    4db4:	47 95       	ror	r20
    4db6:	37 95       	ror	r19
    4db8:	27 95       	ror	r18
    4dba:	50 68       	ori	r21, 0x80	; 128
    4dbc:	b6 95       	lsr	r27
    4dbe:	a7 95       	ror	r26
    4dc0:	97 95       	ror	r25
    4dc2:	87 95       	ror	r24
    4dc4:	6f 5f       	subi	r22, 0xFF	; 255
    4dc6:	7f 4f       	sbci	r23, 0xFF	; 255
    4dc8:	b7 fd       	sbrc	r27, 7
    4dca:	ee cf       	rjmp	.-36     	; 0x4da8 <__mulsf3+0x14a>
    4dcc:	0c c0       	rjmp	.+24     	; 0x4de6 <__mulsf3+0x188>
    4dce:	88 0f       	add	r24, r24
    4dd0:	99 1f       	adc	r25, r25
    4dd2:	aa 1f       	adc	r26, r26
    4dd4:	bb 1f       	adc	r27, r27
    4dd6:	57 fd       	sbrc	r21, 7
    4dd8:	81 60       	ori	r24, 0x01	; 1
    4dda:	22 0f       	add	r18, r18
    4ddc:	33 1f       	adc	r19, r19
    4dde:	44 1f       	adc	r20, r20
    4de0:	55 1f       	adc	r21, r21
    4de2:	61 50       	subi	r22, 0x01	; 1
    4de4:	70 40       	sbci	r23, 0x00	; 0
    4de6:	80 30       	cpi	r24, 0x00	; 0
    4de8:	e0 e0       	ldi	r30, 0x00	; 0
    4dea:	9e 07       	cpc	r25, r30
    4dec:	e0 e0       	ldi	r30, 0x00	; 0
    4dee:	ae 07       	cpc	r26, r30
    4df0:	e0 e4       	ldi	r30, 0x40	; 64
    4df2:	be 07       	cpc	r27, r30
    4df4:	60 f3       	brcs	.-40     	; 0x4dce <__mulsf3+0x170>
    4df6:	6b 8f       	std	Y+27, r22	; 0x1b
    4df8:	7c 8f       	std	Y+28, r23	; 0x1c
    4dfa:	6f e7       	ldi	r22, 0x7F	; 127
    4dfc:	e6 2e       	mov	r14, r22
    4dfe:	f1 2c       	mov	r15, r1
    4e00:	01 2d       	mov	r16, r1
    4e02:	11 2d       	mov	r17, r1
    4e04:	e8 22       	and	r14, r24
    4e06:	f9 22       	and	r15, r25
    4e08:	0a 23       	and	r16, r26
    4e0a:	1b 23       	and	r17, r27
    4e0c:	60 e4       	ldi	r22, 0x40	; 64
    4e0e:	e6 16       	cp	r14, r22
    4e10:	f1 04       	cpc	r15, r1
    4e12:	01 05       	cpc	r16, r1
    4e14:	11 05       	cpc	r17, r1
    4e16:	61 f4       	brne	.+24     	; 0x4e30 <__mulsf3+0x1d2>
    4e18:	87 fd       	sbrc	r24, 7
    4e1a:	0a c0       	rjmp	.+20     	; 0x4e30 <__mulsf3+0x1d2>
    4e1c:	21 15       	cp	r18, r1
    4e1e:	31 05       	cpc	r19, r1
    4e20:	41 05       	cpc	r20, r1
    4e22:	51 05       	cpc	r21, r1
    4e24:	29 f0       	breq	.+10     	; 0x4e30 <__mulsf3+0x1d2>
    4e26:	80 5c       	subi	r24, 0xC0	; 192
    4e28:	9f 4f       	sbci	r25, 0xFF	; 255
    4e2a:	af 4f       	sbci	r26, 0xFF	; 255
    4e2c:	bf 4f       	sbci	r27, 0xFF	; 255
    4e2e:	80 78       	andi	r24, 0x80	; 128
    4e30:	8d 8f       	std	Y+29, r24	; 0x1d
    4e32:	9e 8f       	std	Y+30, r25	; 0x1e
    4e34:	af 8f       	std	Y+31, r26	; 0x1f
    4e36:	b8 a3       	std	Y+32, r27	; 0x20
    4e38:	83 e0       	ldi	r24, 0x03	; 3
    4e3a:	89 8f       	std	Y+25, r24	; 0x19
    4e3c:	ce 01       	movw	r24, r28
    4e3e:	49 96       	adiw	r24, 0x19	; 25
    4e40:	02 c0       	rjmp	.+4      	; 0x4e46 <__mulsf3+0x1e8>
    4e42:	8d ee       	ldi	r24, 0xED	; 237
    4e44:	91 e0       	ldi	r25, 0x01	; 1
    4e46:	0e 94 b9 28 	call	0x5172	; 0x5172 <__pack_f>
    4e4a:	a0 96       	adiw	r28, 0x20	; 32
    4e4c:	e2 e1       	ldi	r30, 0x12	; 18
    4e4e:	0c 94 8c 2a 	jmp	0x5518	; 0x5518 <__epilogue_restores__>

00004e52 <__divsf3>:
    4e52:	a8 e1       	ldi	r26, 0x18	; 24
    4e54:	b0 e0       	ldi	r27, 0x00	; 0
    4e56:	ef e2       	ldi	r30, 0x2F	; 47
    4e58:	f7 e2       	ldi	r31, 0x27	; 39
    4e5a:	0c 94 78 2a 	jmp	0x54f0	; 0x54f0 <__prologue_saves__+0x10>
    4e5e:	69 83       	std	Y+1, r22	; 0x01
    4e60:	7a 83       	std	Y+2, r23	; 0x02
    4e62:	8b 83       	std	Y+3, r24	; 0x03
    4e64:	9c 83       	std	Y+4, r25	; 0x04
    4e66:	2d 83       	std	Y+5, r18	; 0x05
    4e68:	3e 83       	std	Y+6, r19	; 0x06
    4e6a:	4f 83       	std	Y+7, r20	; 0x07
    4e6c:	58 87       	std	Y+8, r21	; 0x08
    4e6e:	8e 01       	movw	r16, r28
    4e70:	07 5f       	subi	r16, 0xF7	; 247
    4e72:	1f 4f       	sbci	r17, 0xFF	; 255
    4e74:	ce 01       	movw	r24, r28
    4e76:	01 96       	adiw	r24, 0x01	; 1
    4e78:	b8 01       	movw	r22, r16
    4e7a:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4e7e:	81 e1       	ldi	r24, 0x11	; 17
    4e80:	e8 2e       	mov	r14, r24
    4e82:	f1 2c       	mov	r15, r1
    4e84:	ec 0e       	add	r14, r28
    4e86:	fd 1e       	adc	r15, r29
    4e88:	ce 01       	movw	r24, r28
    4e8a:	05 96       	adiw	r24, 0x05	; 5
    4e8c:	b7 01       	movw	r22, r14
    4e8e:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4e92:	99 85       	ldd	r25, Y+9	; 0x09
    4e94:	92 30       	cpi	r25, 0x02	; 2
    4e96:	08 f4       	brcc	.+2      	; 0x4e9a <__divsf3+0x48>
    4e98:	83 c0       	rjmp	.+262    	; 0x4fa0 <__divsf3+0x14e>
    4e9a:	89 89       	ldd	r24, Y+17	; 0x11
    4e9c:	82 30       	cpi	r24, 0x02	; 2
    4e9e:	08 f4       	brcc	.+2      	; 0x4ea2 <__divsf3+0x50>
    4ea0:	7b c0       	rjmp	.+246    	; 0x4f98 <__divsf3+0x146>
    4ea2:	2a 85       	ldd	r18, Y+10	; 0x0a
    4ea4:	3a 89       	ldd	r19, Y+18	; 0x12
    4ea6:	23 27       	eor	r18, r19
    4ea8:	2a 87       	std	Y+10, r18	; 0x0a
    4eaa:	94 30       	cpi	r25, 0x04	; 4
    4eac:	11 f0       	breq	.+4      	; 0x4eb2 <__divsf3+0x60>
    4eae:	92 30       	cpi	r25, 0x02	; 2
    4eb0:	21 f4       	brne	.+8      	; 0x4eba <__divsf3+0x68>
    4eb2:	98 17       	cp	r25, r24
    4eb4:	09 f0       	breq	.+2      	; 0x4eb8 <__divsf3+0x66>
    4eb6:	6c c0       	rjmp	.+216    	; 0x4f90 <__divsf3+0x13e>
    4eb8:	71 c0       	rjmp	.+226    	; 0x4f9c <__divsf3+0x14a>
    4eba:	84 30       	cpi	r24, 0x04	; 4
    4ebc:	39 f4       	brne	.+14     	; 0x4ecc <__divsf3+0x7a>
    4ebe:	1d 86       	std	Y+13, r1	; 0x0d
    4ec0:	1e 86       	std	Y+14, r1	; 0x0e
    4ec2:	1f 86       	std	Y+15, r1	; 0x0f
    4ec4:	18 8a       	std	Y+16, r1	; 0x10
    4ec6:	1c 86       	std	Y+12, r1	; 0x0c
    4ec8:	1b 86       	std	Y+11, r1	; 0x0b
    4eca:	6a c0       	rjmp	.+212    	; 0x4fa0 <__divsf3+0x14e>
    4ecc:	82 30       	cpi	r24, 0x02	; 2
    4ece:	19 f4       	brne	.+6      	; 0x4ed6 <__divsf3+0x84>
    4ed0:	84 e0       	ldi	r24, 0x04	; 4
    4ed2:	89 87       	std	Y+9, r24	; 0x09
    4ed4:	65 c0       	rjmp	.+202    	; 0x4fa0 <__divsf3+0x14e>
    4ed6:	8b 85       	ldd	r24, Y+11	; 0x0b
    4ed8:	9c 85       	ldd	r25, Y+12	; 0x0c
    4eda:	2b 89       	ldd	r18, Y+19	; 0x13
    4edc:	3c 89       	ldd	r19, Y+20	; 0x14
    4ede:	82 1b       	sub	r24, r18
    4ee0:	93 0b       	sbc	r25, r19
    4ee2:	9c 87       	std	Y+12, r25	; 0x0c
    4ee4:	8b 87       	std	Y+11, r24	; 0x0b
    4ee6:	2d 85       	ldd	r18, Y+13	; 0x0d
    4ee8:	3e 85       	ldd	r19, Y+14	; 0x0e
    4eea:	4f 85       	ldd	r20, Y+15	; 0x0f
    4eec:	58 89       	ldd	r21, Y+16	; 0x10
    4eee:	ed 88       	ldd	r14, Y+21	; 0x15
    4ef0:	fe 88       	ldd	r15, Y+22	; 0x16
    4ef2:	0f 89       	ldd	r16, Y+23	; 0x17
    4ef4:	18 8d       	ldd	r17, Y+24	; 0x18
    4ef6:	2e 15       	cp	r18, r14
    4ef8:	3f 05       	cpc	r19, r15
    4efa:	40 07       	cpc	r20, r16
    4efc:	51 07       	cpc	r21, r17
    4efe:	38 f4       	brcc	.+14     	; 0x4f0e <__divsf3+0xbc>
    4f00:	22 0f       	add	r18, r18
    4f02:	33 1f       	adc	r19, r19
    4f04:	44 1f       	adc	r20, r20
    4f06:	55 1f       	adc	r21, r21
    4f08:	01 97       	sbiw	r24, 0x01	; 1
    4f0a:	9c 87       	std	Y+12, r25	; 0x0c
    4f0c:	8b 87       	std	Y+11, r24	; 0x0b
    4f0e:	6f e1       	ldi	r22, 0x1F	; 31
    4f10:	70 e0       	ldi	r23, 0x00	; 0
    4f12:	a1 2c       	mov	r10, r1
    4f14:	b1 2c       	mov	r11, r1
    4f16:	c1 2c       	mov	r12, r1
    4f18:	a0 e4       	ldi	r26, 0x40	; 64
    4f1a:	da 2e       	mov	r13, r26
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	dc 01       	movw	r26, r24
    4f22:	2e 15       	cp	r18, r14
    4f24:	3f 05       	cpc	r19, r15
    4f26:	40 07       	cpc	r20, r16
    4f28:	51 07       	cpc	r21, r17
    4f2a:	40 f0       	brcs	.+16     	; 0x4f3c <__divsf3+0xea>
    4f2c:	8a 29       	or	r24, r10
    4f2e:	9b 29       	or	r25, r11
    4f30:	ac 29       	or	r26, r12
    4f32:	bd 29       	or	r27, r13
    4f34:	2e 19       	sub	r18, r14
    4f36:	3f 09       	sbc	r19, r15
    4f38:	40 0b       	sbc	r20, r16
    4f3a:	51 0b       	sbc	r21, r17
    4f3c:	d6 94       	lsr	r13
    4f3e:	c7 94       	ror	r12
    4f40:	b7 94       	ror	r11
    4f42:	a7 94       	ror	r10
    4f44:	22 0f       	add	r18, r18
    4f46:	33 1f       	adc	r19, r19
    4f48:	44 1f       	adc	r20, r20
    4f4a:	55 1f       	adc	r21, r21
    4f4c:	61 50       	subi	r22, 0x01	; 1
    4f4e:	70 40       	sbci	r23, 0x00	; 0
    4f50:	41 f7       	brne	.-48     	; 0x4f22 <__divsf3+0xd0>
    4f52:	6f e7       	ldi	r22, 0x7F	; 127
    4f54:	e6 2e       	mov	r14, r22
    4f56:	f1 2c       	mov	r15, r1
    4f58:	01 2d       	mov	r16, r1
    4f5a:	11 2d       	mov	r17, r1
    4f5c:	e8 22       	and	r14, r24
    4f5e:	f9 22       	and	r15, r25
    4f60:	0a 23       	and	r16, r26
    4f62:	1b 23       	and	r17, r27
    4f64:	60 e4       	ldi	r22, 0x40	; 64
    4f66:	e6 16       	cp	r14, r22
    4f68:	f1 04       	cpc	r15, r1
    4f6a:	01 05       	cpc	r16, r1
    4f6c:	11 05       	cpc	r17, r1
    4f6e:	61 f4       	brne	.+24     	; 0x4f88 <__divsf3+0x136>
    4f70:	87 fd       	sbrc	r24, 7
    4f72:	0a c0       	rjmp	.+20     	; 0x4f88 <__divsf3+0x136>
    4f74:	21 15       	cp	r18, r1
    4f76:	31 05       	cpc	r19, r1
    4f78:	41 05       	cpc	r20, r1
    4f7a:	51 05       	cpc	r21, r1
    4f7c:	29 f0       	breq	.+10     	; 0x4f88 <__divsf3+0x136>
    4f7e:	80 5c       	subi	r24, 0xC0	; 192
    4f80:	9f 4f       	sbci	r25, 0xFF	; 255
    4f82:	af 4f       	sbci	r26, 0xFF	; 255
    4f84:	bf 4f       	sbci	r27, 0xFF	; 255
    4f86:	80 78       	andi	r24, 0x80	; 128
    4f88:	8d 87       	std	Y+13, r24	; 0x0d
    4f8a:	9e 87       	std	Y+14, r25	; 0x0e
    4f8c:	af 87       	std	Y+15, r26	; 0x0f
    4f8e:	b8 8b       	std	Y+16, r27	; 0x10
    4f90:	8e 01       	movw	r16, r28
    4f92:	07 5f       	subi	r16, 0xF7	; 247
    4f94:	1f 4f       	sbci	r17, 0xFF	; 255
    4f96:	04 c0       	rjmp	.+8      	; 0x4fa0 <__divsf3+0x14e>
    4f98:	87 01       	movw	r16, r14
    4f9a:	02 c0       	rjmp	.+4      	; 0x4fa0 <__divsf3+0x14e>
    4f9c:	0d ee       	ldi	r16, 0xED	; 237
    4f9e:	11 e0       	ldi	r17, 0x01	; 1
    4fa0:	c8 01       	movw	r24, r16
    4fa2:	0e 94 b9 28 	call	0x5172	; 0x5172 <__pack_f>
    4fa6:	68 96       	adiw	r28, 0x18	; 24
    4fa8:	ea e0       	ldi	r30, 0x0A	; 10
    4faa:	0c 94 94 2a 	jmp	0x5528	; 0x5528 <__epilogue_restores__+0x10>

00004fae <__gtsf2>:
    4fae:	a8 e1       	ldi	r26, 0x18	; 24
    4fb0:	b0 e0       	ldi	r27, 0x00	; 0
    4fb2:	ed ed       	ldi	r30, 0xDD	; 221
    4fb4:	f7 e2       	ldi	r31, 0x27	; 39
    4fb6:	0c 94 7c 2a 	jmp	0x54f8	; 0x54f8 <__prologue_saves__+0x18>
    4fba:	69 83       	std	Y+1, r22	; 0x01
    4fbc:	7a 83       	std	Y+2, r23	; 0x02
    4fbe:	8b 83       	std	Y+3, r24	; 0x03
    4fc0:	9c 83       	std	Y+4, r25	; 0x04
    4fc2:	2d 83       	std	Y+5, r18	; 0x05
    4fc4:	3e 83       	std	Y+6, r19	; 0x06
    4fc6:	4f 83       	std	Y+7, r20	; 0x07
    4fc8:	58 87       	std	Y+8, r21	; 0x08
    4fca:	8e 01       	movw	r16, r28
    4fcc:	07 5f       	subi	r16, 0xF7	; 247
    4fce:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd0:	ce 01       	movw	r24, r28
    4fd2:	01 96       	adiw	r24, 0x01	; 1
    4fd4:	b8 01       	movw	r22, r16
    4fd6:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4fda:	81 e1       	ldi	r24, 0x11	; 17
    4fdc:	e8 2e       	mov	r14, r24
    4fde:	f1 2c       	mov	r15, r1
    4fe0:	ec 0e       	add	r14, r28
    4fe2:	fd 1e       	adc	r15, r29
    4fe4:	ce 01       	movw	r24, r28
    4fe6:	05 96       	adiw	r24, 0x05	; 5
    4fe8:	b7 01       	movw	r22, r14
    4fea:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    4fee:	89 85       	ldd	r24, Y+9	; 0x09
    4ff0:	82 30       	cpi	r24, 0x02	; 2
    4ff2:	40 f0       	brcs	.+16     	; 0x5004 <__gtsf2+0x56>
    4ff4:	89 89       	ldd	r24, Y+17	; 0x11
    4ff6:	82 30       	cpi	r24, 0x02	; 2
    4ff8:	28 f0       	brcs	.+10     	; 0x5004 <__gtsf2+0x56>
    4ffa:	c8 01       	movw	r24, r16
    4ffc:	b7 01       	movw	r22, r14
    4ffe:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__fpcmp_parts_f>
    5002:	01 c0       	rjmp	.+2      	; 0x5006 <__gtsf2+0x58>
    5004:	8f ef       	ldi	r24, 0xFF	; 255
    5006:	68 96       	adiw	r28, 0x18	; 24
    5008:	e6 e0       	ldi	r30, 0x06	; 6
    500a:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__epilogue_restores__+0x18>

0000500e <__gesf2>:
    500e:	a8 e1       	ldi	r26, 0x18	; 24
    5010:	b0 e0       	ldi	r27, 0x00	; 0
    5012:	ed e0       	ldi	r30, 0x0D	; 13
    5014:	f8 e2       	ldi	r31, 0x28	; 40
    5016:	0c 94 7c 2a 	jmp	0x54f8	; 0x54f8 <__prologue_saves__+0x18>
    501a:	69 83       	std	Y+1, r22	; 0x01
    501c:	7a 83       	std	Y+2, r23	; 0x02
    501e:	8b 83       	std	Y+3, r24	; 0x03
    5020:	9c 83       	std	Y+4, r25	; 0x04
    5022:	2d 83       	std	Y+5, r18	; 0x05
    5024:	3e 83       	std	Y+6, r19	; 0x06
    5026:	4f 83       	std	Y+7, r20	; 0x07
    5028:	58 87       	std	Y+8, r21	; 0x08
    502a:	8e 01       	movw	r16, r28
    502c:	07 5f       	subi	r16, 0xF7	; 247
    502e:	1f 4f       	sbci	r17, 0xFF	; 255
    5030:	ce 01       	movw	r24, r28
    5032:	01 96       	adiw	r24, 0x01	; 1
    5034:	b8 01       	movw	r22, r16
    5036:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    503a:	81 e1       	ldi	r24, 0x11	; 17
    503c:	e8 2e       	mov	r14, r24
    503e:	f1 2c       	mov	r15, r1
    5040:	ec 0e       	add	r14, r28
    5042:	fd 1e       	adc	r15, r29
    5044:	ce 01       	movw	r24, r28
    5046:	05 96       	adiw	r24, 0x05	; 5
    5048:	b7 01       	movw	r22, r14
    504a:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    504e:	89 85       	ldd	r24, Y+9	; 0x09
    5050:	82 30       	cpi	r24, 0x02	; 2
    5052:	40 f0       	brcs	.+16     	; 0x5064 <__gesf2+0x56>
    5054:	89 89       	ldd	r24, Y+17	; 0x11
    5056:	82 30       	cpi	r24, 0x02	; 2
    5058:	28 f0       	brcs	.+10     	; 0x5064 <__gesf2+0x56>
    505a:	c8 01       	movw	r24, r16
    505c:	b7 01       	movw	r22, r14
    505e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__fpcmp_parts_f>
    5062:	01 c0       	rjmp	.+2      	; 0x5066 <__gesf2+0x58>
    5064:	8f ef       	ldi	r24, 0xFF	; 255
    5066:	68 96       	adiw	r28, 0x18	; 24
    5068:	e6 e0       	ldi	r30, 0x06	; 6
    506a:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__epilogue_restores__+0x18>

0000506e <__ltsf2>:
    506e:	a8 e1       	ldi	r26, 0x18	; 24
    5070:	b0 e0       	ldi	r27, 0x00	; 0
    5072:	ed e3       	ldi	r30, 0x3D	; 61
    5074:	f8 e2       	ldi	r31, 0x28	; 40
    5076:	0c 94 7c 2a 	jmp	0x54f8	; 0x54f8 <__prologue_saves__+0x18>
    507a:	69 83       	std	Y+1, r22	; 0x01
    507c:	7a 83       	std	Y+2, r23	; 0x02
    507e:	8b 83       	std	Y+3, r24	; 0x03
    5080:	9c 83       	std	Y+4, r25	; 0x04
    5082:	2d 83       	std	Y+5, r18	; 0x05
    5084:	3e 83       	std	Y+6, r19	; 0x06
    5086:	4f 83       	std	Y+7, r20	; 0x07
    5088:	58 87       	std	Y+8, r21	; 0x08
    508a:	8e 01       	movw	r16, r28
    508c:	07 5f       	subi	r16, 0xF7	; 247
    508e:	1f 4f       	sbci	r17, 0xFF	; 255
    5090:	ce 01       	movw	r24, r28
    5092:	01 96       	adiw	r24, 0x01	; 1
    5094:	b8 01       	movw	r22, r16
    5096:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    509a:	81 e1       	ldi	r24, 0x11	; 17
    509c:	e8 2e       	mov	r14, r24
    509e:	f1 2c       	mov	r15, r1
    50a0:	ec 0e       	add	r14, r28
    50a2:	fd 1e       	adc	r15, r29
    50a4:	ce 01       	movw	r24, r28
    50a6:	05 96       	adiw	r24, 0x05	; 5
    50a8:	b7 01       	movw	r22, r14
    50aa:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    50ae:	89 85       	ldd	r24, Y+9	; 0x09
    50b0:	82 30       	cpi	r24, 0x02	; 2
    50b2:	40 f0       	brcs	.+16     	; 0x50c4 <__ltsf2+0x56>
    50b4:	89 89       	ldd	r24, Y+17	; 0x11
    50b6:	82 30       	cpi	r24, 0x02	; 2
    50b8:	28 f0       	brcs	.+10     	; 0x50c4 <__ltsf2+0x56>
    50ba:	c8 01       	movw	r24, r16
    50bc:	b7 01       	movw	r22, r14
    50be:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__fpcmp_parts_f>
    50c2:	01 c0       	rjmp	.+2      	; 0x50c6 <__ltsf2+0x58>
    50c4:	81 e0       	ldi	r24, 0x01	; 1
    50c6:	68 96       	adiw	r28, 0x18	; 24
    50c8:	e6 e0       	ldi	r30, 0x06	; 6
    50ca:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__epilogue_restores__+0x18>

000050ce <__fixsfsi>:
    50ce:	ac e0       	ldi	r26, 0x0C	; 12
    50d0:	b0 e0       	ldi	r27, 0x00	; 0
    50d2:	ed e6       	ldi	r30, 0x6D	; 109
    50d4:	f8 e2       	ldi	r31, 0x28	; 40
    50d6:	0c 94 80 2a 	jmp	0x5500	; 0x5500 <__prologue_saves__+0x20>
    50da:	69 83       	std	Y+1, r22	; 0x01
    50dc:	7a 83       	std	Y+2, r23	; 0x02
    50de:	8b 83       	std	Y+3, r24	; 0x03
    50e0:	9c 83       	std	Y+4, r25	; 0x04
    50e2:	ce 01       	movw	r24, r28
    50e4:	01 96       	adiw	r24, 0x01	; 1
    50e6:	be 01       	movw	r22, r28
    50e8:	6b 5f       	subi	r22, 0xFB	; 251
    50ea:	7f 4f       	sbci	r23, 0xFF	; 255
    50ec:	0e 94 87 29 	call	0x530e	; 0x530e <__unpack_f>
    50f0:	8d 81       	ldd	r24, Y+5	; 0x05
    50f2:	82 30       	cpi	r24, 0x02	; 2
    50f4:	81 f1       	breq	.+96     	; 0x5156 <__fixsfsi+0x88>
    50f6:	82 30       	cpi	r24, 0x02	; 2
    50f8:	70 f1       	brcs	.+92     	; 0x5156 <__fixsfsi+0x88>
    50fa:	84 30       	cpi	r24, 0x04	; 4
    50fc:	21 f4       	brne	.+8      	; 0x5106 <__fixsfsi+0x38>
    50fe:	8e 81       	ldd	r24, Y+6	; 0x06
    5100:	88 23       	and	r24, r24
    5102:	69 f1       	breq	.+90     	; 0x515e <__fixsfsi+0x90>
    5104:	0a c0       	rjmp	.+20     	; 0x511a <__fixsfsi+0x4c>
    5106:	2f 81       	ldd	r18, Y+7	; 0x07
    5108:	38 85       	ldd	r19, Y+8	; 0x08
    510a:	37 fd       	sbrc	r19, 7
    510c:	24 c0       	rjmp	.+72     	; 0x5156 <__fixsfsi+0x88>
    510e:	6e 81       	ldd	r22, Y+6	; 0x06
    5110:	2f 31       	cpi	r18, 0x1F	; 31
    5112:	31 05       	cpc	r19, r1
    5114:	3c f0       	brlt	.+14     	; 0x5124 <__fixsfsi+0x56>
    5116:	66 23       	and	r22, r22
    5118:	11 f1       	breq	.+68     	; 0x515e <__fixsfsi+0x90>
    511a:	20 e0       	ldi	r18, 0x00	; 0
    511c:	30 e0       	ldi	r19, 0x00	; 0
    511e:	40 e0       	ldi	r20, 0x00	; 0
    5120:	50 e8       	ldi	r21, 0x80	; 128
    5122:	21 c0       	rjmp	.+66     	; 0x5166 <__fixsfsi+0x98>
    5124:	8e e1       	ldi	r24, 0x1E	; 30
    5126:	90 e0       	ldi	r25, 0x00	; 0
    5128:	82 1b       	sub	r24, r18
    512a:	93 0b       	sbc	r25, r19
    512c:	29 85       	ldd	r18, Y+9	; 0x09
    512e:	3a 85       	ldd	r19, Y+10	; 0x0a
    5130:	4b 85       	ldd	r20, Y+11	; 0x0b
    5132:	5c 85       	ldd	r21, Y+12	; 0x0c
    5134:	04 c0       	rjmp	.+8      	; 0x513e <__fixsfsi+0x70>
    5136:	56 95       	lsr	r21
    5138:	47 95       	ror	r20
    513a:	37 95       	ror	r19
    513c:	27 95       	ror	r18
    513e:	8a 95       	dec	r24
    5140:	d2 f7       	brpl	.-12     	; 0x5136 <__fixsfsi+0x68>
    5142:	66 23       	and	r22, r22
    5144:	81 f0       	breq	.+32     	; 0x5166 <__fixsfsi+0x98>
    5146:	50 95       	com	r21
    5148:	40 95       	com	r20
    514a:	30 95       	com	r19
    514c:	21 95       	neg	r18
    514e:	3f 4f       	sbci	r19, 0xFF	; 255
    5150:	4f 4f       	sbci	r20, 0xFF	; 255
    5152:	5f 4f       	sbci	r21, 0xFF	; 255
    5154:	08 c0       	rjmp	.+16     	; 0x5166 <__fixsfsi+0x98>
    5156:	20 e0       	ldi	r18, 0x00	; 0
    5158:	30 e0       	ldi	r19, 0x00	; 0
    515a:	a9 01       	movw	r20, r18
    515c:	04 c0       	rjmp	.+8      	; 0x5166 <__fixsfsi+0x98>
    515e:	2f ef       	ldi	r18, 0xFF	; 255
    5160:	3f ef       	ldi	r19, 0xFF	; 255
    5162:	4f ef       	ldi	r20, 0xFF	; 255
    5164:	5f e7       	ldi	r21, 0x7F	; 127
    5166:	b9 01       	movw	r22, r18
    5168:	ca 01       	movw	r24, r20
    516a:	2c 96       	adiw	r28, 0x0c	; 12
    516c:	e2 e0       	ldi	r30, 0x02	; 2
    516e:	0c 94 9c 2a 	jmp	0x5538	; 0x5538 <__epilogue_restores__+0x20>

00005172 <__pack_f>:
    5172:	ef 92       	push	r14
    5174:	ff 92       	push	r15
    5176:	0f 93       	push	r16
    5178:	1f 93       	push	r17
    517a:	cf 93       	push	r28
    517c:	df 93       	push	r29
    517e:	fc 01       	movw	r30, r24
    5180:	24 81       	ldd	r18, Z+4	; 0x04
    5182:	35 81       	ldd	r19, Z+5	; 0x05
    5184:	46 81       	ldd	r20, Z+6	; 0x06
    5186:	57 81       	ldd	r21, Z+7	; 0x07
    5188:	61 81       	ldd	r22, Z+1	; 0x01
    518a:	80 81       	ld	r24, Z
    518c:	82 30       	cpi	r24, 0x02	; 2
    518e:	20 f4       	brcc	.+8      	; 0x5198 <__pack_f+0x26>
    5190:	40 61       	ori	r20, 0x10	; 16
    5192:	ef ef       	ldi	r30, 0xFF	; 255
    5194:	f0 e0       	ldi	r31, 0x00	; 0
    5196:	a3 c0       	rjmp	.+326    	; 0x52de <__pack_f+0x16c>
    5198:	84 30       	cpi	r24, 0x04	; 4
    519a:	09 f4       	brne	.+2      	; 0x519e <__pack_f+0x2c>
    519c:	9b c0       	rjmp	.+310    	; 0x52d4 <__pack_f+0x162>
    519e:	82 30       	cpi	r24, 0x02	; 2
    51a0:	09 f4       	brne	.+2      	; 0x51a4 <__pack_f+0x32>
    51a2:	92 c0       	rjmp	.+292    	; 0x52c8 <__pack_f+0x156>
    51a4:	21 15       	cp	r18, r1
    51a6:	31 05       	cpc	r19, r1
    51a8:	41 05       	cpc	r20, r1
    51aa:	51 05       	cpc	r21, r1
    51ac:	09 f4       	brne	.+2      	; 0x51b0 <__pack_f+0x3e>
    51ae:	8f c0       	rjmp	.+286    	; 0x52ce <__pack_f+0x15c>
    51b0:	02 80       	ldd	r0, Z+2	; 0x02
    51b2:	f3 81       	ldd	r31, Z+3	; 0x03
    51b4:	e0 2d       	mov	r30, r0
    51b6:	8f ef       	ldi	r24, 0xFF	; 255
    51b8:	e2 38       	cpi	r30, 0x82	; 130
    51ba:	f8 07       	cpc	r31, r24
    51bc:	0c f0       	brlt	.+2      	; 0x51c0 <__pack_f+0x4e>
    51be:	5a c0       	rjmp	.+180    	; 0x5274 <__pack_f+0x102>
    51c0:	c2 e8       	ldi	r28, 0x82	; 130
    51c2:	df ef       	ldi	r29, 0xFF	; 255
    51c4:	ce 1b       	sub	r28, r30
    51c6:	df 0b       	sbc	r29, r31
    51c8:	ca 31       	cpi	r28, 0x1A	; 26
    51ca:	d1 05       	cpc	r29, r1
    51cc:	6c f5       	brge	.+90     	; 0x5228 <__pack_f+0xb6>
    51ce:	79 01       	movw	r14, r18
    51d0:	8a 01       	movw	r16, r20
    51d2:	0c 2e       	mov	r0, r28
    51d4:	04 c0       	rjmp	.+8      	; 0x51de <__pack_f+0x6c>
    51d6:	16 95       	lsr	r17
    51d8:	07 95       	ror	r16
    51da:	f7 94       	ror	r15
    51dc:	e7 94       	ror	r14
    51de:	0a 94       	dec	r0
    51e0:	d2 f7       	brpl	.-12     	; 0x51d6 <__pack_f+0x64>
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	a0 e0       	ldi	r26, 0x00	; 0
    51e8:	b0 e0       	ldi	r27, 0x00	; 0
    51ea:	0c 2e       	mov	r0, r28
    51ec:	04 c0       	rjmp	.+8      	; 0x51f6 <__pack_f+0x84>
    51ee:	88 0f       	add	r24, r24
    51f0:	99 1f       	adc	r25, r25
    51f2:	aa 1f       	adc	r26, r26
    51f4:	bb 1f       	adc	r27, r27
    51f6:	0a 94       	dec	r0
    51f8:	d2 f7       	brpl	.-12     	; 0x51ee <__pack_f+0x7c>
    51fa:	01 97       	sbiw	r24, 0x01	; 1
    51fc:	a1 09       	sbc	r26, r1
    51fe:	b1 09       	sbc	r27, r1
    5200:	82 23       	and	r24, r18
    5202:	93 23       	and	r25, r19
    5204:	a4 23       	and	r26, r20
    5206:	b5 23       	and	r27, r21
    5208:	21 e0       	ldi	r18, 0x01	; 1
    520a:	30 e0       	ldi	r19, 0x00	; 0
    520c:	40 e0       	ldi	r20, 0x00	; 0
    520e:	50 e0       	ldi	r21, 0x00	; 0
    5210:	00 97       	sbiw	r24, 0x00	; 0
    5212:	a1 05       	cpc	r26, r1
    5214:	b1 05       	cpc	r27, r1
    5216:	19 f4       	brne	.+6      	; 0x521e <__pack_f+0xac>
    5218:	20 e0       	ldi	r18, 0x00	; 0
    521a:	30 e0       	ldi	r19, 0x00	; 0
    521c:	a9 01       	movw	r20, r18
    521e:	2e 29       	or	r18, r14
    5220:	3f 29       	or	r19, r15
    5222:	40 2b       	or	r20, r16
    5224:	51 2b       	or	r21, r17
    5226:	03 c0       	rjmp	.+6      	; 0x522e <__pack_f+0xbc>
    5228:	20 e0       	ldi	r18, 0x00	; 0
    522a:	30 e0       	ldi	r19, 0x00	; 0
    522c:	a9 01       	movw	r20, r18
    522e:	da 01       	movw	r26, r20
    5230:	c9 01       	movw	r24, r18
    5232:	8f 77       	andi	r24, 0x7F	; 127
    5234:	90 70       	andi	r25, 0x00	; 0
    5236:	a0 70       	andi	r26, 0x00	; 0
    5238:	b0 70       	andi	r27, 0x00	; 0
    523a:	80 34       	cpi	r24, 0x40	; 64
    523c:	91 05       	cpc	r25, r1
    523e:	a1 05       	cpc	r26, r1
    5240:	b1 05       	cpc	r27, r1
    5242:	39 f4       	brne	.+14     	; 0x5252 <__pack_f+0xe0>
    5244:	27 ff       	sbrs	r18, 7
    5246:	09 c0       	rjmp	.+18     	; 0x525a <__pack_f+0xe8>
    5248:	20 5c       	subi	r18, 0xC0	; 192
    524a:	3f 4f       	sbci	r19, 0xFF	; 255
    524c:	4f 4f       	sbci	r20, 0xFF	; 255
    524e:	5f 4f       	sbci	r21, 0xFF	; 255
    5250:	04 c0       	rjmp	.+8      	; 0x525a <__pack_f+0xe8>
    5252:	21 5c       	subi	r18, 0xC1	; 193
    5254:	3f 4f       	sbci	r19, 0xFF	; 255
    5256:	4f 4f       	sbci	r20, 0xFF	; 255
    5258:	5f 4f       	sbci	r21, 0xFF	; 255
    525a:	e1 e0       	ldi	r30, 0x01	; 1
    525c:	f0 e0       	ldi	r31, 0x00	; 0
    525e:	20 30       	cpi	r18, 0x00	; 0
    5260:	80 e0       	ldi	r24, 0x00	; 0
    5262:	38 07       	cpc	r19, r24
    5264:	80 e0       	ldi	r24, 0x00	; 0
    5266:	48 07       	cpc	r20, r24
    5268:	80 e4       	ldi	r24, 0x40	; 64
    526a:	58 07       	cpc	r21, r24
    526c:	28 f5       	brcc	.+74     	; 0x52b8 <__pack_f+0x146>
    526e:	e0 e0       	ldi	r30, 0x00	; 0
    5270:	f0 e0       	ldi	r31, 0x00	; 0
    5272:	22 c0       	rjmp	.+68     	; 0x52b8 <__pack_f+0x146>
    5274:	e0 38       	cpi	r30, 0x80	; 128
    5276:	f1 05       	cpc	r31, r1
    5278:	6c f5       	brge	.+90     	; 0x52d4 <__pack_f+0x162>
    527a:	e1 58       	subi	r30, 0x81	; 129
    527c:	ff 4f       	sbci	r31, 0xFF	; 255
    527e:	da 01       	movw	r26, r20
    5280:	c9 01       	movw	r24, r18
    5282:	8f 77       	andi	r24, 0x7F	; 127
    5284:	90 70       	andi	r25, 0x00	; 0
    5286:	a0 70       	andi	r26, 0x00	; 0
    5288:	b0 70       	andi	r27, 0x00	; 0
    528a:	80 34       	cpi	r24, 0x40	; 64
    528c:	91 05       	cpc	r25, r1
    528e:	a1 05       	cpc	r26, r1
    5290:	b1 05       	cpc	r27, r1
    5292:	39 f4       	brne	.+14     	; 0x52a2 <__pack_f+0x130>
    5294:	27 ff       	sbrs	r18, 7
    5296:	09 c0       	rjmp	.+18     	; 0x52aa <__pack_f+0x138>
    5298:	20 5c       	subi	r18, 0xC0	; 192
    529a:	3f 4f       	sbci	r19, 0xFF	; 255
    529c:	4f 4f       	sbci	r20, 0xFF	; 255
    529e:	5f 4f       	sbci	r21, 0xFF	; 255
    52a0:	04 c0       	rjmp	.+8      	; 0x52aa <__pack_f+0x138>
    52a2:	21 5c       	subi	r18, 0xC1	; 193
    52a4:	3f 4f       	sbci	r19, 0xFF	; 255
    52a6:	4f 4f       	sbci	r20, 0xFF	; 255
    52a8:	5f 4f       	sbci	r21, 0xFF	; 255
    52aa:	57 ff       	sbrs	r21, 7
    52ac:	05 c0       	rjmp	.+10     	; 0x52b8 <__pack_f+0x146>
    52ae:	56 95       	lsr	r21
    52b0:	47 95       	ror	r20
    52b2:	37 95       	ror	r19
    52b4:	27 95       	ror	r18
    52b6:	31 96       	adiw	r30, 0x01	; 1
    52b8:	87 e0       	ldi	r24, 0x07	; 7
    52ba:	56 95       	lsr	r21
    52bc:	47 95       	ror	r20
    52be:	37 95       	ror	r19
    52c0:	27 95       	ror	r18
    52c2:	8a 95       	dec	r24
    52c4:	d1 f7       	brne	.-12     	; 0x52ba <__pack_f+0x148>
    52c6:	0b c0       	rjmp	.+22     	; 0x52de <__pack_f+0x16c>
    52c8:	e0 e0       	ldi	r30, 0x00	; 0
    52ca:	f0 e0       	ldi	r31, 0x00	; 0
    52cc:	05 c0       	rjmp	.+10     	; 0x52d8 <__pack_f+0x166>
    52ce:	e0 e0       	ldi	r30, 0x00	; 0
    52d0:	f0 e0       	ldi	r31, 0x00	; 0
    52d2:	05 c0       	rjmp	.+10     	; 0x52de <__pack_f+0x16c>
    52d4:	ef ef       	ldi	r30, 0xFF	; 255
    52d6:	f0 e0       	ldi	r31, 0x00	; 0
    52d8:	20 e0       	ldi	r18, 0x00	; 0
    52da:	30 e0       	ldi	r19, 0x00	; 0
    52dc:	a9 01       	movw	r20, r18
    52de:	8e 2f       	mov	r24, r30
    52e0:	87 95       	ror	r24
    52e2:	88 27       	eor	r24, r24
    52e4:	87 95       	ror	r24
    52e6:	94 2f       	mov	r25, r20
    52e8:	9f 77       	andi	r25, 0x7F	; 127
    52ea:	67 95       	ror	r22
    52ec:	66 27       	eor	r22, r22
    52ee:	67 95       	ror	r22
    52f0:	e6 95       	lsr	r30
    52f2:	e2 2e       	mov	r14, r18
    52f4:	a9 2f       	mov	r26, r25
    52f6:	a8 2b       	or	r26, r24
    52f8:	fe 2f       	mov	r31, r30
    52fa:	f6 2b       	or	r31, r22
    52fc:	62 2f       	mov	r22, r18
    52fe:	73 2f       	mov	r23, r19
    5300:	8a 2f       	mov	r24, r26
    5302:	9f 2f       	mov	r25, r31
    5304:	cd b7       	in	r28, 0x3d	; 61
    5306:	de b7       	in	r29, 0x3e	; 62
    5308:	e6 e0       	ldi	r30, 0x06	; 6
    530a:	0c 94 98 2a 	jmp	0x5530	; 0x5530 <__epilogue_restores__+0x18>

0000530e <__unpack_f>:
    530e:	dc 01       	movw	r26, r24
    5310:	fb 01       	movw	r30, r22
    5312:	2c 91       	ld	r18, X
    5314:	11 96       	adiw	r26, 0x01	; 1
    5316:	3c 91       	ld	r19, X
    5318:	11 97       	sbiw	r26, 0x01	; 1
    531a:	12 96       	adiw	r26, 0x02	; 2
    531c:	8c 91       	ld	r24, X
    531e:	12 97       	sbiw	r26, 0x02	; 2
    5320:	48 2f       	mov	r20, r24
    5322:	4f 77       	andi	r20, 0x7F	; 127
    5324:	50 e0       	ldi	r21, 0x00	; 0
    5326:	98 2f       	mov	r25, r24
    5328:	99 1f       	adc	r25, r25
    532a:	99 27       	eor	r25, r25
    532c:	99 1f       	adc	r25, r25
    532e:	13 96       	adiw	r26, 0x03	; 3
    5330:	6c 91       	ld	r22, X
    5332:	13 97       	sbiw	r26, 0x03	; 3
    5334:	86 2f       	mov	r24, r22
    5336:	88 0f       	add	r24, r24
    5338:	89 2b       	or	r24, r25
    533a:	90 e0       	ldi	r25, 0x00	; 0
    533c:	66 1f       	adc	r22, r22
    533e:	66 27       	eor	r22, r22
    5340:	66 1f       	adc	r22, r22
    5342:	61 83       	std	Z+1, r22	; 0x01
    5344:	00 97       	sbiw	r24, 0x00	; 0
    5346:	39 f5       	brne	.+78     	; 0x5396 <__unpack_f+0x88>
    5348:	21 15       	cp	r18, r1
    534a:	31 05       	cpc	r19, r1
    534c:	41 05       	cpc	r20, r1
    534e:	51 05       	cpc	r21, r1
    5350:	11 f4       	brne	.+4      	; 0x5356 <__unpack_f+0x48>
    5352:	82 e0       	ldi	r24, 0x02	; 2
    5354:	29 c0       	rjmp	.+82     	; 0x53a8 <__unpack_f+0x9a>
    5356:	82 e8       	ldi	r24, 0x82	; 130
    5358:	9f ef       	ldi	r25, 0xFF	; 255
    535a:	93 83       	std	Z+3, r25	; 0x03
    535c:	82 83       	std	Z+2, r24	; 0x02
    535e:	67 e0       	ldi	r22, 0x07	; 7
    5360:	22 0f       	add	r18, r18
    5362:	33 1f       	adc	r19, r19
    5364:	44 1f       	adc	r20, r20
    5366:	55 1f       	adc	r21, r21
    5368:	6a 95       	dec	r22
    536a:	d1 f7       	brne	.-12     	; 0x5360 <__unpack_f+0x52>
    536c:	83 e0       	ldi	r24, 0x03	; 3
    536e:	80 83       	st	Z, r24
    5370:	09 c0       	rjmp	.+18     	; 0x5384 <__unpack_f+0x76>
    5372:	22 0f       	add	r18, r18
    5374:	33 1f       	adc	r19, r19
    5376:	44 1f       	adc	r20, r20
    5378:	55 1f       	adc	r21, r21
    537a:	82 81       	ldd	r24, Z+2	; 0x02
    537c:	93 81       	ldd	r25, Z+3	; 0x03
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	93 83       	std	Z+3, r25	; 0x03
    5382:	82 83       	std	Z+2, r24	; 0x02
    5384:	20 30       	cpi	r18, 0x00	; 0
    5386:	80 e0       	ldi	r24, 0x00	; 0
    5388:	38 07       	cpc	r19, r24
    538a:	80 e0       	ldi	r24, 0x00	; 0
    538c:	48 07       	cpc	r20, r24
    538e:	80 e4       	ldi	r24, 0x40	; 64
    5390:	58 07       	cpc	r21, r24
    5392:	78 f3       	brcs	.-34     	; 0x5372 <__unpack_f+0x64>
    5394:	20 c0       	rjmp	.+64     	; 0x53d6 <__unpack_f+0xc8>
    5396:	8f 3f       	cpi	r24, 0xFF	; 255
    5398:	91 05       	cpc	r25, r1
    539a:	79 f4       	brne	.+30     	; 0x53ba <__unpack_f+0xac>
    539c:	21 15       	cp	r18, r1
    539e:	31 05       	cpc	r19, r1
    53a0:	41 05       	cpc	r20, r1
    53a2:	51 05       	cpc	r21, r1
    53a4:	19 f4       	brne	.+6      	; 0x53ac <__unpack_f+0x9e>
    53a6:	84 e0       	ldi	r24, 0x04	; 4
    53a8:	80 83       	st	Z, r24
    53aa:	08 95       	ret
    53ac:	44 ff       	sbrs	r20, 4
    53ae:	03 c0       	rjmp	.+6      	; 0x53b6 <__unpack_f+0xa8>
    53b0:	81 e0       	ldi	r24, 0x01	; 1
    53b2:	80 83       	st	Z, r24
    53b4:	10 c0       	rjmp	.+32     	; 0x53d6 <__unpack_f+0xc8>
    53b6:	10 82       	st	Z, r1
    53b8:	0e c0       	rjmp	.+28     	; 0x53d6 <__unpack_f+0xc8>
    53ba:	8f 57       	subi	r24, 0x7F	; 127
    53bc:	90 40       	sbci	r25, 0x00	; 0
    53be:	93 83       	std	Z+3, r25	; 0x03
    53c0:	82 83       	std	Z+2, r24	; 0x02
    53c2:	83 e0       	ldi	r24, 0x03	; 3
    53c4:	80 83       	st	Z, r24
    53c6:	87 e0       	ldi	r24, 0x07	; 7
    53c8:	22 0f       	add	r18, r18
    53ca:	33 1f       	adc	r19, r19
    53cc:	44 1f       	adc	r20, r20
    53ce:	55 1f       	adc	r21, r21
    53d0:	8a 95       	dec	r24
    53d2:	d1 f7       	brne	.-12     	; 0x53c8 <__unpack_f+0xba>
    53d4:	50 64       	ori	r21, 0x40	; 64
    53d6:	24 83       	std	Z+4, r18	; 0x04
    53d8:	35 83       	std	Z+5, r19	; 0x05
    53da:	46 83       	std	Z+6, r20	; 0x06
    53dc:	57 83       	std	Z+7, r21	; 0x07
    53de:	08 95       	ret

000053e0 <__fpcmp_parts_f>:
    53e0:	fc 01       	movw	r30, r24
    53e2:	db 01       	movw	r26, r22
    53e4:	90 81       	ld	r25, Z
    53e6:	92 30       	cpi	r25, 0x02	; 2
    53e8:	08 f4       	brcc	.+2      	; 0x53ec <__fpcmp_parts_f+0xc>
    53ea:	49 c0       	rjmp	.+146    	; 0x547e <__fpcmp_parts_f+0x9e>
    53ec:	8c 91       	ld	r24, X
    53ee:	82 30       	cpi	r24, 0x02	; 2
    53f0:	08 f4       	brcc	.+2      	; 0x53f4 <__fpcmp_parts_f+0x14>
    53f2:	45 c0       	rjmp	.+138    	; 0x547e <__fpcmp_parts_f+0x9e>
    53f4:	94 30       	cpi	r25, 0x04	; 4
    53f6:	51 f4       	brne	.+20     	; 0x540c <__fpcmp_parts_f+0x2c>
    53f8:	61 81       	ldd	r22, Z+1	; 0x01
    53fa:	84 30       	cpi	r24, 0x04	; 4
    53fc:	b1 f5       	brne	.+108    	; 0x546a <__fpcmp_parts_f+0x8a>
    53fe:	11 96       	adiw	r26, 0x01	; 1
    5400:	2c 91       	ld	r18, X
    5402:	11 97       	sbiw	r26, 0x01	; 1
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	26 1b       	sub	r18, r22
    5408:	31 09       	sbc	r19, r1
    540a:	41 c0       	rjmp	.+130    	; 0x548e <__fpcmp_parts_f+0xae>
    540c:	84 30       	cpi	r24, 0x04	; 4
    540e:	21 f0       	breq	.+8      	; 0x5418 <__fpcmp_parts_f+0x38>
    5410:	92 30       	cpi	r25, 0x02	; 2
    5412:	41 f4       	brne	.+16     	; 0x5424 <__fpcmp_parts_f+0x44>
    5414:	82 30       	cpi	r24, 0x02	; 2
    5416:	b1 f1       	breq	.+108    	; 0x5484 <__fpcmp_parts_f+0xa4>
    5418:	11 96       	adiw	r26, 0x01	; 1
    541a:	8c 91       	ld	r24, X
    541c:	11 97       	sbiw	r26, 0x01	; 1
    541e:	88 23       	and	r24, r24
    5420:	a1 f1       	breq	.+104    	; 0x548a <__fpcmp_parts_f+0xaa>
    5422:	2d c0       	rjmp	.+90     	; 0x547e <__fpcmp_parts_f+0x9e>
    5424:	61 81       	ldd	r22, Z+1	; 0x01
    5426:	82 30       	cpi	r24, 0x02	; 2
    5428:	01 f1       	breq	.+64     	; 0x546a <__fpcmp_parts_f+0x8a>
    542a:	11 96       	adiw	r26, 0x01	; 1
    542c:	8c 91       	ld	r24, X
    542e:	11 97       	sbiw	r26, 0x01	; 1
    5430:	68 17       	cp	r22, r24
    5432:	d9 f4       	brne	.+54     	; 0x546a <__fpcmp_parts_f+0x8a>
    5434:	22 81       	ldd	r18, Z+2	; 0x02
    5436:	33 81       	ldd	r19, Z+3	; 0x03
    5438:	12 96       	adiw	r26, 0x02	; 2
    543a:	8d 91       	ld	r24, X+
    543c:	9c 91       	ld	r25, X
    543e:	13 97       	sbiw	r26, 0x03	; 3
    5440:	82 17       	cp	r24, r18
    5442:	93 07       	cpc	r25, r19
    5444:	94 f0       	brlt	.+36     	; 0x546a <__fpcmp_parts_f+0x8a>
    5446:	28 17       	cp	r18, r24
    5448:	39 07       	cpc	r19, r25
    544a:	bc f0       	brlt	.+46     	; 0x547a <__fpcmp_parts_f+0x9a>
    544c:	24 81       	ldd	r18, Z+4	; 0x04
    544e:	35 81       	ldd	r19, Z+5	; 0x05
    5450:	46 81       	ldd	r20, Z+6	; 0x06
    5452:	57 81       	ldd	r21, Z+7	; 0x07
    5454:	14 96       	adiw	r26, 0x04	; 4
    5456:	8d 91       	ld	r24, X+
    5458:	9d 91       	ld	r25, X+
    545a:	0d 90       	ld	r0, X+
    545c:	bc 91       	ld	r27, X
    545e:	a0 2d       	mov	r26, r0
    5460:	82 17       	cp	r24, r18
    5462:	93 07       	cpc	r25, r19
    5464:	a4 07       	cpc	r26, r20
    5466:	b5 07       	cpc	r27, r21
    5468:	18 f4       	brcc	.+6      	; 0x5470 <__fpcmp_parts_f+0x90>
    546a:	66 23       	and	r22, r22
    546c:	41 f0       	breq	.+16     	; 0x547e <__fpcmp_parts_f+0x9e>
    546e:	0d c0       	rjmp	.+26     	; 0x548a <__fpcmp_parts_f+0xaa>
    5470:	28 17       	cp	r18, r24
    5472:	39 07       	cpc	r19, r25
    5474:	4a 07       	cpc	r20, r26
    5476:	5b 07       	cpc	r21, r27
    5478:	28 f4       	brcc	.+10     	; 0x5484 <__fpcmp_parts_f+0xa4>
    547a:	66 23       	and	r22, r22
    547c:	31 f0       	breq	.+12     	; 0x548a <__fpcmp_parts_f+0xaa>
    547e:	21 e0       	ldi	r18, 0x01	; 1
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	05 c0       	rjmp	.+10     	; 0x548e <__fpcmp_parts_f+0xae>
    5484:	20 e0       	ldi	r18, 0x00	; 0
    5486:	30 e0       	ldi	r19, 0x00	; 0
    5488:	02 c0       	rjmp	.+4      	; 0x548e <__fpcmp_parts_f+0xae>
    548a:	2f ef       	ldi	r18, 0xFF	; 255
    548c:	3f ef       	ldi	r19, 0xFF	; 255
    548e:	c9 01       	movw	r24, r18
    5490:	08 95       	ret

00005492 <__divmodhi4>:
    5492:	97 fb       	bst	r25, 7
    5494:	09 2e       	mov	r0, r25
    5496:	07 26       	eor	r0, r23
    5498:	0a d0       	rcall	.+20     	; 0x54ae <__divmodhi4_neg1>
    549a:	77 fd       	sbrc	r23, 7
    549c:	04 d0       	rcall	.+8      	; 0x54a6 <__divmodhi4_neg2>
    549e:	0c d0       	rcall	.+24     	; 0x54b8 <__udivmodhi4>
    54a0:	06 d0       	rcall	.+12     	; 0x54ae <__divmodhi4_neg1>
    54a2:	00 20       	and	r0, r0
    54a4:	1a f4       	brpl	.+6      	; 0x54ac <__divmodhi4_exit>

000054a6 <__divmodhi4_neg2>:
    54a6:	70 95       	com	r23
    54a8:	61 95       	neg	r22
    54aa:	7f 4f       	sbci	r23, 0xFF	; 255

000054ac <__divmodhi4_exit>:
    54ac:	08 95       	ret

000054ae <__divmodhi4_neg1>:
    54ae:	f6 f7       	brtc	.-4      	; 0x54ac <__divmodhi4_exit>
    54b0:	90 95       	com	r25
    54b2:	81 95       	neg	r24
    54b4:	9f 4f       	sbci	r25, 0xFF	; 255
    54b6:	08 95       	ret

000054b8 <__udivmodhi4>:
    54b8:	aa 1b       	sub	r26, r26
    54ba:	bb 1b       	sub	r27, r27
    54bc:	51 e1       	ldi	r21, 0x11	; 17
    54be:	07 c0       	rjmp	.+14     	; 0x54ce <__udivmodhi4_ep>

000054c0 <__udivmodhi4_loop>:
    54c0:	aa 1f       	adc	r26, r26
    54c2:	bb 1f       	adc	r27, r27
    54c4:	a6 17       	cp	r26, r22
    54c6:	b7 07       	cpc	r27, r23
    54c8:	10 f0       	brcs	.+4      	; 0x54ce <__udivmodhi4_ep>
    54ca:	a6 1b       	sub	r26, r22
    54cc:	b7 0b       	sbc	r27, r23

000054ce <__udivmodhi4_ep>:
    54ce:	88 1f       	adc	r24, r24
    54d0:	99 1f       	adc	r25, r25
    54d2:	5a 95       	dec	r21
    54d4:	a9 f7       	brne	.-22     	; 0x54c0 <__udivmodhi4_loop>
    54d6:	80 95       	com	r24
    54d8:	90 95       	com	r25
    54da:	bc 01       	movw	r22, r24
    54dc:	cd 01       	movw	r24, r26
    54de:	08 95       	ret

000054e0 <__prologue_saves__>:
    54e0:	2f 92       	push	r2
    54e2:	3f 92       	push	r3
    54e4:	4f 92       	push	r4
    54e6:	5f 92       	push	r5
    54e8:	6f 92       	push	r6
    54ea:	7f 92       	push	r7
    54ec:	8f 92       	push	r8
    54ee:	9f 92       	push	r9
    54f0:	af 92       	push	r10
    54f2:	bf 92       	push	r11
    54f4:	cf 92       	push	r12
    54f6:	df 92       	push	r13
    54f8:	ef 92       	push	r14
    54fa:	ff 92       	push	r15
    54fc:	0f 93       	push	r16
    54fe:	1f 93       	push	r17
    5500:	cf 93       	push	r28
    5502:	df 93       	push	r29
    5504:	cd b7       	in	r28, 0x3d	; 61
    5506:	de b7       	in	r29, 0x3e	; 62
    5508:	ca 1b       	sub	r28, r26
    550a:	db 0b       	sbc	r29, r27
    550c:	0f b6       	in	r0, 0x3f	; 63
    550e:	f8 94       	cli
    5510:	de bf       	out	0x3e, r29	; 62
    5512:	0f be       	out	0x3f, r0	; 63
    5514:	cd bf       	out	0x3d, r28	; 61
    5516:	09 94       	ijmp

00005518 <__epilogue_restores__>:
    5518:	2a 88       	ldd	r2, Y+18	; 0x12
    551a:	39 88       	ldd	r3, Y+17	; 0x11
    551c:	48 88       	ldd	r4, Y+16	; 0x10
    551e:	5f 84       	ldd	r5, Y+15	; 0x0f
    5520:	6e 84       	ldd	r6, Y+14	; 0x0e
    5522:	7d 84       	ldd	r7, Y+13	; 0x0d
    5524:	8c 84       	ldd	r8, Y+12	; 0x0c
    5526:	9b 84       	ldd	r9, Y+11	; 0x0b
    5528:	aa 84       	ldd	r10, Y+10	; 0x0a
    552a:	b9 84       	ldd	r11, Y+9	; 0x09
    552c:	c8 84       	ldd	r12, Y+8	; 0x08
    552e:	df 80       	ldd	r13, Y+7	; 0x07
    5530:	ee 80       	ldd	r14, Y+6	; 0x06
    5532:	fd 80       	ldd	r15, Y+5	; 0x05
    5534:	0c 81       	ldd	r16, Y+4	; 0x04
    5536:	1b 81       	ldd	r17, Y+3	; 0x03
    5538:	aa 81       	ldd	r26, Y+2	; 0x02
    553a:	b9 81       	ldd	r27, Y+1	; 0x01
    553c:	ce 0f       	add	r28, r30
    553e:	d1 1d       	adc	r29, r1
    5540:	0f b6       	in	r0, 0x3f	; 63
    5542:	f8 94       	cli
    5544:	de bf       	out	0x3e, r29	; 62
    5546:	0f be       	out	0x3f, r0	; 63
    5548:	cd bf       	out	0x3d, r28	; 61
    554a:	ed 01       	movw	r28, r26
    554c:	08 95       	ret

0000554e <strchr>:
    554e:	fc 01       	movw	r30, r24
    5550:	81 91       	ld	r24, Z+
    5552:	86 17       	cp	r24, r22
    5554:	21 f0       	breq	.+8      	; 0x555e <strchr+0x10>
    5556:	88 23       	and	r24, r24
    5558:	d9 f7       	brne	.-10     	; 0x5550 <strchr+0x2>
    555a:	99 27       	eor	r25, r25
    555c:	08 95       	ret
    555e:	31 97       	sbiw	r30, 0x01	; 1
    5560:	cf 01       	movw	r24, r30
    5562:	08 95       	ret

00005564 <strcpy>:
    5564:	fb 01       	movw	r30, r22
    5566:	dc 01       	movw	r26, r24
    5568:	01 90       	ld	r0, Z+
    556a:	0d 92       	st	X+, r0
    556c:	00 20       	and	r0, r0
    556e:	e1 f7       	brne	.-8      	; 0x5568 <strcpy+0x4>
    5570:	08 95       	ret

00005572 <strlen>:
    5572:	fc 01       	movw	r30, r24
    5574:	01 90       	ld	r0, Z+
    5576:	00 20       	and	r0, r0
    5578:	e9 f7       	brne	.-6      	; 0x5574 <strlen+0x2>
    557a:	80 95       	com	r24
    557c:	90 95       	com	r25
    557e:	8e 0f       	add	r24, r30
    5580:	9f 1f       	adc	r25, r31
    5582:	08 95       	ret

00005584 <_exit>:
    5584:	f8 94       	cli

00005586 <__stop_program>:
    5586:	ff cf       	rjmp	.-2      	; 0x5586 <__stop_program>

/*
 * M590.h
 *
 * Created: 20.12.2017 14:51:02
 *  Author: Dante_L_Levi
 */ 


#ifndef M590_H_
#define M590_H_

#include "Main.h"
#include "usart.h"
#include <string.h>

//==========================Команда запроса==================
#define COM_ATE_ECHO 0				//флаги для управления командами- запрос на эхо 
#define COM_AT_CHECKVERSION 1		//Получить версию
#define COM_AT_VERSION 2			//получить версию
#define COM_STATUS 3				//Получить статус
#define COM_POWER 4					//включить модуль

//=====================флаги на получение скорости либо ее установки===================
#define FLAG_BAUD_SET	"1"		//установка скорости
#define FLAG_BAUD_GET   "2"		//получение скорости


//======================================флаги на получение статуса модуля================================================
#define  FLAG_STATUS_R_GET "1"		//получаем статус сети
#define  FLAG_STATUS_R_SET "2"		//устанавливаем статус модуля
//======================================================================================

//====================================Команды управления спящим режимом===============================
#define ENABLE_SLEEP "1"		//разрешение входа в режим сна
#define DISABLE_SLEEP "2"		//запрет входа в режим сна
//====================================================================================================


//====================================Флаги управления для работы с форматом SMS-сообщения============================

#define SMS_FORMAT_PDU "0"			//PDU-формат 
#define SMS_FORMAT_TEXT "1"			//текстовый формат


//====================================================================================================================

//=====================================Кодировка для режима PDU=======================================================

#define ENCODING_GSM "\"GSM\""	//Кодировка ASCII
#define ENCODING_HEX "\"HEX\""	//кодировка шестнадцатеричными значениями
#define ENCODING_IRA "\"IRA\""	//международный справочный алфавит
#define ENCODING_PCCP437 "\"PCCP437\"" //кодировка CP437(IBM PC)
#define ENCODING_8859_1 "\"8859-1\""		//кодовые страницы семейства ISO 8859
#define ENCODING_Unicode	"\"UCS2\""	//кодировка Unicode(2 байта на символ)


//====================================================================================================================



#define ATE_ECHO "ATE"		     //Команда настройки режима эха-<n>: 0 – выключить; 1 – включить
#define AT_CHECKVERSION "ati"		//Команда проверки модели и версии модуля
#define AT_VERSION "at+getvers"	//Команда чтения версии прошивки модуля
//--------------------------------------------------
#define AT_SAVECONF "AT&W"		//AT&W<значение>-Команда сохранения текущей конфигурации настроек в EEPROM память-<значение>:
//0 – сохранить настройки в  0-м профиле, параметр 0 можно не указывать;
//1 – сохранить настройки в 1-м профиле
//---------------------------------------------------
#define AT_BAUD "AT+IPR="	//Команда настройки скорости порта UART AT+IPR=9600
#define AT_CPAS "AT+CPAS" //Команда проверки статуса модуля
//----------------------------------------------------
#define AT_CREG_GET "AT+CREG?"  //Команда проверки регистрации модуля в сети
#define AT_CREG_SET "AT+CREG="
/*
Описание	Команда проверки регистрации модуля в сети
Формат	AT+CREG: <mode>
Параметр	<mode>:
0 – выключить уведомление о регистрации в сети
1 –  включить уведомление о регистрации в сети +CREG: <stat>
2 – включить уведомление о регистрации в сети и информацию о местоположении<

stat>:
0 – не зарегистрирован, поиск сети не выполняется
1 – зарегистрирован в домашней сети
2 – регистрация отклонена
3 – не зарегистрирован, выполняется поиск сети
4 – неизвестно
5 – зарегистрирован, зона роуминга
Ответ	OK или ERROR
AT+CREG: <mode>,<stat>
OK

Пример	AT+CREG=1
OK	Включить уведомление о регистрации в сети
Запрос параметров	AT+CREG?
+CREG: 0,1

OK
Зарегистрирован в домашней сети
*/
//---------------------------------------------------------

#define AT_SLEEP "at+enpwrsave=" //Команда настройки спящего режима
/*
Описание	Команда настройки спящего режима
Формат	at+enpwrsave=<n>
Параметр	<n>:
0 – спящий режим запрещен;
1 – спящий режим разрешен
Ответ	OK или ERROR
Пример	at+enpwrsave=1
OK
Примечание	Значение параметра <n> не сохраняется после выключения модуля.
*/
//----------------------------------------------------------------

#define AT_CPWROFF "AT+CPWROFF"	//Команда выключения модуля
/*
	Описание	Команда выключения модуля
	Формат	AT+CPWROFF
	Ответ	OK или ERROR
	Пример	AT+CPWROFF
	OK
	Примечание	Не следует одновременно подавать команду и оперировать выводом ON/OFF модуля.
*/
//--------------------------------------------------------------------

#define AT_CLIP "AT+CLIP="	//Команда настройки автоматического определения номера (АОН)
/*
	Описание	Команда настройки автоматического определения номера (АОН)
	Формат	AT+CLIP=<n>
	Параметр	<n>:
	0 – АОН выключен;
	1 – АОН включен
	Ответ	OK
	Пример	AT+CLIP=1
	OK
	Сообщение от модуля	RING	Входящий звонок (АОН отключен)
	RING
	
	+CLIP: “79XXXXXXXXX”,145,,,“”,0	Входящий звонок (АОН включен)
	
	“79XXXXXXXXX” – номер вызывающего телефона
	“” – имя абонента
	Примечание	Сообщение RING повторяется после каждого гудка
*/
//----------------------------------------------------------------

#define ATD "ATD+37529" //Исходящий вызов для установления голосового соединения
/*
Описание	Исходящий вызов для установления голосового соединения
Формат	ATD+79XXXXXXXXX;
Параметр	79XXXXXXXXX – номер вызываемого телефона
Ответ	OK
Пример	ATD+79630749105;
OK
Сообщение от модуля	CONNECT
BUSY
NO ANSWER
NO CARRIER	Соединение установлено
Занят другим сеансом связи
Нет ответа
Вызов сброшен
*/
//----------------------------------------------------------------
#define ATH "ATH" //Команда разъединения соединений (повесить трубку)
/*
Описание	Команда разъединения соединений (повесить трубку)
Формат	ATH<n>
Параметр	<n>:
0 – разъединить все вызовы, параметр 0 можно не указывать;
1 – разъединить исходящий вызов
Ответ	OK
Пример	ATH
OK
*/
//--------------------------------------------------------
#define AT_confSMS "AT+CMGF="	//Команда настройки формата SMS сообщений
/*
Описание	Команда настройки формата SMS сообщений
Формат	AT+CMGF=<режим>
Параметр	<режим>: 0 – PDU формат; 1 – текстовый формат
Ответ	OK или ERROR
Пример	AT+CMGF =1
OK
Примечание	Если сообщение отправляется в PDU формате, необходимо установить кодировку UCS2 (при использовании кириллических символов), для текстового формата кодировку GSM, либо UCS2

В PDU формате, текст представлен в виде последовательности шестнадцатеричных чисел.
*/
//--------------------------------------------------------
#define AT_CODING_TEXT "AT+CSCS="	//Команда выбора кодировки текста
/*
	Описание	Команда выбора кодировки текста
	Формат	AT+CSCS=<chset>
	Параметр	<chset>:
	“GSM” – кодировка ASCII
	“HEX” – кодировка шестнадцатеричными значениями
	“IRA” – международный справочный алфавит
	“PCCP437” – кодировка CP437 (IBM PC)
	“8859-1” – кодовые страницы семейства ISO 8859
	“UCS2” – кодировка Unicode (2 байта на символ)
	Ответ	OK или ERROR
	Пример	AT+CSCS=“GSM”
	OK
*/

//-------------------------------------------------------------
#define AT_SMS_RESSIEVE "AT+CMGR="		//Команда чтения SMS сообщения
/*
	Описание	Команда чтения SMS сообщения
	Формат	AT+CMGR=<index>
	Параметр	<index>: номер считываемого сообщения
	Ответ	Для текстового формата (CMGF=1):
	+CMGR: <stat>,<oa>,<alpha>,<scts><CR><LF><data>
	OK
	(или ERROR)
	
	Для PDU формата (CMGF=0):
	+CMGR: <stat>,<alpha>,<length>,<scts><CR><LF><pdu>
	OK
	(или ERROR)
	
	<stat> — статус SMS сообщения:
	0 – для PDU формата, REC UNREAD – для текстового формата: входящее непрочитанное сообщение
	1 – для PDU формата, REC READ – для текстового формата: входящее прочитанное сообщение
	2 – для PDU формата, STO UNSENT – для текстового формата: неотправленное (исходящее) сообщение
	3 – для PDU формата, STO SENT – для текстового формата: отправленное сообщение
	4 – для PDU формата, ALL – для текстового формата: все сообщения
	
	<alpha> – имя отправителя
	<scts> – отметка времени сервис-центра в формате:
	год/месяц/день, часы: минуты: секунды ± часовой пояс
	<data> –  текст сообщения в ASCII символах
	<length> – количество символов сообщения (для PDU формата)
	<pdu> – информация о SMS и текст сообщения в PDU формате
	Пример	AT+CMGR=1
	+CMGR: “REC READ”,“+79123456789”,“”,“15/11/13,14:39:35+32”
	GPS-START2
	
	OK	Для текстового формата
	кодировка ASCII (GSM)
	Получено сообщение: GPS-START2
	AT+CMGR=1
	+CMGR: “REC READ”,“+79123456789”,“”,“15/11/13,14:39:35+32”
	004700500053002D005300540041005200540032
	
	OK	Для текстового формата
	кодировка Unicode (UCS2)
	Получено сообщение: GPS-START2
	AT+CMGR=1
	+CMGR: 1,,28
	07919730071111F1040B919721436587F90000511131419353020
	A47E8B435A506A55419
	
	OK	Для PDU формата
	специальная 7-ми битная
	кодировка
	Получено сообщение: GPS-START2
*/

//------------------------------------------------------------------
#define AT_SEND_SMS "AT+CMGS="	//Команда отправки SMS сообщения
/*
	Описание	Команда отправки SMS сообщения
	Формат	Для текстового формата (CMGF=1):
	AT+CMGS=<da><CR><text><ctrl-Z>
	
	Для PDU формата (CMGF=0):
	AT+CMGS=<length><CR><pdu><ctrl-Z>
	Параметр	<da> – номер на который посылается сообщение (в ASCII символах)
	<text> – текст сообщения в ASCII символах
	<length> – количество байт сообщения в PDU формате
	<pdu> – информация о SMS и текст сообщения в PDU формате
	Ответ	+CMGS: <mr>
	OK
	(или ERROR)
	
	<mr> – условный номер, присваиваемый модулем
	Пример	AT+CMGS=“+79123456789”<CR>
	> Perezvoni mne<ctrl-Z>
	+CMGS: 2
	
	OK	Для текстового формата
	Отправка сообщения “Perezvoni mne”
	AT+CMGS=27<CR>
	> 07919740030900F001000B919721436587F900080E
	041F044004380432043504420021<ctrl-Z>
	>
	+CMGS: 2
	
	OK	Для PDU формата
	кодировка Unicode (UCS2)
	Отправка сообщения “Привет!”
	AT+CMGS=22<CR>
	> 07919740030900F001000B919721436587F900000A
	47E8B435A506A55419<ctrl-Z>
	>
	+CMGS: 2
	
	OK	Для PDU формата
	специальная 7-ми битная
	кодировка
	Отправка сообщения “GPS-START2”
	===============================================================
	Примечание	Сначала необходимо отправить команду AT+CMGS=“+79123456789”,
	 затем дождаться приглашения в виде символов “> ” (> и пробел), 
	 после чего отправить текст сообщения. Для завершения процесса 
	 следует отправить символ <ctrl-Z> (шестнадцатеричное значение 0х1A)
	
	Кириллические символы необходимо отправлять в кодировке Unicode (UCS2), 
	только в формате PDU. Латинские символы можно отправлять в текстовом 
	формате с кодировкой ASCII (GSM), либо в формате PDU с кодировкой 
	Unicode (UCS2), или при помощи специальной 7-ми битной кодировки 
	символами ASCII
*/
//---------------------------------------------------------------------

#define AT_SMS_DEL "AT+CMGD="		//Команда удаления SMS сообщений
/*
	Описание	Команда удаления SMS сообщений
	Формат	AT+CMGD=<index>,<delflag>
	Параметр	<index> – порядковый номер удаляемого сообщения, для удаления одного сообщения <delflag> можно не указывать
	
	<delflag>:
	0 – удалить сообщение с номером <index>
	1 – удалить все прочитанные сообщения
	2 – удалить все прочитанные и отправленные сообщения
	3 – удалить все прочитанные, отправленные и неотправленные сообщения
	4 – удалить все сообщения
	Ответ	OK или ERROR
	Пример	AT+CMGD=1
	OK	Удалить сообщение с номером 1
	AT+CMGD=1,4
	OK	Удалить все сообщения
*/
//--------------------------------------------------------------------------

//==============================Флаги управления модулем========================

#define OK 1
#define CONNECTION 2
#define ERROR 0


//==============================================================================


//===================================Прототипы функций=========================

char *SendSMS_M590(char* messege,char* Number);		//Функция отправки сообщения
char *GetSMS_M590(int lengthSMS, char indexPhone);		//Функция приема сообщения
char *PDUEncoding(char Encoding);		//Функция кодировки текста
char *SettingSMSFormat(char flag);		//Функция настройки формата сообщений
char *SleepModeM590(char flagMode);		//Функция включения спящего режима
char *CHeckRegeistrationM590(char flag,char mode);//Команда проверки регистрации модуля в сети
char *SetBuadM590(long int baud,char flagreq);		//Функция установки скорости
char *SaveConfigEEPROM_M590(unsigned char val);		//Функция сохранения настроек в EEPROM
char *SendCommandM590(char *strCommand,char TypeCommand);		//Функция отправки проверочных команд
char CheckModuleM590(void);					//Функция проверки подключения модуля


//=============================================================================



#endif /* M590_H_ */
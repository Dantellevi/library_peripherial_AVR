
UsartBasicLib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001ea  0000027e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  0080006c  0080006c  0000028a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1d  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009b8  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000064e  00000000  00000000  00001a95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  000020e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000496  00000000  00000000  000022c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ed  00000000  00000000  00002756  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00002c43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3f       	cpi	r26, 0xF0	; 240
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  92:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <IndexIN>
  96:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  98:	ef 77       	andi	r30, 0x7F	; 127
  9a:	e0 93 6f 00 	sts	0x006F, r30	; 0x80006f <IndexIN>
		buffer[IndexIN] = val;
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e0 59       	subi	r30, 0x90	; 144
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart_old = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	uart_flag = 1;
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <uart_flag>
	InBuffer(uart_old);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <InBuffer>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:



int main(void)
{
    Usart_Init(9600);
  fc:	60 e8       	ldi	r22, 0x80	; 128
  fe:	75 e2       	ldi	r23, 0x25	; 37
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 96 00 	call	0x12c	; 0x12c <Usart_Init>
	Usart_str_rn("Hello World");
 108:	80 e6       	ldi	r24, 0x60	; 96
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 b5 00 	call	0x16a	; 0x16a <Usart_str_rn>

    while (1) 
    {
	Usart_str_rn("Hello World");
 110:	80 e6       	ldi	r24, 0x60	; 96
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 b5 00 	call	0x16a	; 0x16a <Usart_str_rn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	85 ea       	ldi	r24, 0xA5	; 165
 11c:	9e e0       	ldi	r25, 0x0E	; 14
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x22>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x2c>
 128:	00 00       	nop
 12a:	f2 cf       	rjmp	.-28     	; 0x110 <main+0x14>

0000012c <Usart_Init>:
		_delay_ms(1);
	}
	
	out = OutBufferStr(str, count);
	return out;
}
 12c:	9b 01       	movw	r18, r22
 12e:	ac 01       	movw	r20, r24
 130:	60 e2       	ldi	r22, 0x20	; 32
 132:	71 ea       	ldi	r23, 0xA1	; 161
 134:	87 e0       	ldi	r24, 0x07	; 7
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <__udivmodsi4>
 13c:	da 01       	movw	r26, r20
 13e:	c9 01       	movw	r24, r18
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	a1 09       	sbc	r26, r1
 144:	b1 09       	sbc	r27, r1
 146:	89 2f       	mov	r24, r25
 148:	9a 2f       	mov	r25, r26
 14a:	ab 2f       	mov	r26, r27
 14c:	bb 27       	eor	r27, r27
 14e:	80 bd       	out	0x20, r24	; 32
 150:	21 50       	subi	r18, 0x01	; 1
 152:	29 b9       	out	0x09, r18	; 9
 154:	1b b8       	out	0x0b, r1	; 11
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	88 69       	ori	r24, 0x98	; 152
 15a:	8a b9       	out	0x0a, r24	; 10
 15c:	86 e8       	ldi	r24, 0x86	; 134
 15e:	80 bd       	out	0x20, r24	; 32
 160:	08 95       	ret

00000162 <Usart_char_out>:
 162:	5d 9b       	sbis	0x0b, 5	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <Usart_char_out>
 166:	8c b9       	out	0x0c, r24	; 12
 168:	08 95       	ret

0000016a <Usart_str_rn>:
//						  нулевым символом \0. После передачи строки в порт
//						  передается два служебных символа \r\n.
//-------------------------------------------------------------------------

void Usart_str_rn(char *str)
{
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	8c 01       	movw	r16, r24
	unsigned char i=0;
	while(str[i])
 172:	fc 01       	movw	r30, r24
 174:	80 81       	ld	r24, Z
 176:	88 23       	and	r24, r24
 178:	51 f0       	breq	.+20     	; 0x18e <Usart_str_rn+0x24>
 17a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		Usart_char_out(str[i]);
 17c:	0e 94 b1 00 	call	0x162	; 0x162 <Usart_char_out>
		i++;
 180:	cf 5f       	subi	r28, 0xFF	; 255
//-------------------------------------------------------------------------

void Usart_str_rn(char *str)
{
	unsigned char i=0;
	while(str[i])
 182:	f8 01       	movw	r30, r16
 184:	ec 0f       	add	r30, r28
 186:	f1 1d       	adc	r31, r1
 188:	80 81       	ld	r24, Z
 18a:	81 11       	cpse	r24, r1
 18c:	f7 cf       	rjmp	.-18     	; 0x17c <Usart_str_rn+0x12>
	{
		Usart_char_out(str[i]);
		i++;
	}
	Usart_char_out('\r');
 18e:	8d e0       	ldi	r24, 0x0D	; 13
 190:	0e 94 b1 00 	call	0x162	; 0x162 <Usart_char_out>
	Usart_char_out('\n');
 194:	8a e0       	ldi	r24, 0x0A	; 10
 196:	0e 94 b1 00 	call	0x162	; 0x162 <Usart_char_out>
	
}
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <__udivmodsi4>:
 1a2:	a1 e2       	ldi	r26, 0x21	; 33
 1a4:	1a 2e       	mov	r1, r26
 1a6:	aa 1b       	sub	r26, r26
 1a8:	bb 1b       	sub	r27, r27
 1aa:	fd 01       	movw	r30, r26
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <__udivmodsi4_ep>

000001ae <__udivmodsi4_loop>:
 1ae:	aa 1f       	adc	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	ee 1f       	adc	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	a2 17       	cp	r26, r18
 1b8:	b3 07       	cpc	r27, r19
 1ba:	e4 07       	cpc	r30, r20
 1bc:	f5 07       	cpc	r31, r21
 1be:	20 f0       	brcs	.+8      	; 0x1c8 <__udivmodsi4_ep>
 1c0:	a2 1b       	sub	r26, r18
 1c2:	b3 0b       	sbc	r27, r19
 1c4:	e4 0b       	sbc	r30, r20
 1c6:	f5 0b       	sbc	r31, r21

000001c8 <__udivmodsi4_ep>:
 1c8:	66 1f       	adc	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	88 1f       	adc	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	1a 94       	dec	r1
 1d2:	69 f7       	brne	.-38     	; 0x1ae <__udivmodsi4_loop>
 1d4:	60 95       	com	r22
 1d6:	70 95       	com	r23
 1d8:	80 95       	com	r24
 1da:	90 95       	com	r25
 1dc:	9b 01       	movw	r18, r22
 1de:	ac 01       	movw	r20, r24
 1e0:	bd 01       	movw	r22, r26
 1e2:	cf 01       	movw	r24, r30
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>


ds3231project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000322  000003b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  0080006a  0080006a  000003c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000154d  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c55  00000000  00000000  00001ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad1  00000000  00000000  0000273e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000390  00000000  00000000  00003210  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  000035a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae9  00000000  00000000  00003b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000462e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e2       	ldi	r30, 0x22	; 34
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  8a:	0c 94 8f 01 	jmp	0x31e	; 0x31e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  92:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <IndexIN>
  96:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  98:	ef 77       	andi	r30, 0x7F	; 127
  9a:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <IndexIN>
		buffer[IndexIN] = val;
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e2 59       	subi	r30, 0x92	; 146
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart_old = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	uart_flag = 1;
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <uart_flag>
	InBuffer(uart_old);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <InBuffer>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <ds3231_read_time>:
//	Режим счета часов, либо DS3231_GET_24, либо DS3231_GET_AM, либо DS3231_GET_PM
//
//-------------------------------------------------------------------------

void ds3231_read_time(char *str)
{
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	00 d0       	rcall	.+0      	; 0x108 <ds3231_read_time+0xc>
 108:	1f 92       	push	r1
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	8c 01       	movw	r16, r24
	char temp[3];
	unsigned char i=0;
	char hour=0;

	Start_I2C();
 110:	0e 94 ef 00 	call	0x1de	; 0x1de <Start_I2C>
	I2C_SendByte(DS3231_ADD_W);
 114:	80 ed       	ldi	r24, 0xD0	; 208
 116:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_SendByte>
	I2C_SendByte(DS3231_SECONDS);
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_SendByte>
	Start_I2C();
 120:	0e 94 ef 00 	call	0x1de	; 0x1de <Start_I2C>
	I2C_SendByte(DS3231_ADD_R);
 124:	81 ed       	ldi	r24, 0xD1	; 209
 126:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <I2C_SendByte>
	temp[2]=I2C_ReadByte();
 12a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_ReadByte>
 12e:	8b 83       	std	Y+3, r24	; 0x03
	temp[1]=I2C_ReadByte();
 130:	0e 94 ff 00 	call	0x1fe	; 0x1fe <I2C_ReadByte>
 134:	8a 83       	std	Y+2, r24	; 0x02
	temp[0]=I2C_ReadLastByte();
 136:	0e 94 06 01 	call	0x20c	; 0x20c <I2C_ReadLastByte>
 13a:	f8 2e       	mov	r15, r24
 13c:	89 83       	std	Y+1, r24	; 0x01
	Stop_I2C();
 13e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <Stop_I2C>

	if(temp[0] & 0x40) // AM/PM
 142:	f6 fe       	sbrs	r15, 6
 144:	2a c0       	rjmp	.+84     	; 0x19a <ds3231_read_time+0x9e>
	{
		*str = ((temp[0] & 0x0F)+(((temp[0] >> 4) & 0x01) * 10));
 146:	f4 fa       	bst	r15, 4
 148:	88 27       	eor	r24, r24
 14a:	80 f9       	bld	r24, 0
 14c:	88 0f       	add	r24, r24
 14e:	98 2f       	mov	r25, r24
 150:	99 0f       	add	r25, r25
 152:	99 0f       	add	r25, r25
 154:	98 0f       	add	r25, r24
 156:	8f 2d       	mov	r24, r15
 158:	8f 70       	andi	r24, 0x0F	; 15
 15a:	f9 2e       	mov	r15, r25
 15c:	f8 0e       	add	r15, r24
 15e:	d8 01       	movw	r26, r16
 160:	fc 92       	st	X, r15
		hour = ((temp[0] >> 5) & 0x01);
		
		i = 1;
		while(i < 3)
		{
			*str = ((temp[i] & 0x0F)+((temp[i] >> 4) * 10));
 162:	8a 81       	ldd	r24, Y+2	; 0x02
 164:	98 2f       	mov	r25, r24
 166:	92 95       	swap	r25
 168:	9f 70       	andi	r25, 0x0F	; 15
 16a:	99 0f       	add	r25, r25
 16c:	29 2f       	mov	r18, r25
 16e:	22 0f       	add	r18, r18
 170:	22 0f       	add	r18, r18
 172:	92 0f       	add	r25, r18
 174:	8f 70       	andi	r24, 0x0F	; 15
 176:	89 0f       	add	r24, r25
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	8c 93       	st	X, r24
 17c:	11 97       	sbiw	r26, 0x01	; 1
 17e:	8b 81       	ldd	r24, Y+3	; 0x03
 180:	98 2f       	mov	r25, r24
 182:	92 95       	swap	r25
 184:	9f 70       	andi	r25, 0x0F	; 15
 186:	99 0f       	add	r25, r25
 188:	29 2f       	mov	r18, r25
 18a:	22 0f       	add	r18, r18
 18c:	22 0f       	add	r18, r18
 18e:	92 0f       	add	r25, r18
 190:	8f 70       	andi	r24, 0x0F	; 15
 192:	89 0f       	add	r24, r25
 194:	12 96       	adiw	r26, 0x02	; 2
 196:	8c 93       	st	X, r24
 198:	16 c0       	rjmp	.+44     	; 0x1c6 <ds3231_read_time+0xca>
 19a:	fe 01       	movw	r30, r28
 19c:	31 96       	adiw	r30, 0x01	; 1
 19e:	a8 01       	movw	r20, r16
 1a0:	4d 5f       	subi	r20, 0xFD	; 253
 1a2:	5f 4f       	sbci	r21, 0xFF	; 255
	else // 24
	{
		i = 0;
		while(i < 3)
		{
			*str = ((temp[i] & 0x0F)+((temp[i] >> 4) * 10));
 1a4:	91 91       	ld	r25, Z+
 1a6:	89 2f       	mov	r24, r25
 1a8:	82 95       	swap	r24
 1aa:	8f 70       	andi	r24, 0x0F	; 15
 1ac:	88 0f       	add	r24, r24
 1ae:	28 2f       	mov	r18, r24
 1b0:	22 0f       	add	r18, r18
 1b2:	22 0f       	add	r18, r18
 1b4:	82 0f       	add	r24, r18
 1b6:	9f 70       	andi	r25, 0x0F	; 15
 1b8:	98 0f       	add	r25, r24
 1ba:	d8 01       	movw	r26, r16
 1bc:	9d 93       	st	X+, r25
 1be:	8d 01       	movw	r16, r26
		}
	}
	else // 24
	{
		i = 0;
		while(i < 3)
 1c0:	a4 17       	cp	r26, r20
 1c2:	b5 07       	cpc	r27, r21
 1c4:	79 f7       	brne	.-34     	; 0x1a4 <ds3231_read_time+0xa8>
			i++;
		}
		hour = DS3231_GET_24;
	}
	
}
 1c6:	0f 90       	pop	r0
 1c8:	0f 90       	pop	r0
 1ca:	0f 90       	pop	r0
 1cc:	df 91       	pop	r29
 1ce:	cf 91       	pop	r28
 1d0:	1f 91       	pop	r17
 1d2:	0f 91       	pop	r16
 1d4:	ff 90       	pop	r15
 1d6:	08 95       	ret

000001d8 <I2C_Init>:
	Start_I2C();
	I2C_SendByte(addr); // Отправим в шину адрес устройства + бит чтения-записи
	I2C_SendByte(data);// Отправим байт данных
	Stop_I2C();

}
 1d8:	80 e2       	ldi	r24, 0x20	; 32
 1da:	80 b9       	out	0x00, r24	; 0
 1dc:	08 95       	ret

000001de <Start_I2C>:
 1de:	84 ea       	ldi	r24, 0xA4	; 164
 1e0:	86 bf       	out	0x36, r24	; 54
 1e2:	06 b6       	in	r0, 0x36	; 54
 1e4:	07 fe       	sbrs	r0, 7
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <Start_I2C+0x4>
 1e8:	08 95       	ret

000001ea <Stop_I2C>:
 1ea:	84 e9       	ldi	r24, 0x94	; 148
 1ec:	86 bf       	out	0x36, r24	; 54
 1ee:	08 95       	ret

000001f0 <I2C_SendByte>:
 1f0:	83 b9       	out	0x03, r24	; 3
 1f2:	84 e8       	ldi	r24, 0x84	; 132
 1f4:	86 bf       	out	0x36, r24	; 54
 1f6:	06 b6       	in	r0, 0x36	; 54
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <I2C_SendByte+0x6>
 1fc:	08 95       	ret

000001fe <I2C_ReadByte>:

unsigned char I2C_ReadByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
 1fe:	84 ec       	ldi	r24, 0xC4	; 196
 200:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
 202:	06 b6       	in	r0, 0x36	; 54
 204:	07 fe       	sbrs	r0, 7
 206:	fd cf       	rjmp	.-6      	; 0x202 <I2C_ReadByte+0x4>
	return TWDR;//читаем регистр данных
 208:	83 b1       	in	r24, 0x03	; 3
}
 20a:	08 95       	ret

0000020c <I2C_ReadLastByte>:


unsigned char I2C_ReadLastByte(void)
{
	TWCR = (1<<TWINT)|(1<<TWEN);
 20c:	84 e8       	ldi	r24, 0x84	; 132
 20e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));//ожидание установки бита TWIN
 210:	06 b6       	in	r0, 0x36	; 54
 212:	07 fe       	sbrs	r0, 7
 214:	fd cf       	rjmp	.-6      	; 0x210 <I2C_ReadLastByte+0x4>
	return TWDR;//читаем регистр данных
 216:	83 b1       	in	r24, 0x03	; 3
 218:	08 95       	ret

0000021a <main>:
#include "Main.h"


int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	69 97       	sbiw	r28, 0x19	; 25
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
	char buffer[25];
	I2C_Init();
 22e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <I2C_Init>
	Usart_Init(9600);
 232:	60 e8       	ldi	r22, 0x80	; 128
 234:	75 e2       	ldi	r23, 0x25	; 37
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 39 01 	call	0x272	; 0x272 <Usart_Init>

    
    while (1) 
    {
		ds3231_read_time(buffer);
 23e:	ce 01       	movw	r24, r28
 240:	01 96       	adiw	r24, 0x01	; 1
 242:	0e 94 7e 00 	call	0xfc	; 0xfc <ds3231_read_time>
		Usart_PrintString("Time= ");
 246:	80 e6       	ldi	r24, 0x60	; 96
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_PrintString>
		Usart_PrintString(buffer);
 24e:	ce 01       	movw	r24, r28
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_PrintString>
		Usart_PrintString("\r\n");
 256:	87 e6       	ldi	r24, 0x67	; 103
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <Usart_PrintString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	84 e3       	ldi	r24, 0x34	; 52
 262:	9c e0       	ldi	r25, 0x0C	; 12
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x4a>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x54>
 26e:	00 00       	nop
 270:	e6 cf       	rjmp	.-52     	; 0x23e <main+0x24>

00000272 <Usart_Init>:
		str++;
		i++;

	}

}
 272:	9b 01       	movw	r18, r22
 274:	ac 01       	movw	r20, r24
 276:	60 e2       	ldi	r22, 0x20	; 32
 278:	71 ea       	ldi	r23, 0xA1	; 161
 27a:	87 e0       	ldi	r24, 0x07	; 7
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 6d 01 	call	0x2da	; 0x2da <__udivmodsi4>
 282:	da 01       	movw	r26, r20
 284:	c9 01       	movw	r24, r18
 286:	01 97       	sbiw	r24, 0x01	; 1
 288:	a1 09       	sbc	r26, r1
 28a:	b1 09       	sbc	r27, r1
 28c:	89 2f       	mov	r24, r25
 28e:	9a 2f       	mov	r25, r26
 290:	ab 2f       	mov	r26, r27
 292:	bb 27       	eor	r27, r27
 294:	80 bd       	out	0x20, r24	; 32
 296:	21 50       	subi	r18, 0x01	; 1
 298:	29 b9       	out	0x09, r18	; 9
 29a:	1b b8       	out	0x0b, r1	; 11
 29c:	8a b1       	in	r24, 0x0a	; 10
 29e:	88 69       	ori	r24, 0x98	; 152
 2a0:	8a b9       	out	0x0a, r24	; 10
 2a2:	86 e8       	ldi	r24, 0x86	; 134
 2a4:	80 bd       	out	0x20, r24	; 32
 2a6:	08 95       	ret

000002a8 <Usart_char_out>:
 2a8:	5d 9b       	sbis	0x0b, 5	; 11
 2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <Usart_char_out>
 2ac:	8c b9       	out	0x0c, r24	; 12
 2ae:	08 95       	ret

000002b0 <Usart_PrintString>:



void Usart_PrintString(char *str)
{
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	ec 01       	movw	r28, r24

	char i=0;
	while(*str)
 2b6:	88 81       	ld	r24, Y
 2b8:	88 23       	and	r24, r24
 2ba:	31 f0       	breq	.+12     	; 0x2c8 <Usart_PrintString+0x18>
 2bc:	21 96       	adiw	r28, 0x01	; 1
	{
		Usart_char_out(*str);
 2be:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Usart_char_out>

void Usart_PrintString(char *str)
{

	char i=0;
	while(*str)
 2c2:	89 91       	ld	r24, Y+
 2c4:	81 11       	cpse	r24, r1
 2c6:	fb cf       	rjmp	.-10     	; 0x2be <Usart_PrintString+0xe>
		Usart_char_out(*str);
		str++;
		i++;

	}
	Usart_char_out(0x0D);
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Usart_char_out>
	Usart_char_out(0x0A);
 2ce:	8a e0       	ldi	r24, 0x0A	; 10
 2d0:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Usart_char_out>
}
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	08 95       	ret

000002da <__udivmodsi4>:
 2da:	a1 e2       	ldi	r26, 0x21	; 33
 2dc:	1a 2e       	mov	r1, r26
 2de:	aa 1b       	sub	r26, r26
 2e0:	bb 1b       	sub	r27, r27
 2e2:	fd 01       	movw	r30, r26
 2e4:	0d c0       	rjmp	.+26     	; 0x300 <__udivmodsi4_ep>

000002e6 <__udivmodsi4_loop>:
 2e6:	aa 1f       	adc	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	ee 1f       	adc	r30, r30
 2ec:	ff 1f       	adc	r31, r31
 2ee:	a2 17       	cp	r26, r18
 2f0:	b3 07       	cpc	r27, r19
 2f2:	e4 07       	cpc	r30, r20
 2f4:	f5 07       	cpc	r31, r21
 2f6:	20 f0       	brcs	.+8      	; 0x300 <__udivmodsi4_ep>
 2f8:	a2 1b       	sub	r26, r18
 2fa:	b3 0b       	sbc	r27, r19
 2fc:	e4 0b       	sbc	r30, r20
 2fe:	f5 0b       	sbc	r31, r21

00000300 <__udivmodsi4_ep>:
 300:	66 1f       	adc	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	88 1f       	adc	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	1a 94       	dec	r1
 30a:	69 f7       	brne	.-38     	; 0x2e6 <__udivmodsi4_loop>
 30c:	60 95       	com	r22
 30e:	70 95       	com	r23
 310:	80 95       	com	r24
 312:	90 95       	com	r25
 314:	9b 01       	movw	r18, r22
 316:	ac 01       	movw	r20, r24
 318:	bd 01       	movw	r22, r26
 31a:	cf 01       	movw	r24, r30
 31c:	08 95       	ret

0000031e <_exit>:
 31e:	f8 94       	cli

00000320 <__stop_program>:
 320:	ff cf       	rjmp	.-2      	; 0x320 <__stop_program>

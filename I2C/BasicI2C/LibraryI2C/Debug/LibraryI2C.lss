
LibraryI2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000848  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072e  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003df  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a3  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d3  00000000  00000000  000019a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00001a7a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 49 00 	call	0x92	; 0x92 <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <I2CStart>:


void I2CStart(void)
{

	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);//вкл. бит старт(TWSTA),вкл. перырвани€(TWINT),разрешение работы(TWEN)
  6c:	84 ea       	ldi	r24, 0xA4	; 164
  6e:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//подождем пока установитс€ TWIN
  70:	06 b6       	in	r0, 0x36	; 54
  72:	07 fe       	sbrs	r0, 7
  74:	fd cf       	rjmp	.-6      	; 0x70 <I2CStart+0x4>

}
  76:	08 95       	ret

00000078 <I2CStop>:


void I2CStop(void)
{
	TWCR=(1<<TWINT)|(TWSTO)|(1<<TWEN);	//вкл. прерывани€(TWINT) ,  выставл€ем флаг остановки- STOP(TWSTO),разрешение работы(TWEN)
  78:	84 e8       	ldi	r24, 0x84	; 132
  7a:	86 bf       	out	0x36, r24	; 54
  7c:	08 95       	ret

0000007e <I2C_Init>:


void I2C_Init(void)
{

	TWBR=0x20;//100к√ц при F_CPU=8ћ√ц
  7e:	80 e2       	ldi	r24, 0x20	; 32
  80:	80 b9       	out	0x00, r24	; 0
  82:	08 95       	ret

00000084 <I2C_SendByte>:


void I2C_SendByte(uint8_t data)
{

	TWDR=data;
  84:	83 b9       	out	0x03, r24	; 3
	TWCR=(1<<TWINT)|(1<<TWEN);//вкл. передачу байта
  86:	84 e8       	ldi	r24, 0x84	; 132
  88:	86 bf       	out	0x36, r24	; 54
	while(!(TWCR&(1<<TWINT)));//ждем установки флага
  8a:	06 b6       	in	r0, 0x36	; 54
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <I2C_SendByte+0x6>

}
  90:	08 95       	ret

00000092 <main>:



int main(void)
{
    I2C_Init();
  92:	0e 94 3f 00 	call	0x7e	; 0x7e <I2C_Init>
    while (1) 
    {
		I2CStart();
		//I2C_SendByteByADDR(0b00111111,0);
		for (uint8_t i=0;i<100;i++)
  96:	d0 e0       	ldi	r29, 0x00	; 0
int main(void)
{
    I2C_Init();
    while (1) 
    {
		I2CStart();
  98:	0e 94 36 00 	call	0x6c	; 0x6c <I2CStart>
		//I2C_SendByteByADDR(0b00111111,0);
		for (uint8_t i=0;i<100;i++)
  9c:	cd 2f       	mov	r28, r29
		{
			I2C_SendByte(i);
  9e:	8c 2f       	mov	r24, r28
  a0:	0e 94 42 00 	call	0x84	; 0x84 <I2C_SendByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	2f ef       	ldi	r18, 0xFF	; 255
  a6:	84 e3       	ldi	r24, 0x34	; 52
  a8:	9c e0       	ldi	r25, 0x0C	; 12
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	90 40       	sbci	r25, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x18>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x22>
  b4:	00 00       	nop
    I2C_Init();
    while (1) 
    {
		I2CStart();
		//I2C_SendByteByADDR(0b00111111,0);
		for (uint8_t i=0;i<100;i++)
  b6:	cf 5f       	subi	r28, 0xFF	; 255
  b8:	c4 36       	cpi	r28, 0x64	; 100
  ba:	89 f7       	brne	.-30     	; 0x9e <main+0xc>
		{
			I2C_SendByte(i);
			_delay_ms(500);
		}
		I2CStop();
  bc:	0e 94 3c 00 	call	0x78	; 0x78 <I2CStop>

    }
  c0:	eb cf       	rjmp	.-42     	; 0x98 <main+0x6>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>

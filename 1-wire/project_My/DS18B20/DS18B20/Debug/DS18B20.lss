
DS18B20.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000007a  00800060  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000086  008000da  008000da  00000cee  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d4c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001525  00000000  00000000  00000ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c96  00000000  00000000  000023ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bb1  00000000  00000000  00003083  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00003c34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054c  00000000  00000000  00003f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa7  00000000  00000000  000044cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004f73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3d       	cpi	r26, 0xDA	; 218
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	aa ed       	ldi	r26, 0xDA	; 218
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <main>
  8a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  92:	e0 91 dd 00 	lds	r30, 0x00DD	; 0x8000dd <IndexIN>
  96:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  98:	ef 77       	andi	r30, 0x7F	; 127
  9a:	e0 93 dd 00 	sts	0x00DD, r30	; 0x8000dd <IndexIN>
		buffer[IndexIN] = val;
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e2 52       	subi	r30, 0x22	; 34
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart_old = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__data_end>
	uart_flag = 1;
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	90 93 db 00 	sts	0x00DB, r25	; 0x8000db <uart_flag>
	InBuffer(uart_old);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <InBuffer>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <start_meas>:




void start_meas( void ){
	if( W1_IN & 1<< W1_PIN ){
  fc:	b0 9b       	sbis	0x16, 0	; 22
  fe:	08 c0       	rjmp	.+16     	; 0x110 <start_meas+0x14>
		w1_command( CONVERT_T, NULL );
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	84 e4       	ldi	r24, 0x44	; 68
 106:	0e 94 8e 02 	call	0x51c	; 0x51c <w1_command>
		W1_OUT |= 1<< W1_PIN;
 10a:	c0 9a       	sbi	0x18, 0	; 24
		W1_DDR |= 1<< W1_PIN;			// parasite power on
 10c:	b8 9a       	sbi	0x17, 0	; 23
 10e:	08 95       	ret

		}else{
		Usart_PrintString( "Short Circuit !\r\n" );
 110:	81 e6       	ldi	r24, 0x61	; 97
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
 118:	08 95       	ret

0000011a <read_meas>:
}



void read_meas( void )
{
 11a:	2f 92       	push	r2
 11c:	3f 92       	push	r3
 11e:	4f 92       	push	r4
 120:	5f 92       	push	r5
 122:	6f 92       	push	r6
 124:	7f 92       	push	r7
 126:	8f 92       	push	r8
 128:	9f 92       	push	r9
 12a:	af 92       	push	r10
 12c:	bf 92       	push	r11
 12e:	cf 92       	push	r12
 130:	df 92       	push	r13
 132:	ef 92       	push	r14
 134:	ff 92       	push	r15
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	a6 97       	sbiw	r28, 0x26	; 38
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
	char s[30];
	unsigned char byte[2];
	unsigned char i;
	

	for( diff = SEARCH_FIRST; diff != LAST_DEVICE; ){
 14e:	55 24       	eor	r5, r5
 150:	5a 94       	dec	r5
 152:	8e 01       	movw	r16, r28
 154:	07 5f       	subi	r16, 0xF7	; 247
 156:	1f 4f       	sbci	r17, 0xFF	; 255
			break;
		}
		if( id[0] == 0x28 || id[0] == 0x10 ){	// temperature sensor
			Usart_PrintString( "ID: " );
			for( i = 0; i < 8; i++ ){
				sprintf(s, "%02X ", id[i] );
 158:	0f 2e       	mov	r0, r31
 15a:	f6 e9       	ldi	r31, 0x96	; 150
 15c:	cf 2e       	mov	r12, r31
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	df 2e       	mov	r13, r31
 162:	f0 2d       	mov	r31, r0
 164:	30 2e       	mov	r3, r16
 166:	41 2e       	mov	r4, r17
				temp+=1;
				ZNAK=MINUS;
			}
			else
			{
				ZNAK=PLUS;
 168:	22 24       	eor	r2, r2
 16a:	23 94       	inc	r2
			{
				case PLUS:
				{
					if( id[0] == 0x10 )			// 9 -> 12 bit
					temp <<= 3;
					sprintf( s, "  T: %04X = ", temp );	// hex value
 16c:	0f 2e       	mov	r0, r31
 16e:	fc e9       	ldi	r31, 0x9C	; 156
 170:	8f 2e       	mov	r8, r31
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	9f 2e       	mov	r9, r31
 176:	f0 2d       	mov	r31, r0
					Usart_PrintString(s);
					sprintf( s, "Tcels=%4d.%01dшC\r\n", temp >> 4, (temp << 12) / 6553 ); // 0.1шC
 178:	0f 2e       	mov	r0, r31
 17a:	f9 ea       	ldi	r31, 0xA9	; 169
 17c:	6f 2e       	mov	r6, r31
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	7f 2e       	mov	r7, r31
 182:	f0 2d       	mov	r31, r0
	unsigned char byte[2];
	unsigned char i;
	

	for( diff = SEARCH_FIRST; diff != LAST_DEVICE; ){
		diff = w1_rom_search( diff, id );
 184:	be 01       	movw	r22, r28
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	85 2d       	mov	r24, r5
 18c:	0e 94 34 02 	call	0x468	; 0x468 <w1_rom_search>
 190:	58 2e       	mov	r5, r24

		if( diff == PRESENCE_ERR ){
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	58 12       	cpse	r5, r24
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <read_meas+0x88>
			Usart_PrintString( "No Sensor found\r\n" );
 198:	83 e7       	ldi	r24, 0x73	; 115
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
			break;
 1a0:	e4 c0       	rjmp	.+456    	; 0x36a <read_meas+0x250>
		}
		if( diff == DATA_ERR ){
 1a2:	9e ef       	ldi	r25, 0xFE	; 254
 1a4:	59 12       	cpse	r5, r25
 1a6:	05 c0       	rjmp	.+10     	; 0x1b2 <read_meas+0x98>
			Usart_PrintString( "Bus Error\r\n" );
 1a8:	85 e8       	ldi	r24, 0x85	; 133
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
			break;
 1b0:	dc c0       	rjmp	.+440    	; 0x36a <read_meas+0x250>
		}
		if( id[0] == 0x28 || id[0] == 0x10 ){	// temperature sensor
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	88 32       	cpi	r24, 0x28	; 40
 1b6:	19 f0       	breq	.+6      	; 0x1be <read_meas+0xa4>
 1b8:	80 31       	cpi	r24, 0x10	; 16
 1ba:	09 f0       	breq	.+2      	; 0x1be <read_meas+0xa4>
 1bc:	d4 c0       	rjmp	.+424    	; 0x366 <read_meas+0x24c>
			Usart_PrintString( "ID: " );
 1be:	81 e9       	ldi	r24, 0x91	; 145
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
 1c6:	de 01       	movw	r26, r28
 1c8:	11 96       	adiw	r26, 0x01	; 1
 1ca:	7d 01       	movw	r14, r26
			for( i = 0; i < 8; i++ ){
				sprintf(s, "%02X ", id[i] );
 1cc:	f7 01       	movw	r30, r14
 1ce:	81 91       	ld	r24, Z+
 1d0:	7f 01       	movw	r14, r30
 1d2:	1f 92       	push	r1
 1d4:	8f 93       	push	r24
 1d6:	df 92       	push	r13
 1d8:	cf 92       	push	r12
 1da:	1f 93       	push	r17
 1dc:	0f 93       	push	r16
 1de:	0e 94 16 03 	call	0x62c	; 0x62c <sprintf>
				Usart_PrintString(s);
 1e2:	83 2d       	mov	r24, r3
 1e4:	94 2d       	mov	r25, r4
 1e6:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
			Usart_PrintString( "Bus Error\r\n" );
			break;
		}
		if( id[0] == 0x28 || id[0] == 0x10 ){	// temperature sensor
			Usart_PrintString( "ID: " );
			for( i = 0; i < 8; i++ ){
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	e0 16       	cp	r14, r16
 1f8:	f1 06       	cpc	r15, r17
 1fa:	41 f7       	brne	.-48     	; 0x1cc <read_meas+0xb2>
				sprintf(s, "%02X ", id[i] );
				Usart_PrintString(s);
			}
			w1_byte_wr( READ );			// read command
 1fc:	8e eb       	ldi	r24, 0xBE	; 190
 1fe:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
				
			
			temp = w1_byte_rd();			// low byte
 202:	0e 94 30 02 	call	0x460	; 0x460 <w1_byte_rd>
 206:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <temp+0x1>
 20a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <temp>
			temp |= (unsigned int)w1_byte_rd() << 8;		// high byte
 20e:	0e 94 30 02 	call	0x460	; 0x460 <w1_byte_rd>
 212:	b8 2e       	mov	r11, r24
 214:	a1 2c       	mov	r10, r1
 216:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <temp>
 21a:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <temp+0x1>
 21e:	8a 29       	or	r24, r10
 220:	9b 29       	or	r25, r11
 222:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <temp+0x1>
 226:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <temp>
			byte[0]=temp>>8;		//старшая часть
			if (byte[0]&0x80)
 22a:	99 23       	and	r25, r25
 22c:	74 f4       	brge	.+28     	; 0x24a <read_meas+0x130>
			{
				temp=~temp;
				temp+=1;
 22e:	91 95       	neg	r25
 230:	81 95       	neg	r24
 232:	91 09       	sbc	r25, r1
 234:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <temp+0x1>
 238:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <temp>
				ZNAK=MINUS;
 23c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <ZNAK>
					Usart_PrintString(s );
					break;
				}
				case MINUS:
				{
					if( id[0] == 0x10 )			// 9 -> 12 bit
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 31       	cpi	r24, 0x10	; 16
 244:	09 f0       	breq	.+2      	; 0x248 <read_meas+0x12e>
 246:	58 c0       	rjmp	.+176    	; 0x2f8 <read_meas+0x1de>
 248:	49 c0       	rjmp	.+146    	; 0x2dc <read_meas+0x1c2>
				temp+=1;
				ZNAK=MINUS;
			}
			else
			{
				ZNAK=PLUS;
 24a:	20 92 60 00 	sts	0x0060, r2	; 0x800060 <ZNAK>
			}
			switch(ZNAK)
			{
				case PLUS:
				{
					if( id[0] == 0x10 )			// 9 -> 12 bit
 24e:	89 81       	ldd	r24, Y+1	; 0x01
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	71 f4       	brne	.+28     	; 0x270 <read_meas+0x156>
					temp <<= 3;
 254:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <temp>
 258:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <temp+0x1>
 25c:	88 0f       	add	r24, r24
 25e:	99 1f       	adc	r25, r25
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <temp+0x1>
 26c:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <temp>
					sprintf( s, "  T: %04X = ", temp );	// hex value
 270:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <temp+0x1>
 274:	8f 93       	push	r24
 276:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <temp>
 27a:	8f 93       	push	r24
 27c:	9f 92       	push	r9
 27e:	8f 92       	push	r8
 280:	1f 93       	push	r17
 282:	0f 93       	push	r16
 284:	0e 94 16 03 	call	0x62c	; 0x62c <sprintf>
					Usart_PrintString(s);
 288:	83 2d       	mov	r24, r3
 28a:	94 2d       	mov	r25, r4
 28c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
					sprintf( s, "Tcels=%4d.%01dшC\r\n", temp >> 4, (temp << 12) / 6553 ); // 0.1шC
 290:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <temp>
 294:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <temp+0x1>
 298:	92 2f       	mov	r25, r18
 29a:	92 95       	swap	r25
 29c:	90 7f       	andi	r25, 0xF0	; 240
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	69 e9       	ldi	r22, 0x99	; 153
 2a2:	79 e1       	ldi	r23, 0x19	; 25
 2a4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__udivmodhi4>
 2a8:	7f 93       	push	r23
 2aa:	6f 93       	push	r22
 2ac:	32 95       	swap	r19
 2ae:	22 95       	swap	r18
 2b0:	2f 70       	andi	r18, 0x0F	; 15
 2b2:	23 27       	eor	r18, r19
 2b4:	3f 70       	andi	r19, 0x0F	; 15
 2b6:	23 27       	eor	r18, r19
 2b8:	3f 93       	push	r19
 2ba:	2f 93       	push	r18
 2bc:	7f 92       	push	r7
 2be:	6f 92       	push	r6
 2c0:	1f 93       	push	r17
 2c2:	0f 93       	push	r16
 2c4:	0e 94 16 03 	call	0x62c	; 0x62c <sprintf>
					Usart_PrintString(s );
 2c8:	83 2d       	mov	r24, r3
 2ca:	94 2d       	mov	r25, r4
 2cc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
					break;
 2d0:	0f b6       	in	r0, 0x3f	; 63
 2d2:	f8 94       	cli
 2d4:	de bf       	out	0x3e, r29	; 62
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	cd bf       	out	0x3d, r28	; 61
 2da:	45 c0       	rjmp	.+138    	; 0x366 <read_meas+0x24c>
				}
				case MINUS:
				{
					if( id[0] == 0x10 )			// 9 -> 12 bit
					temp <<= 3;
 2dc:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <temp>
 2e0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <temp+0x1>
 2e4:	88 0f       	add	r24, r24
 2e6:	99 1f       	adc	r25, r25
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <temp+0x1>
 2f4:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <temp>
					sprintf( s, "  T: %04X = ", temp );	// hex value
 2f8:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <temp+0x1>
 2fc:	8f 93       	push	r24
 2fe:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <temp>
 302:	8f 93       	push	r24
 304:	9f 92       	push	r9
 306:	8f 92       	push	r8
 308:	1f 93       	push	r17
 30a:	0f 93       	push	r16
 30c:	0e 94 16 03 	call	0x62c	; 0x62c <sprintf>
					Usart_PrintString(s);
 310:	83 2d       	mov	r24, r3
 312:	94 2d       	mov	r25, r4
 314:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
					sprintf( s, "Tcels=-%4d.%01dшC\r\n", temp >> 4, (temp << 12) / 6553 ); // 0.1шC
 318:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <temp>
 31c:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <temp+0x1>
 320:	92 2f       	mov	r25, r18
 322:	92 95       	swap	r25
 324:	90 7f       	andi	r25, 0xF0	; 240
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	69 e9       	ldi	r22, 0x99	; 153
 32a:	79 e1       	ldi	r23, 0x19	; 25
 32c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <__udivmodhi4>
 330:	7f 93       	push	r23
 332:	6f 93       	push	r22
 334:	32 95       	swap	r19
 336:	22 95       	swap	r18
 338:	2f 70       	andi	r18, 0x0F	; 15
 33a:	23 27       	eor	r18, r19
 33c:	3f 70       	andi	r19, 0x0F	; 15
 33e:	23 27       	eor	r18, r19
 340:	3f 93       	push	r19
 342:	2f 93       	push	r18
 344:	ac eb       	ldi	r26, 0xBC	; 188
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	bf 93       	push	r27
 34a:	af 93       	push	r26
 34c:	1f 93       	push	r17
 34e:	0f 93       	push	r16
 350:	0e 94 16 03 	call	0x62c	; 0x62c <sprintf>
					Usart_PrintString(s );
 354:	83 2d       	mov	r24, r3
 356:	94 2d       	mov	r25, r4
 358:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
					break;
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
	char s[30];
	unsigned char byte[2];
	unsigned char i;
	

	for( diff = SEARCH_FIRST; diff != LAST_DEVICE; ){
 366:	51 10       	cpse	r5, r1
 368:	0d cf       	rjmp	.-486    	; 0x184 <read_meas+0x6a>
			
			
			
		}
	}
	Usart_PrintString( "" );
 36a:	82 e7       	ldi	r24, 0x72	; 114
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
 372:	a6 96       	adiw	r28, 0x26	; 38
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	f8 94       	cli
 378:	de bf       	out	0x3e, r29	; 62
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	cd bf       	out	0x3d, r28	; 61
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	ff 90       	pop	r15
 388:	ef 90       	pop	r14
 38a:	df 90       	pop	r13
 38c:	cf 90       	pop	r12
 38e:	bf 90       	pop	r11
 390:	af 90       	pop	r10
 392:	9f 90       	pop	r9
 394:	8f 90       	pop	r8
 396:	7f 90       	pop	r7
 398:	6f 90       	pop	r6
 39a:	5f 90       	pop	r5
 39c:	4f 90       	pop	r4
 39e:	3f 90       	pop	r3
 3a0:	2f 90       	pop	r2
 3a2:	08 95       	ret

000003a4 <main>:



int main(void)
{
  Usart_Init(9600);
 3a4:	60 e8       	ldi	r22, 0x80	; 128
 3a6:	75 e2       	ldi	r23, 0x25	; 37
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 b2 02 	call	0x564	; 0x564 <Usart_Init>
  Usart_PrintString("1-Wire\r\n");
 3b0:	80 ed       	ldi	r24, 0xD0	; 208
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <Usart_PrintString>
    while (1) 
    {
	 start_meas();
 3b8:	0e 94 7e 00 	call	0xfc	; 0xfc <start_meas>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3bc:	2f ef       	ldi	r18, 0xFF	; 255
 3be:	89 e6       	ldi	r24, 0x69	; 105
 3c0:	98 e1       	ldi	r25, 0x18	; 24
 3c2:	21 50       	subi	r18, 0x01	; 1
 3c4:	80 40       	sbci	r24, 0x00	; 0
 3c6:	90 40       	sbci	r25, 0x00	; 0
 3c8:	e1 f7       	brne	.-8      	; 0x3c2 <main+0x1e>
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <main+0x28>
 3cc:	00 00       	nop
	 _delay_ms(1000);
	 read_meas();
 3ce:	0e 94 8d 00 	call	0x11a	; 0x11a <read_meas>
 3d2:	2f ef       	ldi	r18, 0xFF	; 255
 3d4:	89 e6       	ldi	r24, 0x69	; 105
 3d6:	98 e1       	ldi	r25, 0x18	; 24
 3d8:	21 50       	subi	r18, 0x01	; 1
 3da:	80 40       	sbci	r24, 0x00	; 0
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x34>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x3e>
 3e2:	00 00       	nop
 3e4:	e9 cf       	rjmp	.-46     	; 0x3b8 <main+0x14>

000003e6 <w1_reset>:
#include "oneWire.h"

unsigned char w1_reset(void)
{
	unsigned char err;
	W1_OUT &= ~(1<<W1_PIN);
 3e6:	c0 98       	cbi	0x18, 0	; 24
	W1_DDR |= 1<<W1_PIN;
 3e8:	b8 9a       	sbi	0x17, 0	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ea:	8f eb       	ldi	r24, 0xBF	; 191
 3ec:	93 e0       	ldi	r25, 0x03	; 3
 3ee:	01 97       	sbiw	r24, 0x01	; 1
 3f0:	f1 f7       	brne	.-4      	; 0x3ee <w1_reset+0x8>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <w1_reset+0xe>
 3f4:	00 00       	nop
	_delay_us(480);
	W1_DDR &= ~(1<<W1_PIN);
 3f6:	b8 98       	cbi	0x17, 0	; 23
 3f8:	90 eb       	ldi	r25, 0xB0	; 176
 3fa:	9a 95       	dec	r25
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <w1_reset+0x14>
	_delay_us(66);
	err = W1_IN & (1<<W1_PIN);
 3fe:	86 b3       	in	r24, 0x16	; 22
 400:	eb e3       	ldi	r30, 0x3B	; 59
 402:	f3 e0       	ldi	r31, 0x03	; 3
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	f1 f7       	brne	.-4      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 408:	00 c0       	rjmp	.+0      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 40a:	00 00       	nop
	_delay_us(480-66);
	if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
 40c:	b0 9b       	sbis	0x16, 0	; 22
 40e:	02 c0       	rjmp	.+4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	W1_OUT &= ~(1<<W1_PIN);
	W1_DDR |= 1<<W1_PIN;
	_delay_us(480);
	W1_DDR &= ~(1<<W1_PIN);
	_delay_us(66);
	err = W1_IN & (1<<W1_PIN);
 410:	81 70       	andi	r24, 0x01	; 1
 412:	08 95       	ret
	_delay_us(480-66);
	if( (W1_IN & (1<<W1_PIN)) == 0 )		// short circuit
	err = 1;
 414:	81 e0       	ldi	r24, 0x01	; 1
	return err;
}
 416:	08 95       	ret

00000418 <w1_bit_io>:

unsigned char w1_bit_io( unsigned char b )
{
	
	W1_DDR |= 1<<W1_PIN;
 418:	b8 9a       	sbi	0x17, 0	; 23
 41a:	92 e0       	ldi	r25, 0x02	; 2
 41c:	9a 95       	dec	r25
 41e:	f1 f7       	brne	.-4      	; 0x41c <w1_bit_io+0x4>
 420:	00 c0       	rjmp	.+0      	; 0x422 <w1_bit_io+0xa>
	_delay_us(1);
	if( b )
 422:	81 11       	cpse	r24, r1
	W1_DDR &= ~(1<<W1_PIN);
 424:	b8 98       	cbi	0x17, 0	; 23
 426:	95 e2       	ldi	r25, 0x25	; 37
 428:	9a 95       	dec	r25
 42a:	f1 f7       	brne	.-4      	; 0x428 <w1_bit_io+0x10>
 42c:	00 00       	nop
	_delay_us(14);
	if( (W1_IN & (1<<W1_PIN)) == 0 )
 42e:	b0 9b       	sbis	0x16, 0	; 22
	b = 0;
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	98 e7       	ldi	r25, 0x78	; 120
 434:	9a 95       	dec	r25
 436:	f1 f7       	brne	.-4      	; 0x434 <w1_bit_io+0x1c>
	_delay_us(45);
	W1_DDR &= ~(1<<W1_PIN);
 438:	b8 98       	cbi	0x17, 0	; 23
	
	return b;
}
 43a:	08 95       	ret

0000043c <w1_byte_wr>:


unsigned int w1_byte_wr( unsigned char b )
{
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	c8 2f       	mov	r28, r24
 442:	d8 e0       	ldi	r29, 0x08	; 8
	unsigned char i = 8, j;
	do{
		j = w1_bit_io( b & 1 );
 444:	8c 2f       	mov	r24, r28
 446:	81 70       	andi	r24, 0x01	; 1
 448:	0e 94 0c 02 	call	0x418	; 0x418 <w1_bit_io>
		b >>= 1;
 44c:	c6 95       	lsr	r28
		if( j )
 44e:	81 11       	cpse	r24, r1
		b |= 0x80;
 450:	c0 68       	ori	r28, 0x80	; 128
 452:	d1 50       	subi	r29, 0x01	; 1
	}while( --i );
 454:	b9 f7       	brne	.-18     	; 0x444 <w1_byte_wr+0x8>
	return b;
}
 456:	8c 2f       	mov	r24, r28
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	df 91       	pop	r29
 45c:	cf 91       	pop	r28
 45e:	08 95       	ret

00000460 <w1_byte_rd>:

unsigned int w1_byte_rd( void )
{
	return w1_byte_wr( 0xFF );
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
}
 466:	08 95       	ret

00000468 <w1_rom_search>:


unsigned char w1_rom_search( unsigned char diff, unsigned char *id )
{
 468:	df 92       	push	r13
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
 476:	d8 2e       	mov	r13, r24
 478:	8b 01       	movw	r16, r22
	unsigned char i, j, next_diff;
	unsigned char b;

	if( w1_reset() )
 47a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <w1_reset>
 47e:	81 11       	cpse	r24, r1
 480:	2b c0       	rjmp	.+86     	; 0x4d8 <w1_rom_search+0x70>
	return PRESENCE_ERR;			// error, no device found
	w1_byte_wr( SEARCH_ROM );			// ROM search command
 482:	80 ef       	ldi	r24, 0xF0	; 240
 484:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
	next_diff = LAST_DEVICE;			// unchanged on last device
 488:	e1 2c       	mov	r14, r1
	i = 8 * 8;					// 8 bytes
 48a:	c0 e4       	ldi	r28, 0x40	; 64
 48c:	0f 2e       	mov	r0, r31
 48e:	f8 ef       	ldi	r31, 0xF8	; 248
 490:	ff 2e       	mov	r15, r31
 492:	f0 2d       	mov	r31, r0
 494:	fc 0e       	add	r15, r28
	do{
		j = 8;					// 8 bits
		do{
			b = w1_bit_io( 1 );			// read bit
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	0e 94 0c 02 	call	0x418	; 0x418 <w1_bit_io>
 49c:	d8 2f       	mov	r29, r24
			if( w1_bit_io( 1 ) ){			// read complement bit
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 0c 02 	call	0x418	; 0x418 <w1_bit_io>
 4a4:	88 23       	and	r24, r24
 4a6:	19 f0       	breq	.+6      	; 0x4ae <w1_rom_search+0x46>
				if( b )					// 11
 4a8:	dd 23       	and	r29, r29
 4aa:	d1 f0       	breq	.+52     	; 0x4e0 <w1_rom_search+0x78>
 4ac:	17 c0       	rjmp	.+46     	; 0x4dc <w1_rom_search+0x74>
				return DATA_ERR;			// data error
				}else{
				if( !b ){				// 00 = 2 devices
 4ae:	d1 11       	cpse	r29, r1
 4b0:	24 c0       	rjmp	.+72     	; 0x4fa <w1_rom_search+0x92>
					if( diff > i ||
 4b2:	cd 15       	cp	r28, r13
 4b4:	e8 f0       	brcs	.+58     	; 0x4f0 <w1_rom_search+0x88>
					((*id & 1) && diff != i) ){
 4b6:	f8 01       	movw	r30, r16
 4b8:	80 81       	ld	r24, Z
			if( w1_bit_io( 1 ) ){			// read complement bit
				if( b )					// 11
				return DATA_ERR;			// data error
				}else{
				if( !b ){				// 00 = 2 devices
					if( diff > i ||
 4ba:	80 ff       	sbrs	r24, 0
 4bc:	11 c0       	rjmp	.+34     	; 0x4e0 <w1_rom_search+0x78>
					((*id & 1) && diff != i) ){
 4be:	dc 12       	cpse	r13, r28
 4c0:	1a c0       	rjmp	.+52     	; 0x4f6 <w1_rom_search+0x8e>
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <w1_rom_search+0x78>
			}
			w1_bit_io( b );     			// write bit
			*id >>= 1;
			if( b )					// store bit
			*id |= 0x80;
			i--;
 4c4:	c1 50       	subi	r28, 0x01	; 1
		}while( --j );
 4c6:	cf 11       	cpse	r28, r15
 4c8:	e6 cf       	rjmp	.-52     	; 0x496 <w1_rom_search+0x2e>
		id++;					// next byte
 4ca:	0f 5f       	subi	r16, 0xFF	; 255
 4cc:	1f 4f       	sbci	r17, 0xFF	; 255
			}
			w1_bit_io( b );     			// write bit
			*id >>= 1;
			if( b )					// store bit
			*id |= 0x80;
			i--;
 4ce:	cf 2d       	mov	r28, r15
		}while( --j );
		id++;					// next byte
	}while( i );
 4d0:	f1 10       	cpse	r15, r1
 4d2:	dc cf       	rjmp	.-72     	; 0x48c <w1_rom_search+0x24>
 4d4:	8e 2d       	mov	r24, r14
 4d6:	1a c0       	rjmp	.+52     	; 0x50c <w1_rom_search+0xa4>
{
	unsigned char i, j, next_diff;
	unsigned char b;

	if( w1_reset() )
	return PRESENCE_ERR;			// error, no device found
 4d8:	8f ef       	ldi	r24, 0xFF	; 255
 4da:	18 c0       	rjmp	.+48     	; 0x50c <w1_rom_search+0xa4>
		j = 8;					// 8 bits
		do{
			b = w1_bit_io( 1 );			// read bit
			if( w1_bit_io( 1 ) ){			// read complement bit
				if( b )					// 11
				return DATA_ERR;			// data error
 4dc:	8e ef       	ldi	r24, 0xFE	; 254
 4de:	16 c0       	rjmp	.+44     	; 0x50c <w1_rom_search+0xa4>
						b = 1;				// now 1
						next_diff = i;			// next pass 0
					}
				}
			}
			w1_bit_io( b );     			// write bit
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 0c 02 	call	0x418	; 0x418 <w1_bit_io>
			*id >>= 1;
 4e6:	f8 01       	movw	r30, r16
 4e8:	90 81       	ld	r25, Z
 4ea:	96 95       	lsr	r25
 4ec:	90 83       	st	Z, r25
 4ee:	ea cf       	rjmp	.-44     	; 0x4c4 <w1_rom_search+0x5c>
				}else{
				if( !b ){				// 00 = 2 devices
					if( diff > i ||
					((*id & 1) && diff != i) ){
						b = 1;				// now 1
						next_diff = i;			// next pass 0
 4f0:	ec 2e       	mov	r14, r28
				return DATA_ERR;			// data error
				}else{
				if( !b ){				// 00 = 2 devices
					if( diff > i ||
					((*id & 1) && diff != i) ){
						b = 1;				// now 1
 4f2:	d1 e0       	ldi	r29, 0x01	; 1
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <w1_rom_search+0x92>
						next_diff = i;			// next pass 0
 4f6:	ec 2e       	mov	r14, r28
				return DATA_ERR;			// data error
				}else{
				if( !b ){				// 00 = 2 devices
					if( diff > i ||
					((*id & 1) && diff != i) ){
						b = 1;				// now 1
 4f8:	d1 e0       	ldi	r29, 0x01	; 1
						next_diff = i;			// next pass 0
					}
				}
			}
			w1_bit_io( b );     			// write bit
 4fa:	8d 2f       	mov	r24, r29
 4fc:	0e 94 0c 02 	call	0x418	; 0x418 <w1_bit_io>
			*id >>= 1;
 500:	f8 01       	movw	r30, r16
 502:	90 81       	ld	r25, Z
 504:	96 95       	lsr	r25
			if( b )					// store bit
			*id |= 0x80;
 506:	90 68       	ori	r25, 0x80	; 128
 508:	90 83       	st	Z, r25
 50a:	dc cf       	rjmp	.-72     	; 0x4c4 <w1_rom_search+0x5c>
			i--;
		}while( --j );
		id++;					// next byte
	}while( i );
	return next_diff;				// to continue search
}
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	08 95       	ret

0000051c <w1_command>:




void w1_command( unsigned char command, unsigned char *id )
{
 51c:	ff 92       	push	r15
 51e:	0f 93       	push	r16
 520:	1f 93       	push	r17
 522:	cf 93       	push	r28
 524:	df 93       	push	r29
 526:	f8 2e       	mov	r15, r24
 528:	eb 01       	movw	r28, r22
	unsigned char i;
	w1_reset();
 52a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <w1_reset>
	if( id ){
 52e:	20 97       	sbiw	r28, 0x00	; 0
 530:	69 f0       	breq	.+26     	; 0x54c <w1_command+0x30>
		w1_byte_wr( MATCH_ROM );			// to a single device
 532:	85 e5       	ldi	r24, 0x55	; 85
 534:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
 538:	8e 01       	movw	r16, r28
 53a:	08 5f       	subi	r16, 0xF8	; 248
 53c:	1f 4f       	sbci	r17, 0xFF	; 255
		i = 8;
		do{
			w1_byte_wr( *id );
 53e:	89 91       	ld	r24, Y+
 540:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
			id++;
		}while( --i );
 544:	c0 17       	cp	r28, r16
 546:	d1 07       	cpc	r29, r17
 548:	d1 f7       	brne	.-12     	; 0x53e <w1_command+0x22>
 54a:	03 c0       	rjmp	.+6      	; 0x552 <w1_command+0x36>
		}else{
		w1_byte_wr( SKIP_ROM );			// to all devices
 54c:	8c ec       	ldi	r24, 0xCC	; 204
 54e:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
	}
	w1_byte_wr( command );
 552:	8f 2d       	mov	r24, r15
 554:	0e 94 1e 02 	call	0x43c	; 0x43c <w1_byte_wr>
}
 558:	df 91       	pop	r29
 55a:	cf 91       	pop	r28
 55c:	1f 91       	pop	r17
 55e:	0f 91       	pop	r16
 560:	ff 90       	pop	r15
 562:	08 95       	ret

00000564 <Usart_Init>:
		str++;
		i++;

	}

}
 564:	9b 01       	movw	r18, r22
 566:	ac 01       	movw	r20, r24
 568:	60 e2       	ldi	r22, 0x20	; 32
 56a:	71 ea       	ldi	r23, 0xA1	; 161
 56c:	87 e0       	ldi	r24, 0x07	; 7
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__udivmodsi4>
 574:	da 01       	movw	r26, r20
 576:	c9 01       	movw	r24, r18
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	a1 09       	sbc	r26, r1
 57c:	b1 09       	sbc	r27, r1
 57e:	89 2f       	mov	r24, r25
 580:	9a 2f       	mov	r25, r26
 582:	ab 2f       	mov	r26, r27
 584:	bb 27       	eor	r27, r27
 586:	80 bd       	out	0x20, r24	; 32
 588:	21 50       	subi	r18, 0x01	; 1
 58a:	29 b9       	out	0x09, r18	; 9
 58c:	1b b8       	out	0x0b, r1	; 11
 58e:	8a b1       	in	r24, 0x0a	; 10
 590:	88 69       	ori	r24, 0x98	; 152
 592:	8a b9       	out	0x0a, r24	; 10
 594:	86 e8       	ldi	r24, 0x86	; 134
 596:	80 bd       	out	0x20, r24	; 32
 598:	08 95       	ret

0000059a <Usart_char_out>:
 59a:	5d 9b       	sbis	0x0b, 5	; 11
 59c:	fe cf       	rjmp	.-4      	; 0x59a <Usart_char_out>
 59e:	8c b9       	out	0x0c, r24	; 12
 5a0:	08 95       	ret

000005a2 <Usart_PrintString>:

void Usart_PrintString(char *str)
{
 5a2:	cf 93       	push	r28
 5a4:	df 93       	push	r29
 5a6:	ec 01       	movw	r28, r24

	while(*str)
 5a8:	88 81       	ld	r24, Y
 5aa:	88 23       	and	r24, r24
 5ac:	31 f0       	breq	.+12     	; 0x5ba <Usart_PrintString+0x18>
 5ae:	21 96       	adiw	r28, 0x01	; 1
	{
		Usart_char_out(*str++);
 5b0:	0e 94 cd 02 	call	0x59a	; 0x59a <Usart_char_out>
}

void Usart_PrintString(char *str)
{

	while(*str)
 5b4:	89 91       	ld	r24, Y+
 5b6:	81 11       	cpse	r24, r1
 5b8:	fb cf       	rjmp	.-10     	; 0x5b0 <Usart_PrintString+0xe>
	{
		Usart_char_out(*str++);
	
	}
	
}
 5ba:	df 91       	pop	r29
 5bc:	cf 91       	pop	r28
 5be:	08 95       	ret

000005c0 <__udivmodhi4>:
 5c0:	aa 1b       	sub	r26, r26
 5c2:	bb 1b       	sub	r27, r27
 5c4:	51 e1       	ldi	r21, 0x11	; 17
 5c6:	07 c0       	rjmp	.+14     	; 0x5d6 <__udivmodhi4_ep>

000005c8 <__udivmodhi4_loop>:
 5c8:	aa 1f       	adc	r26, r26
 5ca:	bb 1f       	adc	r27, r27
 5cc:	a6 17       	cp	r26, r22
 5ce:	b7 07       	cpc	r27, r23
 5d0:	10 f0       	brcs	.+4      	; 0x5d6 <__udivmodhi4_ep>
 5d2:	a6 1b       	sub	r26, r22
 5d4:	b7 0b       	sbc	r27, r23

000005d6 <__udivmodhi4_ep>:
 5d6:	88 1f       	adc	r24, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	5a 95       	dec	r21
 5dc:	a9 f7       	brne	.-22     	; 0x5c8 <__udivmodhi4_loop>
 5de:	80 95       	com	r24
 5e0:	90 95       	com	r25
 5e2:	bc 01       	movw	r22, r24
 5e4:	cd 01       	movw	r24, r26
 5e6:	08 95       	ret

000005e8 <__udivmodsi4>:
 5e8:	a1 e2       	ldi	r26, 0x21	; 33
 5ea:	1a 2e       	mov	r1, r26
 5ec:	aa 1b       	sub	r26, r26
 5ee:	bb 1b       	sub	r27, r27
 5f0:	fd 01       	movw	r30, r26
 5f2:	0d c0       	rjmp	.+26     	; 0x60e <__udivmodsi4_ep>

000005f4 <__udivmodsi4_loop>:
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	ee 1f       	adc	r30, r30
 5fa:	ff 1f       	adc	r31, r31
 5fc:	a2 17       	cp	r26, r18
 5fe:	b3 07       	cpc	r27, r19
 600:	e4 07       	cpc	r30, r20
 602:	f5 07       	cpc	r31, r21
 604:	20 f0       	brcs	.+8      	; 0x60e <__udivmodsi4_ep>
 606:	a2 1b       	sub	r26, r18
 608:	b3 0b       	sbc	r27, r19
 60a:	e4 0b       	sbc	r30, r20
 60c:	f5 0b       	sbc	r31, r21

0000060e <__udivmodsi4_ep>:
 60e:	66 1f       	adc	r22, r22
 610:	77 1f       	adc	r23, r23
 612:	88 1f       	adc	r24, r24
 614:	99 1f       	adc	r25, r25
 616:	1a 94       	dec	r1
 618:	69 f7       	brne	.-38     	; 0x5f4 <__udivmodsi4_loop>
 61a:	60 95       	com	r22
 61c:	70 95       	com	r23
 61e:	80 95       	com	r24
 620:	90 95       	com	r25
 622:	9b 01       	movw	r18, r22
 624:	ac 01       	movw	r20, r24
 626:	bd 01       	movw	r22, r26
 628:	cf 01       	movw	r24, r30
 62a:	08 95       	ret

0000062c <sprintf>:
 62c:	ae e0       	ldi	r26, 0x0E	; 14
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	ec e1       	ldi	r30, 0x1C	; 28
 632:	f3 e0       	ldi	r31, 0x03	; 3
 634:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__prologue_saves__+0x1c>
 638:	0d 89       	ldd	r16, Y+21	; 0x15
 63a:	1e 89       	ldd	r17, Y+22	; 0x16
 63c:	86 e0       	ldi	r24, 0x06	; 6
 63e:	8c 83       	std	Y+4, r24	; 0x04
 640:	1a 83       	std	Y+2, r17	; 0x02
 642:	09 83       	std	Y+1, r16	; 0x01
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	9f e7       	ldi	r25, 0x7F	; 127
 648:	9e 83       	std	Y+6, r25	; 0x06
 64a:	8d 83       	std	Y+5, r24	; 0x05
 64c:	ae 01       	movw	r20, r28
 64e:	47 5e       	subi	r20, 0xE7	; 231
 650:	5f 4f       	sbci	r21, 0xFF	; 255
 652:	6f 89       	ldd	r22, Y+23	; 0x17
 654:	78 8d       	ldd	r23, Y+24	; 0x18
 656:	ce 01       	movw	r24, r28
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	0e 94 39 03 	call	0x672	; 0x672 <vfprintf>
 65e:	2f 81       	ldd	r18, Y+7	; 0x07
 660:	38 85       	ldd	r19, Y+8	; 0x08
 662:	f8 01       	movw	r30, r16
 664:	e2 0f       	add	r30, r18
 666:	f3 1f       	adc	r31, r19
 668:	10 82       	st	Z, r1
 66a:	2e 96       	adiw	r28, 0x0e	; 14
 66c:	e4 e0       	ldi	r30, 0x04	; 4
 66e:	0c 94 e1 05 	jmp	0xbc2	; 0xbc2 <__epilogue_restores__+0x1c>

00000672 <vfprintf>:
 672:	ac e0       	ldi	r26, 0x0C	; 12
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ef e3       	ldi	r30, 0x3F	; 63
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	0c 94 b7 05 	jmp	0xb6e	; 0xb6e <__prologue_saves__>
 67e:	7c 01       	movw	r14, r24
 680:	6b 01       	movw	r12, r22
 682:	8a 01       	movw	r16, r20
 684:	fc 01       	movw	r30, r24
 686:	17 82       	std	Z+7, r1	; 0x07
 688:	16 82       	std	Z+6, r1	; 0x06
 68a:	83 81       	ldd	r24, Z+3	; 0x03
 68c:	81 ff       	sbrs	r24, 1
 68e:	bd c1       	rjmp	.+890    	; 0xa0a <vfprintf+0x398>
 690:	ce 01       	movw	r24, r28
 692:	01 96       	adiw	r24, 0x01	; 1
 694:	4c 01       	movw	r8, r24
 696:	f7 01       	movw	r30, r14
 698:	93 81       	ldd	r25, Z+3	; 0x03
 69a:	f6 01       	movw	r30, r12
 69c:	93 fd       	sbrc	r25, 3
 69e:	85 91       	lpm	r24, Z+
 6a0:	93 ff       	sbrs	r25, 3
 6a2:	81 91       	ld	r24, Z+
 6a4:	6f 01       	movw	r12, r30
 6a6:	88 23       	and	r24, r24
 6a8:	09 f4       	brne	.+2      	; 0x6ac <vfprintf+0x3a>
 6aa:	ab c1       	rjmp	.+854    	; 0xa02 <vfprintf+0x390>
 6ac:	85 32       	cpi	r24, 0x25	; 37
 6ae:	39 f4       	brne	.+14     	; 0x6be <vfprintf+0x4c>
 6b0:	93 fd       	sbrc	r25, 3
 6b2:	85 91       	lpm	r24, Z+
 6b4:	93 ff       	sbrs	r25, 3
 6b6:	81 91       	ld	r24, Z+
 6b8:	6f 01       	movw	r12, r30
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	29 f4       	brne	.+10     	; 0x6c8 <vfprintf+0x56>
 6be:	b7 01       	movw	r22, r14
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 6c6:	e7 cf       	rjmp	.-50     	; 0x696 <vfprintf+0x24>
 6c8:	51 2c       	mov	r5, r1
 6ca:	31 2c       	mov	r3, r1
 6cc:	20 e0       	ldi	r18, 0x00	; 0
 6ce:	20 32       	cpi	r18, 0x20	; 32
 6d0:	a0 f4       	brcc	.+40     	; 0x6fa <vfprintf+0x88>
 6d2:	8b 32       	cpi	r24, 0x2B	; 43
 6d4:	69 f0       	breq	.+26     	; 0x6f0 <vfprintf+0x7e>
 6d6:	30 f4       	brcc	.+12     	; 0x6e4 <vfprintf+0x72>
 6d8:	80 32       	cpi	r24, 0x20	; 32
 6da:	59 f0       	breq	.+22     	; 0x6f2 <vfprintf+0x80>
 6dc:	83 32       	cpi	r24, 0x23	; 35
 6de:	69 f4       	brne	.+26     	; 0x6fa <vfprintf+0x88>
 6e0:	20 61       	ori	r18, 0x10	; 16
 6e2:	2c c0       	rjmp	.+88     	; 0x73c <vfprintf+0xca>
 6e4:	8d 32       	cpi	r24, 0x2D	; 45
 6e6:	39 f0       	breq	.+14     	; 0x6f6 <vfprintf+0x84>
 6e8:	80 33       	cpi	r24, 0x30	; 48
 6ea:	39 f4       	brne	.+14     	; 0x6fa <vfprintf+0x88>
 6ec:	21 60       	ori	r18, 0x01	; 1
 6ee:	26 c0       	rjmp	.+76     	; 0x73c <vfprintf+0xca>
 6f0:	22 60       	ori	r18, 0x02	; 2
 6f2:	24 60       	ori	r18, 0x04	; 4
 6f4:	23 c0       	rjmp	.+70     	; 0x73c <vfprintf+0xca>
 6f6:	28 60       	ori	r18, 0x08	; 8
 6f8:	21 c0       	rjmp	.+66     	; 0x73c <vfprintf+0xca>
 6fa:	27 fd       	sbrc	r18, 7
 6fc:	27 c0       	rjmp	.+78     	; 0x74c <vfprintf+0xda>
 6fe:	30 ed       	ldi	r19, 0xD0	; 208
 700:	38 0f       	add	r19, r24
 702:	3a 30       	cpi	r19, 0x0A	; 10
 704:	78 f4       	brcc	.+30     	; 0x724 <vfprintf+0xb2>
 706:	26 ff       	sbrs	r18, 6
 708:	06 c0       	rjmp	.+12     	; 0x716 <vfprintf+0xa4>
 70a:	fa e0       	ldi	r31, 0x0A	; 10
 70c:	5f 9e       	mul	r5, r31
 70e:	30 0d       	add	r19, r0
 710:	11 24       	eor	r1, r1
 712:	53 2e       	mov	r5, r19
 714:	13 c0       	rjmp	.+38     	; 0x73c <vfprintf+0xca>
 716:	8a e0       	ldi	r24, 0x0A	; 10
 718:	38 9e       	mul	r3, r24
 71a:	30 0d       	add	r19, r0
 71c:	11 24       	eor	r1, r1
 71e:	33 2e       	mov	r3, r19
 720:	20 62       	ori	r18, 0x20	; 32
 722:	0c c0       	rjmp	.+24     	; 0x73c <vfprintf+0xca>
 724:	8e 32       	cpi	r24, 0x2E	; 46
 726:	21 f4       	brne	.+8      	; 0x730 <vfprintf+0xbe>
 728:	26 fd       	sbrc	r18, 6
 72a:	6b c1       	rjmp	.+726    	; 0xa02 <vfprintf+0x390>
 72c:	20 64       	ori	r18, 0x40	; 64
 72e:	06 c0       	rjmp	.+12     	; 0x73c <vfprintf+0xca>
 730:	8c 36       	cpi	r24, 0x6C	; 108
 732:	11 f4       	brne	.+4      	; 0x738 <vfprintf+0xc6>
 734:	20 68       	ori	r18, 0x80	; 128
 736:	02 c0       	rjmp	.+4      	; 0x73c <vfprintf+0xca>
 738:	88 36       	cpi	r24, 0x68	; 104
 73a:	41 f4       	brne	.+16     	; 0x74c <vfprintf+0xda>
 73c:	f6 01       	movw	r30, r12
 73e:	93 fd       	sbrc	r25, 3
 740:	85 91       	lpm	r24, Z+
 742:	93 ff       	sbrs	r25, 3
 744:	81 91       	ld	r24, Z+
 746:	6f 01       	movw	r12, r30
 748:	81 11       	cpse	r24, r1
 74a:	c1 cf       	rjmp	.-126    	; 0x6ce <vfprintf+0x5c>
 74c:	98 2f       	mov	r25, r24
 74e:	9f 7d       	andi	r25, 0xDF	; 223
 750:	95 54       	subi	r25, 0x45	; 69
 752:	93 30       	cpi	r25, 0x03	; 3
 754:	28 f4       	brcc	.+10     	; 0x760 <vfprintf+0xee>
 756:	0c 5f       	subi	r16, 0xFC	; 252
 758:	1f 4f       	sbci	r17, 0xFF	; 255
 75a:	ff e3       	ldi	r31, 0x3F	; 63
 75c:	f9 83       	std	Y+1, r31	; 0x01
 75e:	0d c0       	rjmp	.+26     	; 0x77a <vfprintf+0x108>
 760:	83 36       	cpi	r24, 0x63	; 99
 762:	31 f0       	breq	.+12     	; 0x770 <vfprintf+0xfe>
 764:	83 37       	cpi	r24, 0x73	; 115
 766:	71 f0       	breq	.+28     	; 0x784 <vfprintf+0x112>
 768:	83 35       	cpi	r24, 0x53	; 83
 76a:	09 f0       	breq	.+2      	; 0x76e <vfprintf+0xfc>
 76c:	5b c0       	rjmp	.+182    	; 0x824 <vfprintf+0x1b2>
 76e:	22 c0       	rjmp	.+68     	; 0x7b4 <vfprintf+0x142>
 770:	f8 01       	movw	r30, r16
 772:	80 81       	ld	r24, Z
 774:	89 83       	std	Y+1, r24	; 0x01
 776:	0e 5f       	subi	r16, 0xFE	; 254
 778:	1f 4f       	sbci	r17, 0xFF	; 255
 77a:	44 24       	eor	r4, r4
 77c:	43 94       	inc	r4
 77e:	51 2c       	mov	r5, r1
 780:	54 01       	movw	r10, r8
 782:	15 c0       	rjmp	.+42     	; 0x7ae <vfprintf+0x13c>
 784:	38 01       	movw	r6, r16
 786:	f2 e0       	ldi	r31, 0x02	; 2
 788:	6f 0e       	add	r6, r31
 78a:	71 1c       	adc	r7, r1
 78c:	f8 01       	movw	r30, r16
 78e:	a0 80       	ld	r10, Z
 790:	b1 80       	ldd	r11, Z+1	; 0x01
 792:	26 ff       	sbrs	r18, 6
 794:	03 c0       	rjmp	.+6      	; 0x79c <vfprintf+0x12a>
 796:	65 2d       	mov	r22, r5
 798:	70 e0       	ldi	r23, 0x00	; 0
 79a:	02 c0       	rjmp	.+4      	; 0x7a0 <vfprintf+0x12e>
 79c:	6f ef       	ldi	r22, 0xFF	; 255
 79e:	7f ef       	ldi	r23, 0xFF	; 255
 7a0:	c5 01       	movw	r24, r10
 7a2:	2c 87       	std	Y+12, r18	; 0x0c
 7a4:	0e 94 16 05 	call	0xa2c	; 0xa2c <strnlen>
 7a8:	2c 01       	movw	r4, r24
 7aa:	83 01       	movw	r16, r6
 7ac:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ae:	2f 77       	andi	r18, 0x7F	; 127
 7b0:	22 2e       	mov	r2, r18
 7b2:	17 c0       	rjmp	.+46     	; 0x7e2 <vfprintf+0x170>
 7b4:	38 01       	movw	r6, r16
 7b6:	f2 e0       	ldi	r31, 0x02	; 2
 7b8:	6f 0e       	add	r6, r31
 7ba:	71 1c       	adc	r7, r1
 7bc:	f8 01       	movw	r30, r16
 7be:	a0 80       	ld	r10, Z
 7c0:	b1 80       	ldd	r11, Z+1	; 0x01
 7c2:	26 ff       	sbrs	r18, 6
 7c4:	03 c0       	rjmp	.+6      	; 0x7cc <vfprintf+0x15a>
 7c6:	65 2d       	mov	r22, r5
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0x15e>
 7cc:	6f ef       	ldi	r22, 0xFF	; 255
 7ce:	7f ef       	ldi	r23, 0xFF	; 255
 7d0:	c5 01       	movw	r24, r10
 7d2:	2c 87       	std	Y+12, r18	; 0x0c
 7d4:	0e 94 0b 05 	call	0xa16	; 0xa16 <strnlen_P>
 7d8:	2c 01       	movw	r4, r24
 7da:	2c 85       	ldd	r18, Y+12	; 0x0c
 7dc:	20 68       	ori	r18, 0x80	; 128
 7de:	22 2e       	mov	r2, r18
 7e0:	83 01       	movw	r16, r6
 7e2:	23 fc       	sbrc	r2, 3
 7e4:	1b c0       	rjmp	.+54     	; 0x81c <vfprintf+0x1aa>
 7e6:	83 2d       	mov	r24, r3
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	48 16       	cp	r4, r24
 7ec:	59 06       	cpc	r5, r25
 7ee:	b0 f4       	brcc	.+44     	; 0x81c <vfprintf+0x1aa>
 7f0:	b7 01       	movw	r22, r14
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 7fa:	3a 94       	dec	r3
 7fc:	f4 cf       	rjmp	.-24     	; 0x7e6 <vfprintf+0x174>
 7fe:	f5 01       	movw	r30, r10
 800:	27 fc       	sbrc	r2, 7
 802:	85 91       	lpm	r24, Z+
 804:	27 fe       	sbrs	r2, 7
 806:	81 91       	ld	r24, Z+
 808:	5f 01       	movw	r10, r30
 80a:	b7 01       	movw	r22, r14
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 812:	31 10       	cpse	r3, r1
 814:	3a 94       	dec	r3
 816:	f1 e0       	ldi	r31, 0x01	; 1
 818:	4f 1a       	sub	r4, r31
 81a:	51 08       	sbc	r5, r1
 81c:	41 14       	cp	r4, r1
 81e:	51 04       	cpc	r5, r1
 820:	71 f7       	brne	.-36     	; 0x7fe <vfprintf+0x18c>
 822:	e5 c0       	rjmp	.+458    	; 0x9ee <vfprintf+0x37c>
 824:	84 36       	cpi	r24, 0x64	; 100
 826:	11 f0       	breq	.+4      	; 0x82c <vfprintf+0x1ba>
 828:	89 36       	cpi	r24, 0x69	; 105
 82a:	39 f5       	brne	.+78     	; 0x87a <vfprintf+0x208>
 82c:	f8 01       	movw	r30, r16
 82e:	27 ff       	sbrs	r18, 7
 830:	07 c0       	rjmp	.+14     	; 0x840 <vfprintf+0x1ce>
 832:	60 81       	ld	r22, Z
 834:	71 81       	ldd	r23, Z+1	; 0x01
 836:	82 81       	ldd	r24, Z+2	; 0x02
 838:	93 81       	ldd	r25, Z+3	; 0x03
 83a:	0c 5f       	subi	r16, 0xFC	; 252
 83c:	1f 4f       	sbci	r17, 0xFF	; 255
 83e:	08 c0       	rjmp	.+16     	; 0x850 <vfprintf+0x1de>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	07 2e       	mov	r0, r23
 846:	00 0c       	add	r0, r0
 848:	88 0b       	sbc	r24, r24
 84a:	99 0b       	sbc	r25, r25
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	2f 76       	andi	r18, 0x6F	; 111
 852:	72 2e       	mov	r7, r18
 854:	97 ff       	sbrs	r25, 7
 856:	09 c0       	rjmp	.+18     	; 0x86a <vfprintf+0x1f8>
 858:	90 95       	com	r25
 85a:	80 95       	com	r24
 85c:	70 95       	com	r23
 85e:	61 95       	neg	r22
 860:	7f 4f       	sbci	r23, 0xFF	; 255
 862:	8f 4f       	sbci	r24, 0xFF	; 255
 864:	9f 4f       	sbci	r25, 0xFF	; 255
 866:	20 68       	ori	r18, 0x80	; 128
 868:	72 2e       	mov	r7, r18
 86a:	2a e0       	ldi	r18, 0x0A	; 10
 86c:	30 e0       	ldi	r19, 0x00	; 0
 86e:	a4 01       	movw	r20, r8
 870:	0e 94 59 05 	call	0xab2	; 0xab2 <__ultoa_invert>
 874:	a8 2e       	mov	r10, r24
 876:	a8 18       	sub	r10, r8
 878:	44 c0       	rjmp	.+136    	; 0x902 <vfprintf+0x290>
 87a:	85 37       	cpi	r24, 0x75	; 117
 87c:	29 f4       	brne	.+10     	; 0x888 <vfprintf+0x216>
 87e:	2f 7e       	andi	r18, 0xEF	; 239
 880:	b2 2e       	mov	r11, r18
 882:	2a e0       	ldi	r18, 0x0A	; 10
 884:	30 e0       	ldi	r19, 0x00	; 0
 886:	25 c0       	rjmp	.+74     	; 0x8d2 <vfprintf+0x260>
 888:	f2 2f       	mov	r31, r18
 88a:	f9 7f       	andi	r31, 0xF9	; 249
 88c:	bf 2e       	mov	r11, r31
 88e:	8f 36       	cpi	r24, 0x6F	; 111
 890:	c1 f0       	breq	.+48     	; 0x8c2 <vfprintf+0x250>
 892:	18 f4       	brcc	.+6      	; 0x89a <vfprintf+0x228>
 894:	88 35       	cpi	r24, 0x58	; 88
 896:	79 f0       	breq	.+30     	; 0x8b6 <vfprintf+0x244>
 898:	b4 c0       	rjmp	.+360    	; 0xa02 <vfprintf+0x390>
 89a:	80 37       	cpi	r24, 0x70	; 112
 89c:	19 f0       	breq	.+6      	; 0x8a4 <vfprintf+0x232>
 89e:	88 37       	cpi	r24, 0x78	; 120
 8a0:	21 f0       	breq	.+8      	; 0x8aa <vfprintf+0x238>
 8a2:	af c0       	rjmp	.+350    	; 0xa02 <vfprintf+0x390>
 8a4:	2f 2f       	mov	r18, r31
 8a6:	20 61       	ori	r18, 0x10	; 16
 8a8:	b2 2e       	mov	r11, r18
 8aa:	b4 fe       	sbrs	r11, 4
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <vfprintf+0x256>
 8ae:	8b 2d       	mov	r24, r11
 8b0:	84 60       	ori	r24, 0x04	; 4
 8b2:	b8 2e       	mov	r11, r24
 8b4:	09 c0       	rjmp	.+18     	; 0x8c8 <vfprintf+0x256>
 8b6:	24 ff       	sbrs	r18, 4
 8b8:	0a c0       	rjmp	.+20     	; 0x8ce <vfprintf+0x25c>
 8ba:	9f 2f       	mov	r25, r31
 8bc:	96 60       	ori	r25, 0x06	; 6
 8be:	b9 2e       	mov	r11, r25
 8c0:	06 c0       	rjmp	.+12     	; 0x8ce <vfprintf+0x25c>
 8c2:	28 e0       	ldi	r18, 0x08	; 8
 8c4:	30 e0       	ldi	r19, 0x00	; 0
 8c6:	05 c0       	rjmp	.+10     	; 0x8d2 <vfprintf+0x260>
 8c8:	20 e1       	ldi	r18, 0x10	; 16
 8ca:	30 e0       	ldi	r19, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x260>
 8ce:	20 e1       	ldi	r18, 0x10	; 16
 8d0:	32 e0       	ldi	r19, 0x02	; 2
 8d2:	f8 01       	movw	r30, r16
 8d4:	b7 fe       	sbrs	r11, 7
 8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <vfprintf+0x274>
 8d8:	60 81       	ld	r22, Z
 8da:	71 81       	ldd	r23, Z+1	; 0x01
 8dc:	82 81       	ldd	r24, Z+2	; 0x02
 8de:	93 81       	ldd	r25, Z+3	; 0x03
 8e0:	0c 5f       	subi	r16, 0xFC	; 252
 8e2:	1f 4f       	sbci	r17, 0xFF	; 255
 8e4:	06 c0       	rjmp	.+12     	; 0x8f2 <vfprintf+0x280>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	80 e0       	ldi	r24, 0x00	; 0
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 5f       	subi	r16, 0xFE	; 254
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	a4 01       	movw	r20, r8
 8f4:	0e 94 59 05 	call	0xab2	; 0xab2 <__ultoa_invert>
 8f8:	a8 2e       	mov	r10, r24
 8fa:	a8 18       	sub	r10, r8
 8fc:	fb 2d       	mov	r31, r11
 8fe:	ff 77       	andi	r31, 0x7F	; 127
 900:	7f 2e       	mov	r7, r31
 902:	76 fe       	sbrs	r7, 6
 904:	0b c0       	rjmp	.+22     	; 0x91c <vfprintf+0x2aa>
 906:	37 2d       	mov	r19, r7
 908:	3e 7f       	andi	r19, 0xFE	; 254
 90a:	a5 14       	cp	r10, r5
 90c:	50 f4       	brcc	.+20     	; 0x922 <vfprintf+0x2b0>
 90e:	74 fe       	sbrs	r7, 4
 910:	0a c0       	rjmp	.+20     	; 0x926 <vfprintf+0x2b4>
 912:	72 fc       	sbrc	r7, 2
 914:	08 c0       	rjmp	.+16     	; 0x926 <vfprintf+0x2b4>
 916:	37 2d       	mov	r19, r7
 918:	3e 7e       	andi	r19, 0xEE	; 238
 91a:	05 c0       	rjmp	.+10     	; 0x926 <vfprintf+0x2b4>
 91c:	ba 2c       	mov	r11, r10
 91e:	37 2d       	mov	r19, r7
 920:	03 c0       	rjmp	.+6      	; 0x928 <vfprintf+0x2b6>
 922:	ba 2c       	mov	r11, r10
 924:	01 c0       	rjmp	.+2      	; 0x928 <vfprintf+0x2b6>
 926:	b5 2c       	mov	r11, r5
 928:	34 ff       	sbrs	r19, 4
 92a:	0d c0       	rjmp	.+26     	; 0x946 <vfprintf+0x2d4>
 92c:	fe 01       	movw	r30, r28
 92e:	ea 0d       	add	r30, r10
 930:	f1 1d       	adc	r31, r1
 932:	80 81       	ld	r24, Z
 934:	80 33       	cpi	r24, 0x30	; 48
 936:	11 f4       	brne	.+4      	; 0x93c <vfprintf+0x2ca>
 938:	39 7e       	andi	r19, 0xE9	; 233
 93a:	09 c0       	rjmp	.+18     	; 0x94e <vfprintf+0x2dc>
 93c:	32 ff       	sbrs	r19, 2
 93e:	06 c0       	rjmp	.+12     	; 0x94c <vfprintf+0x2da>
 940:	b3 94       	inc	r11
 942:	b3 94       	inc	r11
 944:	04 c0       	rjmp	.+8      	; 0x94e <vfprintf+0x2dc>
 946:	83 2f       	mov	r24, r19
 948:	86 78       	andi	r24, 0x86	; 134
 94a:	09 f0       	breq	.+2      	; 0x94e <vfprintf+0x2dc>
 94c:	b3 94       	inc	r11
 94e:	33 fd       	sbrc	r19, 3
 950:	13 c0       	rjmp	.+38     	; 0x978 <vfprintf+0x306>
 952:	30 ff       	sbrs	r19, 0
 954:	06 c0       	rjmp	.+12     	; 0x962 <vfprintf+0x2f0>
 956:	5a 2c       	mov	r5, r10
 958:	b3 14       	cp	r11, r3
 95a:	18 f4       	brcc	.+6      	; 0x962 <vfprintf+0x2f0>
 95c:	53 0c       	add	r5, r3
 95e:	5b 18       	sub	r5, r11
 960:	b3 2c       	mov	r11, r3
 962:	b3 14       	cp	r11, r3
 964:	68 f4       	brcc	.+26     	; 0x980 <vfprintf+0x30e>
 966:	b7 01       	movw	r22, r14
 968:	80 e2       	ldi	r24, 0x20	; 32
 96a:	90 e0       	ldi	r25, 0x00	; 0
 96c:	3c 87       	std	Y+12, r19	; 0x0c
 96e:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 972:	b3 94       	inc	r11
 974:	3c 85       	ldd	r19, Y+12	; 0x0c
 976:	f5 cf       	rjmp	.-22     	; 0x962 <vfprintf+0x2f0>
 978:	b3 14       	cp	r11, r3
 97a:	10 f4       	brcc	.+4      	; 0x980 <vfprintf+0x30e>
 97c:	3b 18       	sub	r3, r11
 97e:	01 c0       	rjmp	.+2      	; 0x982 <vfprintf+0x310>
 980:	31 2c       	mov	r3, r1
 982:	34 ff       	sbrs	r19, 4
 984:	12 c0       	rjmp	.+36     	; 0x9aa <vfprintf+0x338>
 986:	b7 01       	movw	r22, r14
 988:	80 e3       	ldi	r24, 0x30	; 48
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	3c 87       	std	Y+12, r19	; 0x0c
 98e:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 992:	3c 85       	ldd	r19, Y+12	; 0x0c
 994:	32 ff       	sbrs	r19, 2
 996:	17 c0       	rjmp	.+46     	; 0x9c6 <vfprintf+0x354>
 998:	31 fd       	sbrc	r19, 1
 99a:	03 c0       	rjmp	.+6      	; 0x9a2 <vfprintf+0x330>
 99c:	88 e7       	ldi	r24, 0x78	; 120
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <vfprintf+0x334>
 9a2:	88 e5       	ldi	r24, 0x58	; 88
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	b7 01       	movw	r22, r14
 9a8:	0c c0       	rjmp	.+24     	; 0x9c2 <vfprintf+0x350>
 9aa:	83 2f       	mov	r24, r19
 9ac:	86 78       	andi	r24, 0x86	; 134
 9ae:	59 f0       	breq	.+22     	; 0x9c6 <vfprintf+0x354>
 9b0:	31 ff       	sbrs	r19, 1
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x346>
 9b4:	8b e2       	ldi	r24, 0x2B	; 43
 9b6:	01 c0       	rjmp	.+2      	; 0x9ba <vfprintf+0x348>
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	37 fd       	sbrc	r19, 7
 9bc:	8d e2       	ldi	r24, 0x2D	; 45
 9be:	b7 01       	movw	r22, r14
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9c6:	a5 14       	cp	r10, r5
 9c8:	38 f4       	brcc	.+14     	; 0x9d8 <vfprintf+0x366>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e3       	ldi	r24, 0x30	; 48
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9d4:	5a 94       	dec	r5
 9d6:	f7 cf       	rjmp	.-18     	; 0x9c6 <vfprintf+0x354>
 9d8:	aa 94       	dec	r10
 9da:	f4 01       	movw	r30, r8
 9dc:	ea 0d       	add	r30, r10
 9de:	f1 1d       	adc	r31, r1
 9e0:	80 81       	ld	r24, Z
 9e2:	b7 01       	movw	r22, r14
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9ea:	a1 10       	cpse	r10, r1
 9ec:	f5 cf       	rjmp	.-22     	; 0x9d8 <vfprintf+0x366>
 9ee:	33 20       	and	r3, r3
 9f0:	09 f4       	brne	.+2      	; 0x9f4 <vfprintf+0x382>
 9f2:	51 ce       	rjmp	.-862    	; 0x696 <vfprintf+0x24>
 9f4:	b7 01       	movw	r22, r14
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	0e 94 21 05 	call	0xa42	; 0xa42 <fputc>
 9fe:	3a 94       	dec	r3
 a00:	f6 cf       	rjmp	.-20     	; 0x9ee <vfprintf+0x37c>
 a02:	f7 01       	movw	r30, r14
 a04:	86 81       	ldd	r24, Z+6	; 0x06
 a06:	97 81       	ldd	r25, Z+7	; 0x07
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <vfprintf+0x39c>
 a0a:	8f ef       	ldi	r24, 0xFF	; 255
 a0c:	9f ef       	ldi	r25, 0xFF	; 255
 a0e:	2c 96       	adiw	r28, 0x0c	; 12
 a10:	e2 e1       	ldi	r30, 0x12	; 18
 a12:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__epilogue_restores__>

00000a16 <strnlen_P>:
 a16:	fc 01       	movw	r30, r24
 a18:	05 90       	lpm	r0, Z+
 a1a:	61 50       	subi	r22, 0x01	; 1
 a1c:	70 40       	sbci	r23, 0x00	; 0
 a1e:	01 10       	cpse	r0, r1
 a20:	d8 f7       	brcc	.-10     	; 0xa18 <strnlen_P+0x2>
 a22:	80 95       	com	r24
 a24:	90 95       	com	r25
 a26:	8e 0f       	add	r24, r30
 a28:	9f 1f       	adc	r25, r31
 a2a:	08 95       	ret

00000a2c <strnlen>:
 a2c:	fc 01       	movw	r30, r24
 a2e:	61 50       	subi	r22, 0x01	; 1
 a30:	70 40       	sbci	r23, 0x00	; 0
 a32:	01 90       	ld	r0, Z+
 a34:	01 10       	cpse	r0, r1
 a36:	d8 f7       	brcc	.-10     	; 0xa2e <strnlen+0x2>
 a38:	80 95       	com	r24
 a3a:	90 95       	com	r25
 a3c:	8e 0f       	add	r24, r30
 a3e:	9f 1f       	adc	r25, r31
 a40:	08 95       	ret

00000a42 <fputc>:
 a42:	0f 93       	push	r16
 a44:	1f 93       	push	r17
 a46:	cf 93       	push	r28
 a48:	df 93       	push	r29
 a4a:	fb 01       	movw	r30, r22
 a4c:	23 81       	ldd	r18, Z+3	; 0x03
 a4e:	21 fd       	sbrc	r18, 1
 a50:	03 c0       	rjmp	.+6      	; 0xa58 <fputc+0x16>
 a52:	8f ef       	ldi	r24, 0xFF	; 255
 a54:	9f ef       	ldi	r25, 0xFF	; 255
 a56:	28 c0       	rjmp	.+80     	; 0xaa8 <fputc+0x66>
 a58:	22 ff       	sbrs	r18, 2
 a5a:	16 c0       	rjmp	.+44     	; 0xa88 <fputc+0x46>
 a5c:	46 81       	ldd	r20, Z+6	; 0x06
 a5e:	57 81       	ldd	r21, Z+7	; 0x07
 a60:	24 81       	ldd	r18, Z+4	; 0x04
 a62:	35 81       	ldd	r19, Z+5	; 0x05
 a64:	42 17       	cp	r20, r18
 a66:	53 07       	cpc	r21, r19
 a68:	44 f4       	brge	.+16     	; 0xa7a <fputc+0x38>
 a6a:	a0 81       	ld	r26, Z
 a6c:	b1 81       	ldd	r27, Z+1	; 0x01
 a6e:	9d 01       	movw	r18, r26
 a70:	2f 5f       	subi	r18, 0xFF	; 255
 a72:	3f 4f       	sbci	r19, 0xFF	; 255
 a74:	31 83       	std	Z+1, r19	; 0x01
 a76:	20 83       	st	Z, r18
 a78:	8c 93       	st	X, r24
 a7a:	26 81       	ldd	r18, Z+6	; 0x06
 a7c:	37 81       	ldd	r19, Z+7	; 0x07
 a7e:	2f 5f       	subi	r18, 0xFF	; 255
 a80:	3f 4f       	sbci	r19, 0xFF	; 255
 a82:	37 83       	std	Z+7, r19	; 0x07
 a84:	26 83       	std	Z+6, r18	; 0x06
 a86:	10 c0       	rjmp	.+32     	; 0xaa8 <fputc+0x66>
 a88:	eb 01       	movw	r28, r22
 a8a:	09 2f       	mov	r16, r25
 a8c:	18 2f       	mov	r17, r24
 a8e:	00 84       	ldd	r0, Z+8	; 0x08
 a90:	f1 85       	ldd	r31, Z+9	; 0x09
 a92:	e0 2d       	mov	r30, r0
 a94:	09 95       	icall
 a96:	89 2b       	or	r24, r25
 a98:	e1 f6       	brne	.-72     	; 0xa52 <fputc+0x10>
 a9a:	8e 81       	ldd	r24, Y+6	; 0x06
 a9c:	9f 81       	ldd	r25, Y+7	; 0x07
 a9e:	01 96       	adiw	r24, 0x01	; 1
 aa0:	9f 83       	std	Y+7, r25	; 0x07
 aa2:	8e 83       	std	Y+6, r24	; 0x06
 aa4:	81 2f       	mov	r24, r17
 aa6:	90 2f       	mov	r25, r16
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <__ultoa_invert>:
 ab2:	fa 01       	movw	r30, r20
 ab4:	aa 27       	eor	r26, r26
 ab6:	28 30       	cpi	r18, 0x08	; 8
 ab8:	51 f1       	breq	.+84     	; 0xb0e <__ultoa_invert+0x5c>
 aba:	20 31       	cpi	r18, 0x10	; 16
 abc:	81 f1       	breq	.+96     	; 0xb1e <__ultoa_invert+0x6c>
 abe:	e8 94       	clt
 ac0:	6f 93       	push	r22
 ac2:	6e 7f       	andi	r22, 0xFE	; 254
 ac4:	6e 5f       	subi	r22, 0xFE	; 254
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	af 4f       	sbci	r26, 0xFF	; 255
 ace:	b1 e0       	ldi	r27, 0x01	; 1
 ad0:	3e d0       	rcall	.+124    	; 0xb4e <__ultoa_invert+0x9c>
 ad2:	b4 e0       	ldi	r27, 0x04	; 4
 ad4:	3c d0       	rcall	.+120    	; 0xb4e <__ultoa_invert+0x9c>
 ad6:	67 0f       	add	r22, r23
 ad8:	78 1f       	adc	r23, r24
 ada:	89 1f       	adc	r24, r25
 adc:	9a 1f       	adc	r25, r26
 ade:	a1 1d       	adc	r26, r1
 ae0:	68 0f       	add	r22, r24
 ae2:	79 1f       	adc	r23, r25
 ae4:	8a 1f       	adc	r24, r26
 ae6:	91 1d       	adc	r25, r1
 ae8:	a1 1d       	adc	r26, r1
 aea:	6a 0f       	add	r22, r26
 aec:	71 1d       	adc	r23, r1
 aee:	81 1d       	adc	r24, r1
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	20 d0       	rcall	.+64     	; 0xb36 <__ultoa_invert+0x84>
 af6:	09 f4       	brne	.+2      	; 0xafa <__ultoa_invert+0x48>
 af8:	68 94       	set
 afa:	3f 91       	pop	r19
 afc:	2a e0       	ldi	r18, 0x0A	; 10
 afe:	26 9f       	mul	r18, r22
 b00:	11 24       	eor	r1, r1
 b02:	30 19       	sub	r19, r0
 b04:	30 5d       	subi	r19, 0xD0	; 208
 b06:	31 93       	st	Z+, r19
 b08:	de f6       	brtc	.-74     	; 0xac0 <__ultoa_invert+0xe>
 b0a:	cf 01       	movw	r24, r30
 b0c:	08 95       	ret
 b0e:	46 2f       	mov	r20, r22
 b10:	47 70       	andi	r20, 0x07	; 7
 b12:	40 5d       	subi	r20, 0xD0	; 208
 b14:	41 93       	st	Z+, r20
 b16:	b3 e0       	ldi	r27, 0x03	; 3
 b18:	0f d0       	rcall	.+30     	; 0xb38 <__ultoa_invert+0x86>
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x5c>
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <__ultoa_invert+0x58>
 b1e:	46 2f       	mov	r20, r22
 b20:	4f 70       	andi	r20, 0x0F	; 15
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	4a 33       	cpi	r20, 0x3A	; 58
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__ultoa_invert+0x7c>
 b28:	49 5d       	subi	r20, 0xD9	; 217
 b2a:	31 fd       	sbrc	r19, 1
 b2c:	40 52       	subi	r20, 0x20	; 32
 b2e:	41 93       	st	Z+, r20
 b30:	02 d0       	rcall	.+4      	; 0xb36 <__ultoa_invert+0x84>
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__ultoa_invert+0x6c>
 b34:	ea cf       	rjmp	.-44     	; 0xb0a <__ultoa_invert+0x58>
 b36:	b4 e0       	ldi	r27, 0x04	; 4
 b38:	a6 95       	lsr	r26
 b3a:	97 95       	ror	r25
 b3c:	87 95       	ror	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	ba 95       	dec	r27
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__ultoa_invert+0x86>
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	61 05       	cpc	r22, r1
 b4a:	71 05       	cpc	r23, r1
 b4c:	08 95       	ret
 b4e:	9b 01       	movw	r18, r22
 b50:	ac 01       	movw	r20, r24
 b52:	0a 2e       	mov	r0, r26
 b54:	06 94       	lsr	r0
 b56:	57 95       	ror	r21
 b58:	47 95       	ror	r20
 b5a:	37 95       	ror	r19
 b5c:	27 95       	ror	r18
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__ultoa_invert+0xa2>
 b62:	62 0f       	add	r22, r18
 b64:	73 1f       	adc	r23, r19
 b66:	84 1f       	adc	r24, r20
 b68:	95 1f       	adc	r25, r21
 b6a:	a0 1d       	adc	r26, r0
 b6c:	08 95       	ret

00000b6e <__prologue_saves__>:
 b6e:	2f 92       	push	r2
 b70:	3f 92       	push	r3
 b72:	4f 92       	push	r4
 b74:	5f 92       	push	r5
 b76:	6f 92       	push	r6
 b78:	7f 92       	push	r7
 b7a:	8f 92       	push	r8
 b7c:	9f 92       	push	r9
 b7e:	af 92       	push	r10
 b80:	bf 92       	push	r11
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	ca 1b       	sub	r28, r26
 b98:	db 0b       	sbc	r29, r27
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	09 94       	ijmp

00000ba6 <__epilogue_restores__>:
 ba6:	2a 88       	ldd	r2, Y+18	; 0x12
 ba8:	39 88       	ldd	r3, Y+17	; 0x11
 baa:	48 88       	ldd	r4, Y+16	; 0x10
 bac:	5f 84       	ldd	r5, Y+15	; 0x0f
 bae:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb8:	b9 84       	ldd	r11, Y+9	; 0x09
 bba:	c8 84       	ldd	r12, Y+8	; 0x08
 bbc:	df 80       	ldd	r13, Y+7	; 0x07
 bbe:	ee 80       	ldd	r14, Y+6	; 0x06
 bc0:	fd 80       	ldd	r15, Y+5	; 0x05
 bc2:	0c 81       	ldd	r16, Y+4	; 0x04
 bc4:	1b 81       	ldd	r17, Y+3	; 0x03
 bc6:	aa 81       	ldd	r26, Y+2	; 0x02
 bc8:	b9 81       	ldd	r27, Y+1	; 0x01
 bca:	ce 0f       	add	r28, r30
 bcc:	d1 1d       	adc	r29, r1
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	ed 01       	movw	r28, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>

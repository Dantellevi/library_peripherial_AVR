
Project_Ds18b20_ILI9341.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000028c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000028c  00000320  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  0080006a  0080006a  0000032a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000035c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173a  00000000  00000000  00000500  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd6  00000000  00000000  00001c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b62  00000000  00000000  00002810  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c0  00000000  00000000  00003374  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000658  00000000  00000000  00003734  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d12  00000000  00000000  00003d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00004a9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e8       	ldi	r30, 0x8C	; 140
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3e       	cpi	r26, 0xEE	; 238
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 e6 00 	call	0x1cc	; 0x1cc <main>
  8a:	0c 94 44 01 	jmp	0x288	; 0x288 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  92:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <IndexIN>
  96:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  98:	ef 77       	andi	r30, 0x7F	; 127
  9a:	e0 93 6d 00 	sts	0x006D, r30	; 0x80006d <IndexIN>
		buffer[IndexIN] = val;
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	e2 59       	subi	r30, 0x92	; 146
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart_old = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
	uart_flag = 1;
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <uart_flag>
	InBuffer(uart_old);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <InBuffer>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <Lcd_Write_Index>:
	else
	{
		MAX_X = 319;
		MAX_Y = 239;
	}
}
  fc:	94 98       	cbi	0x12, 4	; 18
  fe:	96 9a       	sbi	0x12, 6	; 18
 100:	93 98       	cbi	0x12, 3	; 18
 102:	8b bb       	out	0x1b, r24	; 27
 104:	98 bb       	out	0x18, r25	; 24
 106:	95 98       	cbi	0x12, 5	; 18
 108:	8d e0       	ldi	r24, 0x0D	; 13
 10a:	8a 95       	dec	r24
 10c:	f1 f7       	brne	.-4      	; 0x10a <Lcd_Write_Index+0xe>
 10e:	00 00       	nop
 110:	95 9a       	sbi	0x12, 5	; 18
 112:	93 9a       	sbi	0x12, 3	; 18
 114:	08 95       	ret

00000116 <TFT_Write_Data16>:
 116:	94 9a       	sbi	0x12, 4	; 18
 118:	96 9a       	sbi	0x12, 6	; 18
 11a:	93 98       	cbi	0x12, 3	; 18
 11c:	95 98       	cbi	0x12, 5	; 18
 11e:	8b bb       	out	0x1b, r24	; 27
 120:	98 bb       	out	0x18, r25	; 24
 122:	8d e0       	ldi	r24, 0x0D	; 13
 124:	8a 95       	dec	r24
 126:	f1 f7       	brne	.-4      	; 0x124 <TFT_Write_Data16+0xe>
 128:	00 00       	nop
 12a:	95 9a       	sbi	0x12, 5	; 18
 12c:	93 9a       	sbi	0x12, 3	; 18
 12e:	08 95       	ret

00000130 <Lcd_Write_Reg>:
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	eb 01       	movw	r28, r22
 136:	93 98       	cbi	0x12, 3	; 18
 138:	0e 94 7e 00 	call	0xfc	; 0xfc <Lcd_Write_Index>
 13c:	ce 01       	movw	r24, r28
 13e:	0e 94 8b 00 	call	0x116	; 0x116 <TFT_Write_Data16>
 142:	93 9a       	sbi	0x12, 3	; 18
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <Init_ILI9341>:


void Init_ILI9341(uint8_t orient)
{
	//конфигурируем все используемые выводы как выходы
	DATA_DDR_0 = 0XFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	8a bb       	out	0x1a, r24	; 26
	DATA_DDR_8 = 0XFF;
 14e:	87 bb       	out	0x17, r24	; 23
	COMMAND_DDR|=(1<<LCD_RES)|(1<<LCD_CS)|(1<<LCD_DC)|(1<<LCD_WR)|(1<<LCD_RD);
 150:	81 b3       	in	r24, 0x11	; 17
 152:	8c 67       	ori	r24, 0x7C	; 124
 154:	81 bb       	out	0x11, r24	; 17
	
	
	COMMAND_PORT |= (1<<LCD_RES);
 156:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 158:	2f ef       	ldi	r18, 0xFF	; 255
 15a:	80 e7       	ldi	r24, 0x70	; 112
 15c:	92 e0       	ldi	r25, 0x02	; 2
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	80 40       	sbci	r24, 0x00	; 0
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	e1 f7       	brne	.-8      	; 0x15e <Init_ILI9341+0x14>
 166:	00 c0       	rjmp	.+0      	; 0x168 <Init_ILI9341+0x1e>
 168:	00 00       	nop
	_delay_ms(100);    //не большая задержка после включения
	
	
	Lcd_Write_Reg(0X0007, 0X0021);   //далее записываем в регистры значения
 16a:	61 e2       	ldi	r22, 0x21	; 33
 16c:	70 e0       	ldi	r23, 0x00	; 0
 16e:	87 e0       	ldi	r24, 0x07	; 7
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
	Lcd_Write_Reg(0X0000, 0X0001);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	70 e0       	ldi	r23, 0x00	; 0
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
	Lcd_Write_Reg(0X0007, 0X0023);
 182:	63 e2       	ldi	r22, 0x23	; 35
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	87 e0       	ldi	r24, 0x07	; 7
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
	Lcd_Write_Reg(0X0010, 0X0000);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	80 e1       	ldi	r24, 0x10	; 16
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
 19a:	8f e5       	ldi	r24, 0x5F	; 95
 19c:	9a ee       	ldi	r25, 0xEA	; 234
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <Init_ILI9341+0x54>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <Init_ILI9341+0x5a>
 1a4:	00 00       	nop
	_delay_ms(30);
	Lcd_Write_Reg(0X0007, 0X0033);
 1a6:	63 e3       	ldi	r22, 0x33	; 51
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	87 e0       	ldi	r24, 0x07	; 7
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
	Lcd_Write_Reg(0X0011, 0X6838);
 1b2:	68 e3       	ldi	r22, 0x38	; 56
 1b4:	78 e6       	ldi	r23, 0x68	; 104
 1b6:	81 e1       	ldi	r24, 0x11	; 17
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
	Lcd_Write_Reg(0X0002, 0X0600);
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	76 e0       	ldi	r23, 0x06	; 6
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 98 00 	call	0x130	; 0x130 <Lcd_Write_Reg>
 1ca:	08 95       	ret

000001cc <main>:

uint16_t MAX_X=0, MAX_Y = 0;

int main(void)
{
	Usart_Init(9600);
 1cc:	60 e8       	ldi	r22, 0x80	; 128
 1ce:	75 e2       	ldi	r23, 0x25	; 37
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <Usart_Init>
	Usart_PrintString("1-Wire\r\n");
 1d8:	80 e6       	ldi	r24, 0x60	; 96
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 13 01 	call	0x226	; 0x226 <Usart_PrintString>
    Init_ILI9341(3);
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 a5 00 	call	0x14a	; 0x14a <Init_ILI9341>
		//_delay_ms(1000);
		
		//_delay_ms(1000);
		//TFT_Read_Id();
		//_delay_ms(1000);
    }
 1e6:	ff cf       	rjmp	.-2      	; 0x1e6 <main+0x1a>

000001e8 <Usart_Init>:
		str++;
		i++;

	}

}
 1e8:	9b 01       	movw	r18, r22
 1ea:	ac 01       	movw	r20, r24
 1ec:	60 e2       	ldi	r22, 0x20	; 32
 1ee:	71 ea       	ldi	r23, 0xA1	; 161
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 22 01 	call	0x244	; 0x244 <__udivmodsi4>
 1f8:	da 01       	movw	r26, r20
 1fa:	c9 01       	movw	r24, r18
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	a1 09       	sbc	r26, r1
 200:	b1 09       	sbc	r27, r1
 202:	89 2f       	mov	r24, r25
 204:	9a 2f       	mov	r25, r26
 206:	ab 2f       	mov	r26, r27
 208:	bb 27       	eor	r27, r27
 20a:	80 bd       	out	0x20, r24	; 32
 20c:	21 50       	subi	r18, 0x01	; 1
 20e:	29 b9       	out	0x09, r18	; 9
 210:	1b b8       	out	0x0b, r1	; 11
 212:	8a b1       	in	r24, 0x0a	; 10
 214:	88 69       	ori	r24, 0x98	; 152
 216:	8a b9       	out	0x0a, r24	; 10
 218:	86 e8       	ldi	r24, 0x86	; 134
 21a:	80 bd       	out	0x20, r24	; 32
 21c:	08 95       	ret

0000021e <Usart_char_out>:
 21e:	5d 9b       	sbis	0x0b, 5	; 11
 220:	fe cf       	rjmp	.-4      	; 0x21e <Usart_char_out>
 222:	8c b9       	out	0x0c, r24	; 12
 224:	08 95       	ret

00000226 <Usart_PrintString>:

void Usart_PrintString(char *str)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	ec 01       	movw	r28, r24

	while(*str)
 22c:	88 81       	ld	r24, Y
 22e:	88 23       	and	r24, r24
 230:	31 f0       	breq	.+12     	; 0x23e <Usart_PrintString+0x18>
 232:	21 96       	adiw	r28, 0x01	; 1
	{
		Usart_char_out(*str++);
 234:	0e 94 0f 01 	call	0x21e	; 0x21e <Usart_char_out>
}

void Usart_PrintString(char *str)
{

	while(*str)
 238:	89 91       	ld	r24, Y+
 23a:	81 11       	cpse	r24, r1
 23c:	fb cf       	rjmp	.-10     	; 0x234 <Usart_PrintString+0xe>
	{
		Usart_char_out(*str++);
	
	}
	
}
 23e:	df 91       	pop	r29
 240:	cf 91       	pop	r28
 242:	08 95       	ret

00000244 <__udivmodsi4>:
 244:	a1 e2       	ldi	r26, 0x21	; 33
 246:	1a 2e       	mov	r1, r26
 248:	aa 1b       	sub	r26, r26
 24a:	bb 1b       	sub	r27, r27
 24c:	fd 01       	movw	r30, r26
 24e:	0d c0       	rjmp	.+26     	; 0x26a <__udivmodsi4_ep>

00000250 <__udivmodsi4_loop>:
 250:	aa 1f       	adc	r26, r26
 252:	bb 1f       	adc	r27, r27
 254:	ee 1f       	adc	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	a2 17       	cp	r26, r18
 25a:	b3 07       	cpc	r27, r19
 25c:	e4 07       	cpc	r30, r20
 25e:	f5 07       	cpc	r31, r21
 260:	20 f0       	brcs	.+8      	; 0x26a <__udivmodsi4_ep>
 262:	a2 1b       	sub	r26, r18
 264:	b3 0b       	sbc	r27, r19
 266:	e4 0b       	sbc	r30, r20
 268:	f5 0b       	sbc	r31, r21

0000026a <__udivmodsi4_ep>:
 26a:	66 1f       	adc	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	88 1f       	adc	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	1a 94       	dec	r1
 274:	69 f7       	brne	.-38     	; 0x250 <__udivmodsi4_loop>
 276:	60 95       	com	r22
 278:	70 95       	com	r23
 27a:	80 95       	com	r24
 27c:	90 95       	com	r25
 27e:	9b 01       	movw	r18, r22
 280:	ac 01       	movw	r20, r24
 282:	bd 01       	movw	r22, r26
 284:	cf 01       	movw	r24, r30
 286:	08 95       	ret

00000288 <_exit>:
 288:	f8 94       	cli

0000028a <__stop_program>:
 28a:	ff cf       	rjmp	.-2      	; 0x28a <__stop_program>

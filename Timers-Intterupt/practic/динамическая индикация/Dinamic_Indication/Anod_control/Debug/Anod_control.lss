
Anod_control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000292  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000306  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00800060  00800060  00000306  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000306  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000338  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006fa  00000000  00000000  000003d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005d6  00000000  00000000  00000ace  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003ed  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d0  00000000  00000000  00001494  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000342  00000000  00000000  00001564  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000213  00000000  00000000  000018a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	1c c0       	rjmp	.+56     	; 0x3a <__ctors_end>
   2:	2b c0       	rjmp	.+86     	; 0x5a <__bad_interrupt>
   4:	2a c0       	rjmp	.+84     	; 0x5a <__bad_interrupt>
   6:	29 c0       	rjmp	.+82     	; 0x5a <__bad_interrupt>
   8:	28 c0       	rjmp	.+80     	; 0x5a <__bad_interrupt>
   a:	27 c0       	rjmp	.+78     	; 0x5a <__bad_interrupt>
   c:	5a c0       	rjmp	.+180    	; 0xc2 <__vector_6>
   e:	25 c0       	rjmp	.+74     	; 0x5a <__bad_interrupt>
  10:	24 c0       	rjmp	.+72     	; 0x5a <__bad_interrupt>
  12:	23 c0       	rjmp	.+70     	; 0x5a <__bad_interrupt>
  14:	22 c0       	rjmp	.+68     	; 0x5a <__bad_interrupt>
  16:	21 c0       	rjmp	.+66     	; 0x5a <__bad_interrupt>
  18:	20 c0       	rjmp	.+64     	; 0x5a <__bad_interrupt>
  1a:	1f c0       	rjmp	.+62     	; 0x5a <__bad_interrupt>
  1c:	1e c0       	rjmp	.+60     	; 0x5a <__bad_interrupt>
  1e:	1d c0       	rjmp	.+58     	; 0x5a <__bad_interrupt>
  20:	1c c0       	rjmp	.+56     	; 0x5a <__bad_interrupt>
  22:	1b c0       	rjmp	.+54     	; 0x5a <__bad_interrupt>
  24:	1a c0       	rjmp	.+52     	; 0x5a <__bad_interrupt>
  26:	4a c0       	rjmp	.+148    	; 0xbc <segchar+0x46>
  28:	2e c0       	rjmp	.+92     	; 0x86 <segchar+0x10>
  2a:	30 c0       	rjmp	.+96     	; 0x8c <segchar+0x16>
  2c:	32 c0       	rjmp	.+100    	; 0x92 <segchar+0x1c>
  2e:	34 c0       	rjmp	.+104    	; 0x98 <segchar+0x22>
  30:	36 c0       	rjmp	.+108    	; 0x9e <segchar+0x28>
  32:	38 c0       	rjmp	.+112    	; 0xa4 <segchar+0x2e>
  34:	3a c0       	rjmp	.+116    	; 0xaa <segchar+0x34>
  36:	3c c0       	rjmp	.+120    	; 0xb0 <segchar+0x3a>
  38:	3e c0       	rjmp	.+124    	; 0xb6 <segchar+0x40>

0000003a <__ctors_end>:
  3a:	11 24       	eor	r1, r1
  3c:	1f be       	out	0x3f, r1	; 63
  3e:	cf e5       	ldi	r28, 0x5F	; 95
  40:	d4 e0       	ldi	r29, 0x04	; 4
  42:	de bf       	out	0x3e, r29	; 62
  44:	cd bf       	out	0x3d, r28	; 61

00000046 <__do_clear_bss>:
  46:	20 e0       	ldi	r18, 0x00	; 0
  48:	a0 e6       	ldi	r26, 0x60	; 96
  4a:	b0 e0       	ldi	r27, 0x00	; 0
  4c:	01 c0       	rjmp	.+2      	; 0x50 <.do_clear_bss_start>

0000004e <.do_clear_bss_loop>:
  4e:	1d 92       	st	X+, r1

00000050 <.do_clear_bss_start>:
  50:	a9 36       	cpi	r26, 0x69	; 105
  52:	b2 07       	cpc	r27, r18
  54:	e1 f7       	brne	.-8      	; 0x4e <.do_clear_bss_loop>
  56:	08 d0       	rcall	.+16     	; 0x68 <main>
  58:	1a c1       	rjmp	.+564    	; 0x28e <_exit>

0000005a <__bad_interrupt>:
  5a:	d2 cf       	rjmp	.-92     	; 0x0 <__vectors>

0000005c <Port_init>:

#include "Main.h"

void Port_init(void)
{
	DDRD=0xFF;
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	81 bb       	out	0x11, r24	; 17
	PORTD=0x00;
  60:	12 ba       	out	0x12, r1	; 18

	DDRC=0xFF;
  62:	84 bb       	out	0x14, r24	; 20
	PORTC=0x00;
  64:	15 ba       	out	0x15, r1	; 21
  66:	08 95       	ret

00000068 <main>:
}


int main(void)
{
   Port_init();
  68:	f9 df       	rcall	.-14     	; 0x5c <Port_init>
   Timer_init();
  6a:	f7 d0       	rcall	.+494    	; 0x25a <Timer_init>
   sei();
  6c:	78 94       	sei

   ledprint(1234);
  6e:	82 ed       	ldi	r24, 0xD2	; 210
  70:	94 e0       	ldi	r25, 0x04	; 4
  72:	7c d0       	rcall	.+248    	; 0x16c <ledprint>

    while (1) 
    {
    }
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0xc>

00000076 <segchar>:

}

void segchar (unsigned char seg)
{
	switch(seg)
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	8a 30       	cpi	r24, 0x0A	; 10
  7a:	91 05       	cpc	r25, r1
  7c:	08 f5       	brcc	.+66     	; 0xc0 <segchar+0x4a>
  7e:	fc 01       	movw	r30, r24
  80:	ed 5e       	subi	r30, 0xED	; 237
  82:	ff 4f       	sbci	r31, 0xFF	; 255
  84:	09 94       	ijmp
	{
		case 1: PORTD = 0b11111001; break;
  86:	89 ef       	ldi	r24, 0xF9	; 249
  88:	82 bb       	out	0x12, r24	; 18
  8a:	08 95       	ret
		case 2: PORTD = 0b10100100; break;
  8c:	84 ea       	ldi	r24, 0xA4	; 164
  8e:	82 bb       	out	0x12, r24	; 18
  90:	08 95       	ret
		case 3: PORTD = 0b10110000; break;
  92:	80 eb       	ldi	r24, 0xB0	; 176
  94:	82 bb       	out	0x12, r24	; 18
  96:	08 95       	ret
		case 4: PORTD = 0b10011001; break;
  98:	89 e9       	ldi	r24, 0x99	; 153
  9a:	82 bb       	out	0x12, r24	; 18
  9c:	08 95       	ret
		case 5: PORTD = 0b10010010; break;
  9e:	82 e9       	ldi	r24, 0x92	; 146
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret
		case 6: PORTD = 0b10000010; break;
  a4:	82 e8       	ldi	r24, 0x82	; 130
  a6:	82 bb       	out	0x12, r24	; 18
  a8:	08 95       	ret
		case 7: PORTD = 0b11111000; break;
  aa:	88 ef       	ldi	r24, 0xF8	; 248
  ac:	82 bb       	out	0x12, r24	; 18
  ae:	08 95       	ret
		case 8: PORTD = 0b10000000; break;
  b0:	80 e8       	ldi	r24, 0x80	; 128
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret
		case 9: PORTD = 0b10010000; break;
  b6:	80 e9       	ldi	r24, 0x90	; 144
  b8:	82 bb       	out	0x12, r24	; 18
  ba:	08 95       	ret
		case 0: PORTD = 0b11000000; break;
  bc:	80 ec       	ldi	r24, 0xC0	; 192
  be:	82 bb       	out	0x12, r24	; 18
  c0:	08 95       	ret

000000c2 <__vector_6>:
unsigned R1=0,R2=0,R3=0,R4=0;

unsigned char n_count=0;	//счетчик для прохода по порядкам числа и зажигания соответствующего порядка

ISR(TIMER1_COMPA_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
	
	if (n_count==0)
  e4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  e8:	81 11       	cpse	r24, r1
  ea:	08 c0       	rjmp	.+16     	; 0xfc <__vector_6+0x3a>
	{
		PORTC&=~(1<<PC0);
  ec:	a8 98       	cbi	0x15, 0	; 21
		PORTC|=(1<<PC1);
  ee:	a9 9a       	sbi	0x15, 1	; 21
		PORTC|=(1<<PC2);
  f0:	aa 9a       	sbi	0x15, 2	; 21
		PORTC|=(1<<PC3);
  f2:	ab 9a       	sbi	0x15, 3	; 21
		segchar(R1);
  f4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <R1>
  f8:	be df       	rcall	.-132    	; 0x76 <segchar>
  fa:	1d c0       	rjmp	.+58     	; 0x136 <__vector_6+0x74>

	}
	else if (n_count==1)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	41 f4       	brne	.+16     	; 0x110 <__vector_6+0x4e>
	{
		PORTC|=(1<<PC0);
 100:	a8 9a       	sbi	0x15, 0	; 21
		PORTC&=~(1<<PC1);
 102:	a9 98       	cbi	0x15, 1	; 21
		PORTC|=(1<<PC2);
 104:	aa 9a       	sbi	0x15, 2	; 21
		PORTC|=(1<<PC3);
 106:	ab 9a       	sbi	0x15, 3	; 21
		segchar(R2);
 108:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <R2>
 10c:	b4 df       	rcall	.-152    	; 0x76 <segchar>
 10e:	13 c0       	rjmp	.+38     	; 0x136 <__vector_6+0x74>
	}
	else if (n_count==2)
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	41 f4       	brne	.+16     	; 0x124 <__vector_6+0x62>
	{
		PORTC|=(1<<PC0);
 114:	a8 9a       	sbi	0x15, 0	; 21
		PORTC|=(1<<PC1);
 116:	a9 9a       	sbi	0x15, 1	; 21
		PORTC&=~(1<<PC2);
 118:	aa 98       	cbi	0x15, 2	; 21
		PORTC|=(1<<PC3);
 11a:	ab 9a       	sbi	0x15, 3	; 21
		segchar(R3);
 11c:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <R3>
 120:	aa df       	rcall	.-172    	; 0x76 <segchar>
 122:	09 c0       	rjmp	.+18     	; 0x136 <__vector_6+0x74>
	}
	else if (n_count==3)
 124:	83 30       	cpi	r24, 0x03	; 3
 126:	39 f4       	brne	.+14     	; 0x136 <__vector_6+0x74>
	{
		PORTC|=(1<<PC0);
 128:	a8 9a       	sbi	0x15, 0	; 21
		PORTC|=(1<<PC1);
 12a:	a9 9a       	sbi	0x15, 1	; 21
		PORTC|=(1<<PC2);
 12c:	aa 9a       	sbi	0x15, 2	; 21
		PORTC&=~(1<<PC3);
 12e:	ab 98       	cbi	0x15, 3	; 21
		segchar(R4);
 130:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <R4>
 134:	a0 df       	rcall	.-192    	; 0x76 <segchar>
	}
	n_count++;
 136:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 13a:	8f 5f       	subi	r24, 0xFF	; 255
	if (n_count>3)
 13c:	84 30       	cpi	r24, 0x04	; 4
 13e:	18 f4       	brcc	.+6      	; 0x146 <__vector_6+0x84>
		PORTC|=(1<<PC1);
		PORTC|=(1<<PC2);
		PORTC&=~(1<<PC3);
		segchar(R4);
	}
	n_count++;
 140:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 144:	02 c0       	rjmp	.+4      	; 0x14a <__vector_6+0x88>
	if (n_count>3)
	{
		n_count=0;
 146:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	}

}
 14a:	ff 91       	pop	r31
 14c:	ef 91       	pop	r30
 14e:	bf 91       	pop	r27
 150:	af 91       	pop	r26
 152:	9f 91       	pop	r25
 154:	8f 91       	pop	r24
 156:	7f 91       	pop	r23
 158:	6f 91       	pop	r22
 15a:	5f 91       	pop	r21
 15c:	4f 91       	pop	r20
 15e:	3f 91       	pop	r19
 160:	2f 91       	pop	r18
 162:	0f 90       	pop	r0
 164:	0f be       	out	0x3f, r0	; 63
 166:	0f 90       	pop	r0
 168:	1f 90       	pop	r1
 16a:	18 95       	reti

0000016c <ledprint>:
		case 0: PORTD = 0b11000000; break;
	}
}

void ledprint(unsigned int number)
{
 16c:	ac 01       	movw	r20, r24
//разбиваем число на разряды пример: 1234
	 R1 = number%10;		//4
 16e:	9c 01       	movw	r18, r24
 170:	ad ec       	ldi	r26, 0xCD	; 205
 172:	bc ec       	ldi	r27, 0xCC	; 204
 174:	80 d0       	rcall	.+256    	; 0x276 <__umulhisi3>
 176:	96 95       	lsr	r25
 178:	87 95       	ror	r24
 17a:	96 95       	lsr	r25
 17c:	87 95       	ror	r24
 17e:	96 95       	lsr	r25
 180:	87 95       	ror	r24
 182:	9c 01       	movw	r18, r24
 184:	22 0f       	add	r18, r18
 186:	33 1f       	adc	r19, r19
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	82 0f       	add	r24, r18
 196:	93 1f       	adc	r25, r19
 198:	9a 01       	movw	r18, r20
 19a:	28 1b       	sub	r18, r24
 19c:	39 0b       	sbc	r19, r25
 19e:	30 93 68 00 	sts	0x0068, r19	; 0x800068 <R1+0x1>
 1a2:	20 93 67 00 	sts	0x0067, r18	; 0x800067 <R1>
	 R2 = number%100/10;	//3
 1a6:	9a 01       	movw	r18, r20
 1a8:	36 95       	lsr	r19
 1aa:	27 95       	ror	r18
 1ac:	36 95       	lsr	r19
 1ae:	27 95       	ror	r18
 1b0:	ab e7       	ldi	r26, 0x7B	; 123
 1b2:	b4 e1       	ldi	r27, 0x14	; 20
 1b4:	60 d0       	rcall	.+192    	; 0x276 <__umulhisi3>
 1b6:	96 95       	lsr	r25
 1b8:	87 95       	ror	r24
 1ba:	64 e6       	ldi	r22, 0x64	; 100
 1bc:	68 9f       	mul	r22, r24
 1be:	90 01       	movw	r18, r0
 1c0:	69 9f       	mul	r22, r25
 1c2:	30 0d       	add	r19, r0
 1c4:	11 24       	eor	r1, r1
 1c6:	ca 01       	movw	r24, r20
 1c8:	82 1b       	sub	r24, r18
 1ca:	93 0b       	sbc	r25, r19
 1cc:	9c 01       	movw	r18, r24
 1ce:	ad ec       	ldi	r26, 0xCD	; 205
 1d0:	bc ec       	ldi	r27, 0xCC	; 204
 1d2:	51 d0       	rcall	.+162    	; 0x276 <__umulhisi3>
 1d4:	96 95       	lsr	r25
 1d6:	87 95       	ror	r24
 1d8:	96 95       	lsr	r25
 1da:	87 95       	ror	r24
 1dc:	96 95       	lsr	r25
 1de:	87 95       	ror	r24
 1e0:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <R2+0x1>
 1e4:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <R2>
	 R3 = number%1000/100;	//2
 1e8:	fa 01       	movw	r30, r20
 1ea:	f6 95       	lsr	r31
 1ec:	e7 95       	ror	r30
 1ee:	f6 95       	lsr	r31
 1f0:	e7 95       	ror	r30
 1f2:	f6 95       	lsr	r31
 1f4:	e7 95       	ror	r30
 1f6:	9f 01       	movw	r18, r30
 1f8:	a5 ec       	ldi	r26, 0xC5	; 197
 1fa:	b0 e2       	ldi	r27, 0x20	; 32
 1fc:	3c d0       	rcall	.+120    	; 0x276 <__umulhisi3>
 1fe:	92 95       	swap	r25
 200:	82 95       	swap	r24
 202:	8f 70       	andi	r24, 0x0F	; 15
 204:	89 27       	eor	r24, r25
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	89 27       	eor	r24, r25
 20a:	68 ee       	ldi	r22, 0xE8	; 232
 20c:	73 e0       	ldi	r23, 0x03	; 3
 20e:	86 9f       	mul	r24, r22
 210:	90 01       	movw	r18, r0
 212:	87 9f       	mul	r24, r23
 214:	30 0d       	add	r19, r0
 216:	96 9f       	mul	r25, r22
 218:	30 0d       	add	r19, r0
 21a:	11 24       	eor	r1, r1
 21c:	42 1b       	sub	r20, r18
 21e:	53 0b       	sbc	r21, r19
 220:	9a 01       	movw	r18, r20
 222:	36 95       	lsr	r19
 224:	27 95       	ror	r18
 226:	36 95       	lsr	r19
 228:	27 95       	ror	r18
 22a:	ab e7       	ldi	r26, 0x7B	; 123
 22c:	b4 e1       	ldi	r27, 0x14	; 20
 22e:	23 d0       	rcall	.+70     	; 0x276 <__umulhisi3>
 230:	96 95       	lsr	r25
 232:	87 95       	ror	r24
 234:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <R3+0x1>
 238:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <R3>
	 R4 = number/1000;		//1
 23c:	9f 01       	movw	r18, r30
 23e:	a5 ec       	ldi	r26, 0xC5	; 197
 240:	b0 e2       	ldi	r27, 0x20	; 32
 242:	19 d0       	rcall	.+50     	; 0x276 <__umulhisi3>
 244:	92 95       	swap	r25
 246:	82 95       	swap	r24
 248:	8f 70       	andi	r24, 0x0F	; 15
 24a:	89 27       	eor	r24, r25
 24c:	9f 70       	andi	r25, 0x0F	; 15
 24e:	89 27       	eor	r24, r25
 250:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <R4+0x1>
 254:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <R4>
 258:	08 95       	ret

0000025a <Timer_init>:



void Timer_init(void)
{	
	TCCR1B |= (1<<WGM12); // устанавливаем режим СТС (сброс по совпадению)
 25a:	8e b5       	in	r24, 0x2e	; 46
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= (1<<OCIE1A);	//устанавливаем бит разрешения прерывания 1ого счетчика по совпадению с OCR1A(H и L)
 260:	89 b7       	in	r24, 0x39	; 57
 262:	80 61       	ori	r24, 0x10	; 16
 264:	89 bf       	out	0x39, r24	; 57
	OCR1AH = 0b00100000; //записываем в регистр число для сравнения
 266:	80 e2       	ldi	r24, 0x20	; 32
 268:	8b bd       	out	0x2b, r24	; 43
	OCR1AL = 0b11101101;
 26a:	8d ee       	ldi	r24, 0xED	; 237
 26c:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |= (1<<CS11);//установим делитель.
 26e:	8e b5       	in	r24, 0x2e	; 46
 270:	82 60       	ori	r24, 0x02	; 2
 272:	8e bd       	out	0x2e, r24	; 46
 274:	08 95       	ret

00000276 <__umulhisi3>:
 276:	a2 9f       	mul	r26, r18
 278:	b0 01       	movw	r22, r0
 27a:	b3 9f       	mul	r27, r19
 27c:	c0 01       	movw	r24, r0
 27e:	a3 9f       	mul	r26, r19
 280:	01 d0       	rcall	.+2      	; 0x284 <__umulhisi3+0xe>
 282:	b2 9f       	mul	r27, r18
 284:	70 0d       	add	r23, r0
 286:	81 1d       	adc	r24, r1
 288:	11 24       	eor	r1, r1
 28a:	91 1d       	adc	r25, r1
 28c:	08 95       	ret

0000028e <_exit>:
 28e:	f8 94       	cli

00000290 <__stop_program>:
 290:	ff cf       	rjmp	.-2      	; 0x290 <__stop_program>

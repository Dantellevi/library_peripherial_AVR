
PWM_Motor_encoder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000460  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000004cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d0b  00000000  00000000  000005cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000080c  00000000  00000000  000012d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e5f  00000000  00000000  00001ae3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000029c  00000000  00000000  00002944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000575  00000000  00000000  00002be0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000983  00000000  00000000  00003155  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003ad8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_1>
   8:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_2>
   c:	0c 94 7d 00 	jmp	0xfa	; 0xfa <__vector_3>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_4>
  14:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__vector_5>
  18:	0c 94 b9 00 	jmp	0x172	; 0x172 <__vector_6>
  1c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  20:	0c 94 8f 00 	jmp	0x11e	; 0x11e <__vector_8>
  24:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_9>
  28:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  2c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  30:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  34:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  38:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  3c:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  40:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  44:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  48:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_19>
  50:	0c 94 4a 00 	jmp	0x94	; 0x94 <__bad_interrupt>
  54:	dc 00       	.word	0x00dc	; ????
  56:	df 00       	.word	0x00df	; ????
  58:	e3 00       	.word	0x00e3	; ????
  5a:	e7 00       	.word	0x00e7	; ????
  5c:	eb 00       	.word	0x00eb	; ????
  5e:	ef 00       	.word	0x00ef	; ????
  60:	f3 00       	.word	0x00f3	; ????
  62:	09 01       	movw	r0, r18
  64:	0c 01       	movw	r0, r24
  66:	10 01       	movw	r2, r0
  68:	14 01       	movw	r2, r8
  6a:	18 01       	movw	r2, r16
  6c:	1c 01       	movw	r2, r24
  6e:	20 01       	movw	r4, r0

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf e5       	ldi	r28, 0x5F	; 95
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_clear_bss>:
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	a0 e6       	ldi	r26, 0x60	; 96
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
  84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
  86:	a4 36       	cpi	r26, 0x64	; 100
  88:	b2 07       	cpc	r27, r18
  8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>
  8c:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
  90:	0c 94 f4 01 	jmp	0x3e8	; 0x3e8 <_exit>

00000094 <__bad_interrupt>:
  94:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000098 <__vector_9>:
	
	}

	sei();

}
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	0f 90       	pop	r0
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	0f 90       	pop	r0
  a8:	1f 90       	pop	r1
  aa:	18 95       	reti

000000ac <__vector_19>:
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	92 b3       	in	r25, 0x12	; 18
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	89 27       	eor	r24, r25
  c0:	82 bb       	out	0x12, r24	; 18
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_4>:
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
  dc:	9f 93       	push	r25
  de:	92 b3       	in	r25, 0x12	; 18
  e0:	82 e0       	ldi	r24, 0x02	; 2
  e2:	89 27       	eor	r24, r25
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <valInter2>
  ea:	84 bd       	out	0x24, r24	; 36
  ec:	9f 91       	pop	r25
  ee:	8f 91       	pop	r24
  f0:	0f 90       	pop	r0
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	0f 90       	pop	r0
  f6:	1f 90       	pop	r1
  f8:	18 95       	reti

000000fa <__vector_3>:
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	92 b3       	in	r25, 0x12	; 18
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	89 27       	eor	r24, r25
 10e:	82 bb       	out	0x12, r24	; 18
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <__vector_8>:
 11e:	1f 92       	push	r1
 120:	0f 92       	push	r0
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	0f 92       	push	r0
 126:	11 24       	eor	r1, r1
 128:	8f 93       	push	r24
 12a:	9f 93       	push	r25
 12c:	92 b3       	in	r25, 0x12	; 18
 12e:	84 e0       	ldi	r24, 0x04	; 4
 130:	89 27       	eor	r24, r25
 132:	82 bb       	out	0x12, r24	; 18
 134:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 138:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 13c:	9d bd       	out	0x2d, r25	; 45
 13e:	8c bd       	out	0x2c, r24	; 44
 140:	9f 91       	pop	r25
 142:	8f 91       	pop	r24
 144:	0f 90       	pop	r0
 146:	0f be       	out	0x3f, r0	; 63
 148:	0f 90       	pop	r0
 14a:	1f 90       	pop	r1
 14c:	18 95       	reti

0000014e <__vector_5>:
 14e:	1f 92       	push	r1
 150:	0f 92       	push	r0
 152:	0f b6       	in	r0, 0x3f	; 63
 154:	0f 92       	push	r0
 156:	11 24       	eor	r1, r1
 158:	8f 93       	push	r24
 15a:	9f 93       	push	r25
 15c:	92 b3       	in	r25, 0x12	; 18
 15e:	84 e0       	ldi	r24, 0x04	; 4
 160:	89 27       	eor	r24, r25
 162:	82 bb       	out	0x12, r24	; 18
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	0f 90       	pop	r0
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	0f 90       	pop	r0
 16e:	1f 90       	pop	r1
 170:	18 95       	reti

00000172 <__vector_6>:
 172:	1f 92       	push	r1
 174:	0f 92       	push	r0
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	0f 92       	push	r0
 17a:	11 24       	eor	r1, r1
 17c:	8f 93       	push	r24
 17e:	9f 93       	push	r25
 180:	92 b3       	in	r25, 0x12	; 18
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	89 27       	eor	r24, r25
 186:	82 bb       	out	0x12, r24	; 18
 188:	9f 91       	pop	r25
 18a:	8f 91       	pop	r24
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <PWM0_init>:
	char flagdel-делитель частоты для работы
*/
//
void PWM0_init(char starVal,char Mode,char flagdel)
{
	if (Mode==PWM_MODE_FIRST)
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	59 f5       	brne	.+86     	; 0x1f0 <PWM0_init+0x5a>
	{
		TCCR0|=(1<<WGM01)|(1<<WGM00);
 19a:	93 b7       	in	r25, 0x33	; 51
 19c:	98 64       	ori	r25, 0x48	; 72
 19e:	93 bf       	out	0x33, r25	; 51
		TCCR0|=(1<<COM01);
 1a0:	93 b7       	in	r25, 0x33	; 51
 1a2:	90 62       	ori	r25, 0x20	; 32
 1a4:	93 bf       	out	0x33, r25	; 51
		switch(flagdel)
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	47 30       	cpi	r20, 0x07	; 7
 1aa:	51 05       	cpc	r21, r1
 1ac:	f8 f4       	brcc	.+62     	; 0x1ec <PWM0_init+0x56>
 1ae:	fa 01       	movw	r30, r20
 1b0:	e6 5d       	subi	r30, 0xD6	; 214
 1b2:	ff 4f       	sbci	r31, 0xFF	; 255
 1b4:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__tablejump2__>
		{

			case 0:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(0<<CS02);
 1b8:	93 b7       	in	r25, 0x33	; 51
 1ba:	93 bf       	out	0x33, r25	; 51
				break;
 1bc:	17 c0       	rjmp	.+46     	; 0x1ec <PWM0_init+0x56>
			}

			case 1:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(0<<CS02);
 1be:	93 b7       	in	r25, 0x33	; 51
 1c0:	91 60       	ori	r25, 0x01	; 1
 1c2:	93 bf       	out	0x33, r25	; 51
				break;
 1c4:	13 c0       	rjmp	.+38     	; 0x1ec <PWM0_init+0x56>
			}
			case 2:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(0<<CS02);
 1c6:	93 b7       	in	r25, 0x33	; 51
 1c8:	92 60       	ori	r25, 0x02	; 2
 1ca:	93 bf       	out	0x33, r25	; 51
				break;
 1cc:	0f c0       	rjmp	.+30     	; 0x1ec <PWM0_init+0x56>
			}

			case 3:
			{
				TCCR0|=(1<<CS00)|(1<<CS01)|(0<<CS02);
 1ce:	93 b7       	in	r25, 0x33	; 51
 1d0:	93 60       	ori	r25, 0x03	; 3
 1d2:	93 bf       	out	0x33, r25	; 51
				break;
 1d4:	0b c0       	rjmp	.+22     	; 0x1ec <PWM0_init+0x56>
			}
			case 4:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(1<<CS02);
 1d6:	93 b7       	in	r25, 0x33	; 51
 1d8:	94 60       	ori	r25, 0x04	; 4
 1da:	93 bf       	out	0x33, r25	; 51
				break;
 1dc:	07 c0       	rjmp	.+14     	; 0x1ec <PWM0_init+0x56>
			}

			case 5:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(1<<CS02);
 1de:	93 b7       	in	r25, 0x33	; 51
 1e0:	95 60       	ori	r25, 0x05	; 5
 1e2:	93 bf       	out	0x33, r25	; 51
				break;
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <PWM0_init+0x56>
			}
			case 6:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(1<<CS02);
 1e6:	93 b7       	in	r25, 0x33	; 51
 1e8:	96 60       	ori	r25, 0x06	; 6
 1ea:	93 bf       	out	0x33, r25	; 51
				break;
			}

		}

		OCR0=starVal;
 1ec:	8c bf       	out	0x3c, r24	; 60
 1ee:	08 95       	ret

	}
	else if (Mode==PWM_MODE_PHASECORRECT)
 1f0:	62 30       	cpi	r22, 0x02	; 2
 1f2:	51 f5       	brne	.+84     	; 0x248 <PWM0_init+0xb2>
	{
		TCCR0|=(0<<WGM01)|(1<<WGM00);
 1f4:	93 b7       	in	r25, 0x33	; 51
 1f6:	90 64       	ori	r25, 0x40	; 64
 1f8:	93 bf       	out	0x33, r25	; 51
		TCCR0|=(1<<COM01);
 1fa:	93 b7       	in	r25, 0x33	; 51
 1fc:	90 62       	ori	r25, 0x20	; 32
 1fe:	93 bf       	out	0x33, r25	; 51
		switch(flagdel)
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	47 30       	cpi	r20, 0x07	; 7
 204:	51 05       	cpc	r21, r1
 206:	f8 f4       	brcc	.+62     	; 0x246 <PWM0_init+0xb0>
 208:	fa 01       	movw	r30, r20
 20a:	ef 5c       	subi	r30, 0xCF	; 207
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	0c 94 ee 01 	jmp	0x3dc	; 0x3dc <__tablejump2__>
		{

			case 0:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(0<<CS02);
 212:	93 b7       	in	r25, 0x33	; 51
 214:	93 bf       	out	0x33, r25	; 51
				break;
 216:	17 c0       	rjmp	.+46     	; 0x246 <PWM0_init+0xb0>
			}

			case 1:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(0<<CS02);
 218:	93 b7       	in	r25, 0x33	; 51
 21a:	91 60       	ori	r25, 0x01	; 1
 21c:	93 bf       	out	0x33, r25	; 51
				break;
 21e:	13 c0       	rjmp	.+38     	; 0x246 <PWM0_init+0xb0>
			}
			case 2:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(0<<CS02);
 220:	93 b7       	in	r25, 0x33	; 51
 222:	92 60       	ori	r25, 0x02	; 2
 224:	93 bf       	out	0x33, r25	; 51
				break;
 226:	0f c0       	rjmp	.+30     	; 0x246 <PWM0_init+0xb0>
			}

			case 3:
			{
				TCCR0|=(1<<CS00)|(1<<CS01)|(0<<CS02);
 228:	93 b7       	in	r25, 0x33	; 51
 22a:	93 60       	ori	r25, 0x03	; 3
 22c:	93 bf       	out	0x33, r25	; 51
				break;
 22e:	0b c0       	rjmp	.+22     	; 0x246 <PWM0_init+0xb0>
			}
			case 4:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(1<<CS02);
 230:	93 b7       	in	r25, 0x33	; 51
 232:	94 60       	ori	r25, 0x04	; 4
 234:	93 bf       	out	0x33, r25	; 51
				break;
 236:	07 c0       	rjmp	.+14     	; 0x246 <PWM0_init+0xb0>
			}

			case 5:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(1<<CS02);
 238:	93 b7       	in	r25, 0x33	; 51
 23a:	95 60       	ori	r25, 0x05	; 5
 23c:	93 bf       	out	0x33, r25	; 51
				break;
 23e:	03 c0       	rjmp	.+6      	; 0x246 <PWM0_init+0xb0>
			}
			case 6:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(1<<CS02);
 240:	93 b7       	in	r25, 0x33	; 51
 242:	96 60       	ori	r25, 0x06	; 6
 244:	93 bf       	out	0x33, r25	; 51
				break;
			}

		}

		OCR0=starVal;
 246:	8c bf       	out	0x3c, r24	; 60
 248:	08 95       	ret

0000024a <SetPWM0_Value>:

//Функция установки значения ШИМ для 0 таймера
void SetPWM0_Value(char value)
{
	
	OCR0=value;
 24a:	8c bf       	out	0x3c, r24	; 60
 24c:	08 95       	ret

0000024e <__vector_1>:

char valInterupt=0;

//==========================Обработчик прерываний=====================
ISR(INT0_vect)
{
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	
	if (((PIND&(1<<PD0)))&&(valInterupt<255))
 270:	80 9b       	sbis	0x10, 0	; 16
 272:	19 c0       	rjmp	.+50     	; 0x2a6 <__vector_1+0x58>
 274:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <valInterupt>
 278:	8f 3f       	cpi	r24, 0xFF	; 255
 27a:	61 f1       	breq	.+88     	; 0x2d4 <__vector_1+0x86>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27c:	2f ef       	ldi	r18, 0xFF	; 255
 27e:	80 e7       	ldi	r24, 0x70	; 112
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	21 50       	subi	r18, 0x01	; 1
 284:	80 40       	sbci	r24, 0x00	; 0
 286:	90 40       	sbci	r25, 0x00	; 0
 288:	e1 f7       	brne	.-8      	; 0x282 <__vector_1+0x34>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <__vector_1+0x3e>
 28c:	00 00       	nop
	{
	_delay_ms(100);
		PORTD^=(1<<PD1);
 28e:	92 b3       	in	r25, 0x12	; 18
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	89 27       	eor	r24, r25
 294:	82 bb       	out	0x12, r24	; 18
		valInterupt++;
 296:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <valInterupt>
 29a:	8f 5f       	subi	r24, 0xFF	; 255
 29c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <valInterupt>
		
		SetPWM0_Value(valInterupt);
 2a0:	0e 94 25 01 	call	0x24a	; 0x24a <SetPWM0_Value>
 2a4:	19 c0       	rjmp	.+50     	; 0x2d8 <__vector_1+0x8a>
	}
	else if (!(PIND&(1<<PD0))&&(valInterupt>0))
 2a6:	80 99       	sbic	0x10, 0	; 16
 2a8:	17 c0       	rjmp	.+46     	; 0x2d8 <__vector_1+0x8a>
 2aa:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <valInterupt>
 2ae:	88 23       	and	r24, r24
 2b0:	99 f0       	breq	.+38     	; 0x2d8 <__vector_1+0x8a>
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	80 e7       	ldi	r24, 0x70	; 112
 2b6:	92 e0       	ldi	r25, 0x02	; 2
 2b8:	21 50       	subi	r18, 0x01	; 1
 2ba:	80 40       	sbci	r24, 0x00	; 0
 2bc:	90 40       	sbci	r25, 0x00	; 0
 2be:	e1 f7       	brne	.-8      	; 0x2b8 <__vector_1+0x6a>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <__vector_1+0x74>
 2c2:	00 00       	nop
	{
		_delay_ms(100);
		valInterupt--;
 2c4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <valInterupt>
 2c8:	81 50       	subi	r24, 0x01	; 1
 2ca:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <valInterupt>
		SetPWM0_Value(valInterupt);
 2ce:	0e 94 25 01 	call	0x24a	; 0x24a <SetPWM0_Value>
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <__vector_1+0x8a>
		PORTD^=(1<<PD1);
		valInterupt++;
		
		SetPWM0_Value(valInterupt);
	}
	else if (!(PIND&(1<<PD0))&&(valInterupt>0))
 2d4:	80 9b       	sbis	0x10, 0	; 16
 2d6:	ed cf       	rjmp	.-38     	; 0x2b2 <__vector_1+0x64>
		_delay_ms(100);
		valInterupt--;
		SetPWM0_Value(valInterupt);
	}

}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_2>:


ISR(INT1_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1


}
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <Initilizer_Interrupt>:

*/

void Initilizer_Interrupt(char flagInter,char flagcontrol)
{
	if (flagInter==FLAG_INT0)
 30e:	81 11       	cpse	r24, r1
 310:	24 c0       	rjmp	.+72     	; 0x35a <Initilizer_Interrupt+0x4c>
	{
		switch(flagcontrol)
 312:	61 30       	cpi	r22, 0x01	; 1
 314:	69 f0       	breq	.+26     	; 0x330 <Initilizer_Interrupt+0x22>
 316:	28 f0       	brcs	.+10     	; 0x322 <Initilizer_Interrupt+0x14>
 318:	62 30       	cpi	r22, 0x02	; 2
 31a:	89 f0       	breq	.+34     	; 0x33e <Initilizer_Interrupt+0x30>
 31c:	63 30       	cpi	r22, 0x03	; 3
 31e:	b1 f0       	breq	.+44     	; 0x34c <Initilizer_Interrupt+0x3e>
 320:	08 95       	ret
		{

			case FLAG_FALLING_EDGE:{	//по спадающему фронту

			MCUCR|=(1<<ISC01);
 322:	85 b7       	in	r24, 0x35	; 53
 324:	82 60       	ori	r24, 0x02	; 2
 326:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 328:	8b b7       	in	r24, 0x3b	; 59
 32a:	80 64       	ori	r24, 0x40	; 64
 32c:	8b bf       	out	0x3b, r24	; 59
			break;
 32e:	08 95       	ret
			}
			case FLAG_LOW_LEVEL:{	//по низкому уровню
			

			MCUCR&=~((1<<ISC01)|(1<<ISC00));
 330:	85 b7       	in	r24, 0x35	; 53
 332:	8c 7f       	andi	r24, 0xFC	; 252
 334:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 336:	8b b7       	in	r24, 0x3b	; 59
 338:	80 64       	ori	r24, 0x40	; 64
 33a:	8b bf       	out	0x3b, r24	; 59

			break;
 33c:	08 95       	ret
			}

			case FLAG_ANY_LEVEL:{	//по любому перепаду уровней
			MCUCR|=(1<<ISC00);
 33e:	85 b7       	in	r24, 0x35	; 53
 340:	81 60       	ori	r24, 0x01	; 1
 342:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 344:	8b b7       	in	r24, 0x3b	; 59
 346:	80 64       	ori	r24, 0x40	; 64
 348:	8b bf       	out	0x3b, r24	; 59
			break;
 34a:	08 95       	ret
			}

			case FLAG_RISING_EDGE:{	//по возрастающему фронту

			MCUCR|=(1<<ISC01)|(1<<ISC00);
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	83 60       	ori	r24, 0x03	; 3
 350:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 352:	8b b7       	in	r24, 0x3b	; 59
 354:	80 64       	ori	r24, 0x40	; 64
 356:	8b bf       	out	0x3b, r24	; 59
			break;
 358:	08 95       	ret
			}


		}
	}
	else if (flagInter==FLAG_INT1)
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	19 f5       	brne	.+70     	; 0x3a4 <Initilizer_Interrupt+0x96>
	{
		switch(flagcontrol)
 35e:	61 30       	cpi	r22, 0x01	; 1
 360:	69 f0       	breq	.+26     	; 0x37c <Initilizer_Interrupt+0x6e>
 362:	28 f0       	brcs	.+10     	; 0x36e <Initilizer_Interrupt+0x60>
 364:	62 30       	cpi	r22, 0x02	; 2
 366:	89 f0       	breq	.+34     	; 0x38a <Initilizer_Interrupt+0x7c>
 368:	63 30       	cpi	r22, 0x03	; 3
 36a:	b1 f0       	breq	.+44     	; 0x398 <Initilizer_Interrupt+0x8a>
 36c:	08 95       	ret
		{

			case FLAG_FALLING_EDGE:{	//по спадающему фронту

				MCUCR|=(1<<ISC11);
 36e:	85 b7       	in	r24, 0x35	; 53
 370:	88 60       	ori	r24, 0x08	; 8
 372:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 374:	8b b7       	in	r24, 0x3b	; 59
 376:	80 68       	ori	r24, 0x80	; 128
 378:	8b bf       	out	0x3b, r24	; 59
				break;
 37a:	08 95       	ret
			}
			case FLAG_LOW_LEVEL:{		//по низкому уровню
				

				MCUCR&=~((1<<ISC11)|(1<<ISC10));
 37c:	85 b7       	in	r24, 0x35	; 53
 37e:	83 7f       	andi	r24, 0xF3	; 243
 380:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 382:	8b b7       	in	r24, 0x3b	; 59
 384:	80 68       	ori	r24, 0x80	; 128
 386:	8b bf       	out	0x3b, r24	; 59

				break;
 388:	08 95       	ret
			}

			case FLAG_ANY_LEVEL:{		//по любому перепаду уровней
				MCUCR|=(1<<ISC10);
 38a:	85 b7       	in	r24, 0x35	; 53
 38c:	84 60       	ori	r24, 0x04	; 4
 38e:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 390:	8b b7       	in	r24, 0x3b	; 59
 392:	80 68       	ori	r24, 0x80	; 128
 394:	8b bf       	out	0x3b, r24	; 59
				break;
 396:	08 95       	ret
			}

			case FLAG_RISING_EDGE:{		//по возрастающему фронту

				MCUCR|=(1<<ISC11)|(1<<ISC10);
 398:	85 b7       	in	r24, 0x35	; 53
 39a:	8c 60       	ori	r24, 0x0C	; 12
 39c:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 39e:	8b b7       	in	r24, 0x3b	; 59
 3a0:	80 68       	ori	r24, 0x80	; 128
 3a2:	8b bf       	out	0x3b, r24	; 59
 3a4:	08 95       	ret

000003a6 <Port_Init>:
#define IN2_OFF PORTD&=~(1<<PD6)

void Port_Init(void)
{

	DDRB|=(1<<PB3);
 3a6:	bb 9a       	sbi	0x17, 3	; 23
	PORTB&=~(1<<PB3);
 3a8:	c3 98       	cbi	0x18, 3	; 24

	DDRD|=(1<<PD7)|(1<<PD6);
 3aa:	81 b3       	in	r24, 0x11	; 17
 3ac:	80 6c       	ori	r24, 0xC0	; 192
 3ae:	81 bb       	out	0x11, r24	; 17
	PORTD&=~((1<<PD7)|(1<<PD6));
 3b0:	82 b3       	in	r24, 0x12	; 18
 3b2:	8f 73       	andi	r24, 0x3F	; 63
 3b4:	82 bb       	out	0x12, r24	; 18
	DDRD&=~(1<<PD0);
 3b6:	88 98       	cbi	0x11, 0	; 17
	PORTD&=~(1<<PD0);
 3b8:	90 98       	cbi	0x12, 0	; 18
	DDRD|=(1<<PD1);
 3ba:	89 9a       	sbi	0x11, 1	; 17
	PORTD&=~(1<<PD1);
 3bc:	91 98       	cbi	0x12, 1	; 18
 3be:	08 95       	ret

000003c0 <main>:

}

int main(void)
{
   Port_Init();
 3c0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <Port_Init>
   PWM0_init(10,PWM_MODE_FIRST,FLAG_DEL_1024);
 3c4:	45 e0       	ldi	r20, 0x05	; 5
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	8a e0       	ldi	r24, 0x0A	; 10
 3ca:	0e 94 cb 00 	call	0x196	; 0x196 <PWM0_init>
   Initilizer_Interrupt(FLAG_INT0,FLAG_LOW_LEVEL);
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 87 01 	call	0x30e	; 0x30e <Initilizer_Interrupt>
   IN1_ON;
 3d6:	97 9a       	sbi	0x12, 7	; 18
   sei();
 3d8:	78 94       	sei
    while (1) 
    {
	
    }
 3da:	ff cf       	rjmp	.-2      	; 0x3da <main+0x1a>

000003dc <__tablejump2__>:
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	05 90       	lpm	r0, Z+
 3e2:	f4 91       	lpm	r31, Z
 3e4:	e0 2d       	mov	r30, r0
 3e6:	09 94       	ijmp

000003e8 <_exit>:
 3e8:	f8 94       	cli

000003ea <__stop_program>:
 3ea:	ff cf       	rjmp	.-2      	; 0x3ea <__stop_program>

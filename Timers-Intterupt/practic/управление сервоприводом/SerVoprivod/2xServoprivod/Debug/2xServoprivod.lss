
2xServoprivod.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000002fe  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000394  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000857  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000701  00000000  00000000  00000ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d2  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000011c  00000000  00000000  000018a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000415  00000000  00000000  000019c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c0  00000000  00000000  00001dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002095  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_1>
   8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_6>
  1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_7>
  20:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_8>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  8a:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_1>:
extern volatile unsigned int Danie_1Servo;

//==========================Обработчик прерываний=====================

ISR(INT0_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	2f 93       	push	r18
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
	if (!(PIND&(1<<PD0))&&(Danie_1Servo>74))
  a2:	80 99       	sbic	0x10, 0	; 16
  a4:	22 c0       	rjmp	.+68     	; 0xea <__vector_1+0x58>
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
  aa:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
  ae:	8b 34       	cpi	r24, 0x4B	; 75
  b0:	91 05       	cpc	r25, r1
  b2:	d8 f0       	brcs	.+54     	; 0xea <__vector_1+0x58>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	80 e7       	ldi	r24, 0x70	; 112
  b8:	92 e0       	ldi	r25, 0x02	; 2
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <__vector_1+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_1+0x32>
  c4:	00 00       	nop
	{
	_delay_ms(100);
	if (Danie_1Servo<300)
  c6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
  ca:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
  ce:	8c 32       	cpi	r24, 0x2C	; 44
  d0:	91 40       	sbci	r25, 0x01	; 1
  d2:	08 f0       	brcs	.+2      	; 0xd6 <__vector_1+0x44>
  d4:	4e c0       	rjmp	.+156    	; 0x172 <__vector_1+0xe0>
	{
	Danie_1Servo+=10;
  d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
  da:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
  de:	0a 96       	adiw	r24, 0x0a	; 10
  e0:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Danie_1Servo+0x1>
  e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Danie_1Servo>
  e8:	44 c0       	rjmp	.+136    	; 0x172 <__vector_1+0xe0>
	}
	
	}
	else if ((PIND&(1<<PD0))&&(Danie_1Servo<=300)&&(Danie_1Servo>74))
  ea:	80 9b       	sbis	0x10, 0	; 16
  ec:	21 c0       	rjmp	.+66     	; 0x130 <__vector_1+0x9e>
  ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
  f2:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
  f6:	8d 32       	cpi	r24, 0x2D	; 45
  f8:	91 40       	sbci	r25, 0x01	; 1
  fa:	d0 f4       	brcc	.+52     	; 0x130 <__vector_1+0x9e>
  fc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 100:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 104:	8b 34       	cpi	r24, 0x4B	; 75
 106:	91 05       	cpc	r25, r1
 108:	98 f0       	brcs	.+38     	; 0x130 <__vector_1+0x9e>
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	90 e7       	ldi	r25, 0x70	; 112
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	81 50       	subi	r24, 0x01	; 1
 112:	90 40       	sbci	r25, 0x00	; 0
 114:	20 40       	sbci	r18, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <__vector_1+0x7e>
 118:	00 c0       	rjmp	.+0      	; 0x11a <__vector_1+0x88>
 11a:	00 00       	nop
	{
		_delay_ms(100);
		Danie_1Servo-=10;
 11c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 120:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 124:	0a 97       	sbiw	r24, 0x0a	; 10
 126:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Danie_1Servo+0x1>
 12a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Danie_1Servo>
 12e:	21 c0       	rjmp	.+66     	; 0x172 <__vector_1+0xe0>

	}
	else if (Danie_1Servo>300)
 130:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 134:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 138:	8d 32       	cpi	r24, 0x2D	; 45
 13a:	91 40       	sbci	r25, 0x01	; 1
 13c:	50 f0       	brcs	.+20     	; 0x152 <__vector_1+0xc0>
	{
	Danie_1Servo-=10;
 13e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 142:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 146:	0a 97       	sbiw	r24, 0x0a	; 10
 148:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Danie_1Servo+0x1>
 14c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Danie_1Servo>
 150:	10 c0       	rjmp	.+32     	; 0x172 <__vector_1+0xe0>
	}
	else if (Danie_1Servo<75)
 152:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 156:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 15a:	8b 34       	cpi	r24, 0x4B	; 75
 15c:	91 05       	cpc	r25, r1
 15e:	48 f4       	brcc	.+18     	; 0x172 <__vector_1+0xe0>
	{
		Danie_1Servo+=10;
 160:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 164:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 168:	0a 96       	adiw	r24, 0x0a	; 10
 16a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <Danie_1Servo+0x1>
 16e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <Danie_1Servo>
	}

}
 172:	9f 91       	pop	r25
 174:	8f 91       	pop	r24
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <__vector_2>:


ISR(INT1_vect)
{
 182:	1f 92       	push	r1
 184:	0f 92       	push	r0
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	0f 92       	push	r0
 18a:	11 24       	eor	r1, r1


}
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <Initilizer_Interrupt>:

*/

void Initilizer_Interrupt(char flagInter,char flagcontrol)
{
	if (flagInter==FLAG_INT0)
 196:	81 11       	cpse	r24, r1
 198:	24 c0       	rjmp	.+72     	; 0x1e2 <Initilizer_Interrupt+0x4c>
	{
		switch(flagcontrol)
 19a:	61 30       	cpi	r22, 0x01	; 1
 19c:	69 f0       	breq	.+26     	; 0x1b8 <Initilizer_Interrupt+0x22>
 19e:	28 f0       	brcs	.+10     	; 0x1aa <Initilizer_Interrupt+0x14>
 1a0:	62 30       	cpi	r22, 0x02	; 2
 1a2:	89 f0       	breq	.+34     	; 0x1c6 <Initilizer_Interrupt+0x30>
 1a4:	63 30       	cpi	r22, 0x03	; 3
 1a6:	b1 f0       	breq	.+44     	; 0x1d4 <Initilizer_Interrupt+0x3e>
 1a8:	08 95       	ret
		{

			case FLAG_FALLING_EDGE:{	//по спадающему фронту

			MCUCR|=(1<<ISC01);
 1aa:	85 b7       	in	r24, 0x35	; 53
 1ac:	82 60       	ori	r24, 0x02	; 2
 1ae:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 1b0:	8b b7       	in	r24, 0x3b	; 59
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	8b bf       	out	0x3b, r24	; 59
			break;
 1b6:	08 95       	ret
			}
			case FLAG_LOW_LEVEL:{	//по низкому уровню
			

			MCUCR&=~((1<<ISC01)|(1<<ISC00));
 1b8:	85 b7       	in	r24, 0x35	; 53
 1ba:	8c 7f       	andi	r24, 0xFC	; 252
 1bc:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 1be:	8b b7       	in	r24, 0x3b	; 59
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	8b bf       	out	0x3b, r24	; 59

			break;
 1c4:	08 95       	ret
			}

			case FLAG_ANY_LEVEL:{	//по любому перепаду уровней
			MCUCR|=(1<<ISC00);
 1c6:	85 b7       	in	r24, 0x35	; 53
 1c8:	81 60       	ori	r24, 0x01	; 1
 1ca:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 1cc:	8b b7       	in	r24, 0x3b	; 59
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	8b bf       	out	0x3b, r24	; 59
			break;
 1d2:	08 95       	ret
			}

			case FLAG_RISING_EDGE:{	//по возрастающему фронту

			MCUCR|=(1<<ISC01)|(1<<ISC00);
 1d4:	85 b7       	in	r24, 0x35	; 53
 1d6:	83 60       	ori	r24, 0x03	; 3
 1d8:	85 bf       	out	0x35, r24	; 53
			GICR|=(1<<INT0);
 1da:	8b b7       	in	r24, 0x3b	; 59
 1dc:	80 64       	ori	r24, 0x40	; 64
 1de:	8b bf       	out	0x3b, r24	; 59
			break;
 1e0:	08 95       	ret
			}


		}
	}
	else if (flagInter==FLAG_INT1)
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	19 f5       	brne	.+70     	; 0x22c <Initilizer_Interrupt+0x96>
	{
		switch(flagcontrol)
 1e6:	61 30       	cpi	r22, 0x01	; 1
 1e8:	69 f0       	breq	.+26     	; 0x204 <Initilizer_Interrupt+0x6e>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <Initilizer_Interrupt+0x60>
 1ec:	62 30       	cpi	r22, 0x02	; 2
 1ee:	89 f0       	breq	.+34     	; 0x212 <Initilizer_Interrupt+0x7c>
 1f0:	63 30       	cpi	r22, 0x03	; 3
 1f2:	b1 f0       	breq	.+44     	; 0x220 <Initilizer_Interrupt+0x8a>
 1f4:	08 95       	ret
		{

			case FLAG_FALLING_EDGE:{	//по спадающему фронту

				MCUCR|=(1<<ISC11);
 1f6:	85 b7       	in	r24, 0x35	; 53
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 1fc:	8b b7       	in	r24, 0x3b	; 59
 1fe:	80 68       	ori	r24, 0x80	; 128
 200:	8b bf       	out	0x3b, r24	; 59
				break;
 202:	08 95       	ret
			}
			case FLAG_LOW_LEVEL:{		//по низкому уровню
				

				MCUCR&=~((1<<ISC11)|(1<<ISC10));
 204:	85 b7       	in	r24, 0x35	; 53
 206:	83 7f       	andi	r24, 0xF3	; 243
 208:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 20a:	8b b7       	in	r24, 0x3b	; 59
 20c:	80 68       	ori	r24, 0x80	; 128
 20e:	8b bf       	out	0x3b, r24	; 59

				break;
 210:	08 95       	ret
			}

			case FLAG_ANY_LEVEL:{		//по любому перепаду уровней
				MCUCR|=(1<<ISC10);
 212:	85 b7       	in	r24, 0x35	; 53
 214:	84 60       	ori	r24, 0x04	; 4
 216:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 218:	8b b7       	in	r24, 0x3b	; 59
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	8b bf       	out	0x3b, r24	; 59
				break;
 21e:	08 95       	ret
			}

			case FLAG_RISING_EDGE:{		//по возрастающему фронту

				MCUCR|=(1<<ISC11)|(1<<ISC10);
 220:	85 b7       	in	r24, 0x35	; 53
 222:	8c 60       	ori	r24, 0x0C	; 12
 224:	85 bf       	out	0x35, r24	; 53
				GICR|=(1<<INT1);
 226:	8b b7       	in	r24, 0x3b	; 59
 228:	80 68       	ori	r24, 0x80	; 128
 22a:	8b bf       	out	0x3b, r24	; 59
 22c:	08 95       	ret

0000022e <__vector_6>:
#include "Main.h"
volatile unsigned int Danie_1Servo = 75,Danie_2Servo = 0,Sot = 0;  


ISR (TIMER1_COMPA_vect)  //формируем угол здвига 1 сервопривода
{
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
	PORTA &=~(1<<PA0); 	  // завершаем импульса дл¤  1 сервопривода
 23c:	d8 98       	cbi	0x1b, 0	; 27
	OCR1A =  Danie_1Servo;
 23e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <Danie_1Servo>
 242:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <Danie_1Servo+0x1>
 246:	9b bd       	out	0x2b, r25	; 43
 248:	8a bd       	out	0x2a, r24	; 42

}
 24a:	9f 91       	pop	r25
 24c:	8f 91       	pop	r24
 24e:	0f 90       	pop	r0
 250:	0f be       	out	0x3f, r0	; 63
 252:	0f 90       	pop	r0
 254:	1f 90       	pop	r1
 256:	18 95       	reti

00000258 <__vector_7>:

ISR (TIMER1_COMPB_vect)  // формируем угол здвига 2 сервопривода
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	8f 93       	push	r24
 264:	9f 93       	push	r25
	PORTA &=~(1<<PA1);      // завершаем импульса дл¤  2 сервопривода
 266:	d9 98       	cbi	0x1b, 1	; 27
	OCR1B =  Danie_2Servo;
 268:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <Danie_2Servo>
 26c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <Danie_2Servo+0x1>
 270:	99 bd       	out	0x29, r25	; 41
 272:	88 bd       	out	0x28, r24	; 40

}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_8>:

ISR(TIMER1_OVF_vect)	//формеруем 20мс. 50гц
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
	PORTA |=(1<<PA0);       //нач¤ло импульса дл¤  1 сервопривода
 290:	d8 9a       	sbi	0x1b, 0	; 27
	PORTA |=(1<<PA1);       //нач¤ло импульса дл¤  2 сервопривода
 292:	d9 9a       	sbi	0x1b, 1	; 27
	Sot++;
 294:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 298:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 2a2:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>

}
 2a6:	9f 91       	pop	r25
 2a8:	8f 91       	pop	r24
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <Port_init>:


void Port_init(void)
{
	
	DDRA|=(1<<PA0)|(1<<PA1);
 2b4:	8a b3       	in	r24, 0x1a	; 26
 2b6:	83 60       	ori	r24, 0x03	; 3
 2b8:	8a bb       	out	0x1a, r24	; 26
 2ba:	08 95       	ret

000002bc <Timer_init>:

*/
void Timer_init(void)
{

	ICR1 = 2500;          //формеруем 20мс. дл¤ 8ћгц.
 2bc:	84 ec       	ldi	r24, 0xC4	; 196
 2be:	99 e0       	ldi	r25, 0x09	; 9
 2c0:	97 bd       	out	0x27, r25	; 39
 2c2:	86 bd       	out	0x26, r24	; 38
	OCR1A = 75;
 2c4:	8b e4       	ldi	r24, 0x4B	; 75
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	9b bd       	out	0x2b, r25	; 43
 2ca:	8a bd       	out	0x2a, r24	; 42
	OCR1B = 75;
 2cc:	99 bd       	out	0x29, r25	; 41
 2ce:	88 bd       	out	0x28, r24	; 40
	TIMSK |=(1<<TOIE1)|(1<<OCIE1A)|(1<<OCIE1B);  // разрешаем работу прерывани¤м
 2d0:	89 b7       	in	r24, 0x39	; 57
 2d2:	8c 61       	ori	r24, 0x1C	; 28
 2d4:	89 bf       	out	0x39, r24	; 57
	TCCR1A |=(1<<WGM11);                         // младшие бит режим FastPWM
 2d6:	8f b5       	in	r24, 0x2f	; 47
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	8f bd       	out	0x2f, r24	; 47

	TCCR1B |= (1 << ICES1)|(1<<CS10)|(1<<CS11)|(1<<WGM12)|(1<<WGM13);   //пределитель 64,старший бит режим FastPWM (сброс при совпадении)
 2dc:	8e b5       	in	r24, 0x2e	; 46
 2de:	8b 65       	ori	r24, 0x5B	; 91
 2e0:	8e bd       	out	0x2e, r24	; 46
 2e2:	08 95       	ret

000002e4 <main>:

}

int main(void)
{
    Port_init();
 2e4:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Port_init>
	Timer_init();
 2e8:	0e 94 5e 01 	call	0x2bc	; 0x2bc <Timer_init>
	Initilizer_Interrupt(FLAG_INT0,FLAG_LOW_LEVEL);
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	0e 94 cb 00 	call	0x196	; 0x196 <Initilizer_Interrupt>
	sei();
 2f4:	78 94       	sei
		//{
			//Danie_1Servo = 75;  // данные дл¤ 1 сервопривода
			//Sot = 0;
		//}

		asm("nop");
 2f6:	00 00       	nop

    }
 2f8:	fe cf       	rjmp	.-4      	; 0x2f6 <main+0x12>

000002fa <_exit>:
 2fa:	f8 94       	cli

000002fc <__stop_program>:
 2fc:	ff cf       	rjmp	.-2      	; 0x2fc <__stop_program>

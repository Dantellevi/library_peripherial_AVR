
Servo_Dvigatel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005fe  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          000000ba  00800060  00800060  00000672  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000674  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a9  00000000  00000000  00000df7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000002d9  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000011d  00000000  00000000  00001179  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b9  00000000  00000000  00001296  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000177  00000000  00000000  000018b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000013b  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000004a  00000000  00000000  00001b62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_8>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	aa 31       	cpi	r26, 0x1A	; 26
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 92 02 	call	0x524	; 0x524 <main>
  74:	0c 94 fd 02 	jmp	0x5fa	; 0x5fa <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_6>:
  ISR (TIMER1_COMPA_vect)  //формируем углы здвига
  {
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	2f 93       	push	r18
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	ef 93       	push	r30
  8e:	ff 93       	push	r31
	volatile static unsigned char Danie;
    register unsigned char Temp ;	
	TCCR1A &=~(1<<WGM11);	 	
  90:	8f b5       	in	r24, 0x2f	; 47
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	8f bd       	out	0x2f, r24	; 47
    PORTA &=  Servo_W[ Danie].Servo_portA_;      // сброс портов относящиеся к данному времени 
  96:	2b b3       	in	r18, 0x1b	; 27
  98:	80 91 60 00 	lds	r24, 0x0060
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	ee 0f       	add	r30, r30
  a2:	ff 1f       	adc	r31, r31
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	e8 0f       	add	r30, r24
  aa:	f9 1f       	adc	r31, r25
  ac:	ef 59       	subi	r30, 0x9F	; 159
  ae:	ff 4f       	sbci	r31, 0xFF	; 255
  b0:	80 81       	ld	r24, Z
  b2:	28 23       	and	r18, r24
  b4:	2b bb       	out	0x1b, r18	; 27
	PORTB &=  Servo_W[  Danie].Servo_portB_;   
  b6:	28 b3       	in	r18, 0x18	; 24
  b8:	80 91 60 00 	lds	r24, 0x0060
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	ee 0f       	add	r30, r30
  c2:	ff 1f       	adc	r31, r31
  c4:	ee 0f       	add	r30, r30
  c6:	ff 1f       	adc	r31, r31
  c8:	e8 0f       	add	r30, r24
  ca:	f9 1f       	adc	r31, r25
  cc:	ef 59       	subi	r30, 0x9F	; 159
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	82 81       	ldd	r24, Z+2	; 0x02
  d2:	28 23       	and	r18, r24
  d4:	28 bb       	out	0x18, r18	; 24
	PORTC &=  Servo_W[ Danie].Servo_portC_;
  d6:	25 b3       	in	r18, 0x15	; 21
  d8:	80 91 60 00 	lds	r24, 0x0060
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e8 0f       	add	r30, r24
  ea:	f9 1f       	adc	r31, r25
  ec:	ef 59       	subi	r30, 0x9F	; 159
  ee:	ff 4f       	sbci	r31, 0xFF	; 255
  f0:	81 81       	ldd	r24, Z+1	; 0x01
  f2:	28 23       	and	r18, r24
  f4:	25 bb       	out	0x15, r18	; 21
	PORTD &=  Servo_W[ Danie].Servo_portD_;
  f6:	22 b3       	in	r18, 0x12	; 18
  f8:	80 91 60 00 	lds	r24, 0x0060
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	ee 0f       	add	r30, r30
 102:	ff 1f       	adc	r31, r31
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	e8 0f       	add	r30, r24
 10a:	f9 1f       	adc	r31, r25
 10c:	ef 59       	subi	r30, 0x9F	; 159
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	83 81       	ldd	r24, Z+3	; 0x03
 112:	28 23       	and	r18, r24
 114:	22 bb       	out	0x12, r18	; 18
	Danie++;  
 116:	80 91 60 00 	lds	r24, 0x0060
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 60 00 	sts	0x0060, r24
	Temp = Servo_W[Danie].Servo_Position_;	     //считуем следующее врема		 		  		  
 120:	80 91 60 00 	lds	r24, 0x0060
	if ((Temp == 0xFF) | (Danie == MaxServo))    // проверяем на конец данных 0xFF или передача всех данных закончена
 124:	90 91 60 00 	lds	r25, 0x0060
 128:	94 31       	cpi	r25, 0x14	; 20
 12a:	69 f0       	breq	.+26     	; 0x146 <__vector_6+0xca>
    PORTA &=  Servo_W[ Danie].Servo_portA_;      // сброс портов относящиеся к данному времени 
	PORTB &=  Servo_W[  Danie].Servo_portB_;   
	PORTC &=  Servo_W[ Danie].Servo_portC_;
	PORTD &=  Servo_W[ Danie].Servo_portD_;
	Danie++;  
	Temp = Servo_W[Danie].Servo_Position_;	     //считуем следующее врема		 		  		  
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	ee 0f       	add	r30, r30
 136:	ff 1f       	adc	r31, r31
 138:	e8 0f       	add	r30, r24
 13a:	f9 1f       	adc	r31, r25
 13c:	ef 59       	subi	r30, 0x9F	; 159
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
	if ((Temp == 0xFF) | (Danie == MaxServo))    // проверяем на конец данных 0xFF или передача всех данных закончена
 140:	84 81       	ldd	r24, Z+4	; 0x04
 142:	8f 3f       	cpi	r24, 0xFF	; 255
 144:	41 f4       	brne	.+16     	; 0x156 <__vector_6+0xda>
	 { 
	   Danie = 0;
 146:	10 92 60 00 	sts	0x0060, r1
	   Servo_Dan &=~ (1<<0);
 14a:	80 91 c9 00 	lds	r24, 0x00C9
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	80 93 c9 00 	sts	0x00C9, r24
 154:	10 c0       	rjmp	.+32     	; 0x176 <__vector_6+0xfa>
	 }	   
	else
	 {	   
	   OCR1A  = Servo_W[Danie].Servo_Position_;  //первые данные по времени	        
 156:	80 91 60 00 	lds	r24, 0x0060
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	fc 01       	movw	r30, r24
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e8 0f       	add	r30, r24
 168:	f9 1f       	adc	r31, r25
 16a:	ef 59       	subi	r30, 0x9F	; 159
 16c:	ff 4f       	sbci	r31, 0xFF	; 255
 16e:	84 81       	ldd	r24, Z+4	; 0x04
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9b bd       	out	0x2b, r25	; 43
 174:	8a bd       	out	0x2a, r24	; 42
	 }		 	 	 
	TIFR |=(1<<OCIE1A);               //сброс флагов	
 176:	88 b7       	in	r24, 0x38	; 56
 178:	80 61       	ori	r24, 0x10	; 16
 17a:	88 bf       	out	0x38, r24	; 56
     TCCR1A |=(1<<WGM11); 			 			 		 			   		  		  			 			   	 
 17c:	8f b5       	in	r24, 0x2f	; 47
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	8f bd       	out	0x2f, r24	; 47
  }
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	9f 91       	pop	r25
 188:	8f 91       	pop	r24
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <__vector_8>:
  
 ISR(TIMER1_OVF_vect)                 //формеруем 20мс. 
  {	 
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
	PORTA |= Servo_Uctanovka[0];      //устанавливаем высокое состояние на порт(в зависимости с определением серводвигателей)
 1a4:	8b b3       	in	r24, 0x1b	; 27
 1a6:	90 91 c5 00 	lds	r25, 0x00C5
 1aa:	89 2b       	or	r24, r25
 1ac:	8b bb       	out	0x1b, r24	; 27
	PORTB |= Servo_Uctanovka[1];      //устанавливаем высокое состояние на порт(в зависимости с определением серводвигателей)
 1ae:	88 b3       	in	r24, 0x18	; 24
 1b0:	90 91 c6 00 	lds	r25, 0x00C6
 1b4:	89 2b       	or	r24, r25
 1b6:	88 bb       	out	0x18, r24	; 24
	PORTC |= Servo_Uctanovka[2];      //устанавливаем высокое состояние на порт(в зависимости с определением серводвигателей)
 1b8:	85 b3       	in	r24, 0x15	; 21
 1ba:	90 91 c7 00 	lds	r25, 0x00C7
 1be:	89 2b       	or	r24, r25
 1c0:	85 bb       	out	0x15, r24	; 21
	PORTD |= Servo_Uctanovka[3];      //устанавливаем высокое состояние на порт(в зависимости с определением серводвигателей)
 1c2:	82 b3       	in	r24, 0x12	; 18
 1c4:	90 91 c8 00 	lds	r25, 0x00C8
 1c8:	89 2b       	or	r24, r25
 1ca:	82 bb       	out	0x12, r24	; 18
	TCCR1A &=~(1<<WGM11);
 1cc:	8f b5       	in	r24, 0x2f	; 47
 1ce:	8d 7f       	andi	r24, 0xFD	; 253
 1d0:	8f bd       	out	0x2f, r24	; 47
	OCR1A  =Servo_W[0].Servo_Position_;  //первые данные по времени	        
 1d2:	80 91 65 00 	lds	r24, 0x0065
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	9b bd       	out	0x2b, r25	; 43
 1da:	8a bd       	out	0x2a, r24	; 42
	TIFR |=(1<<OCIE1A);                  //сброс флагов
 1dc:	88 b7       	in	r24, 0x38	; 56
 1de:	80 61       	ori	r24, 0x10	; 16
 1e0:	88 bf       	out	0x38, r24	; 56
	TCCR1A |=(1<<WGM11);
 1e2:	8f b5       	in	r24, 0x2f	; 47
 1e4:	82 60       	ori	r24, 0x02	; 2
 1e6:	8f bd       	out	0x2f, r24	; 47
  }
 1e8:	9f 91       	pop	r25
 1ea:	8f 91       	pop	r24
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <DanieServo_Port>:
  //*******************************//
  //*******************************// 
void DanieServo_Port(void)
 {	  	
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
   register unsigned char i,DD,Temp,S = (MaxServo - 1);
   unsigned char *F;  
   if ( Servo_Dan & (1<<0))
 1fa:	80 91 c9 00 	lds	r24, 0x00C9
 1fe:	80 fd       	sbrc	r24, 0
 200:	fd c0       	rjmp	.+506    	; 0x3fc <DanieServo_Port+0x206>
    return;
	asm("cli"); 
 202:	f8 94       	cli
	TIFR |=(1<<OCIE1A);                  //сброс флагов
	TCCR1A |=(1<<WGM11);
  }
  //*******************************//
  //*******************************// 
void DanieServo_Port(void)
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	a2 ef       	ldi	r26, 0xF2	; 242
 20a:	b0 e0       	ldi	r27, 0x00	; 0
  //  ** сортируем данные угла по возрастанию от меншего к болшему ** //	    
   do
    {
     i = 0;
	 DD = 0;		
	 while ( DD < S )   
 20c:	fd 01       	movw	r30, r26
 20e:	12 c0       	rjmp	.+36     	; 0x234 <DanieServo_Port+0x3e>
       {
		 DD++;		  	     		
	     if ( Servo_[i]->Position > Servo_[DD]->Position ) //определяем больше или нет первые данные прием вторые
 210:	61 91       	ld	r22, Z+
 212:	71 91       	ld	r23, Z+
 214:	20 81       	ld	r18, Z
 216:	31 81       	ldd	r19, Z+1	; 0x01
 218:	eb 01       	movw	r28, r22
 21a:	58 81       	ld	r21, Y
 21c:	e9 01       	movw	r28, r18
 21e:	48 81       	ld	r20, Y
 220:	45 17       	cp	r20, r21
 222:	40 f4       	brcc	.+16     	; 0x234 <DanieServo_Port+0x3e>
	TIFR |=(1<<OCIE1A);                  //сброс флагов
	TCCR1A |=(1<<WGM11);
  }
  //*******************************//
  //*******************************// 
void DanieServo_Port(void)
 224:	af 01       	movw	r20, r30
 226:	42 50       	subi	r20, 0x02	; 2
 228:	50 40       	sbci	r21, 0x00	; 0
       {
		 DD++;		  	     		
	     if ( Servo_[i]->Position > Servo_[DD]->Position ) //определяем больше или нет первые данные прием вторые
	      {
		    Temp =Servo_[i];                               //сохраняем первые данные
		    Servo_[i] = Servo_[DD];                        //презаписываем первые данные 
 22a:	ea 01       	movw	r28, r20
 22c:	39 83       	std	Y+1, r19	; 0x01
 22e:	28 83       	st	Y, r18
		    Servo_[DD]= Temp;                              //перезаписываем вторые данные      
 230:	60 83       	st	Z, r22
 232:	11 82       	std	Z+1, r1	; 0x01
  //  ** сортируем данные угла по возрастанию от меншего к болшему ** //	    
   do
    {
     i = 0;
	 DD = 0;		
	 while ( DD < S )   
 234:	e8 17       	cp	r30, r24
 236:	f9 07       	cpc	r31, r25
 238:	59 f7       	brne	.-42     	; 0x210 <DanieServo_Port+0x1a>
 23a:	cf 01       	movw	r24, r30
 23c:	02 97       	sbiw	r24, 0x02	; 2
		    Servo_[DD]= Temp;                              //перезаписываем вторые данные      
	      }	
		 i++;     	   	   
       }  
      S--;  	   		    	   	   	   
    } while (S > 0);                                       //сортируем массив в зависимости от значения MaxServo
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	82 3f       	cpi	r24, 0xF2	; 242
 242:	92 07       	cpc	r25, r18
 244:	09 f7       	brne	.-62     	; 0x208 <DanieServo_Port+0x12>
  // ** устанавливаем порты и данные по здвигу ** //
	DD = 0; 
	i = 0; 
	Servo_W[0].Servo_portA_ = 255;    
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	80 93 61 00 	sts	0x0061, r24
	Servo_W[0].Servo_portB_ = 255;
 24c:	80 93 63 00 	sts	0x0063, r24
	Servo_W[0].Servo_portC_ = 255;
 250:	80 93 62 00 	sts	0x0062, r24
	Servo_W[0].Servo_portD_ = 255;		
 254:	80 93 64 00 	sts	0x0064, r24
		 i++;     	   	   
       }  
      S--;  	   		    	   	   	   
    } while (S > 0);                                       //сортируем массив в зависимости от значения MaxServo
  // ** устанавливаем порты и данные по здвигу ** //
	DD = 0; 
 258:	60 e0       	ldi	r22, 0x00	; 0
	  Temp = Servo_[S]->BitPorta;	 //считываем данные по порту и пина		
	  switch ( Temp & 0b11110000)   //налажуем маску и узнаем имя порта 
		{
		case 0xA0: Servo_W[DD].Servo_portA_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуA		          			         			           
		case 0xB0: Servo_W[DD].Servo_portB_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуB		           			          
		case 0xC0: Servo_W[DD].Servo_portC_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуC
 25a:	21 e0       	ldi	r18, 0x01	; 1
 25c:	30 e0       	ldi	r19, 0x00	; 0
		break;				
	 if (!(Servo_[S]->Position == Servo_[i]->Position))     //проверяем следующие данные такиеже или нет
	  {
		Servo_W[DD].Servo_Position_ = Servo_[S]->Position; //сохраняем угол сдвига	к выставленым портам	
		DD++;						
		Servo_W[DD].Servo_portA_ = 255;  
 25e:	7f ef       	ldi	r23, 0xFF	; 255
	TIFR |=(1<<OCIE1A);                  //сброс флагов
	TCCR1A |=(1<<WGM11);
  }
  //*******************************//
  //*******************************// 
void DanieServo_Port(void)
 260:	ed 01       	movw	r28, r26
	Servo_W[0].Servo_portB_ = 255;
	Servo_W[0].Servo_portC_ = 255;
	Servo_W[0].Servo_portD_ = 255;		
	while (1)         
	 {			   					
	  Temp = Servo_[S]->BitPorta;	 //считываем данные по порту и пина		
 262:	ed 91       	ld	r30, X+
 264:	fc 91       	ld	r31, X
 266:	11 97       	sbiw	r26, 0x01	; 1
	  switch ( Temp & 0b11110000)   //налажуем маску и узнаем имя порта 
 268:	81 81       	ldd	r24, Z+1	; 0x01
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	40 7f       	andi	r20, 0xF0	; 240
 270:	50 70       	andi	r21, 0x00	; 0
 272:	40 3b       	cpi	r20, 0xB0	; 176
 274:	51 05       	cpc	r21, r1
 276:	41 f1       	breq	.+80     	; 0x2c8 <DanieServo_Port+0xd2>
 278:	41 3b       	cpi	r20, 0xB1	; 177
 27a:	51 05       	cpc	r21, r1
 27c:	2c f4       	brge	.+10     	; 0x288 <DanieServo_Port+0x92>
 27e:	40 3a       	cpi	r20, 0xA0	; 160
 280:	51 05       	cpc	r21, r1
 282:	09 f0       	breq	.+2      	; 0x286 <DanieServo_Port+0x90>
 284:	68 c0       	rjmp	.+208    	; 0x356 <DanieServo_Port+0x160>
 286:	08 c0       	rjmp	.+16     	; 0x298 <DanieServo_Port+0xa2>
 288:	40 3c       	cpi	r20, 0xC0	; 192
 28a:	51 05       	cpc	r21, r1
 28c:	a9 f1       	breq	.+106    	; 0x2f8 <DanieServo_Port+0x102>
 28e:	40 3d       	cpi	r20, 0xD0	; 208
 290:	51 05       	cpc	r21, r1
 292:	09 f0       	breq	.+2      	; 0x296 <DanieServo_Port+0xa0>
 294:	60 c0       	rjmp	.+192    	; 0x356 <DanieServo_Port+0x160>
 296:	48 c0       	rjmp	.+144    	; 0x328 <DanieServo_Port+0x132>
		{
		case 0xA0: Servo_W[DD].Servo_portA_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуA		          			         			           
 298:	46 2f       	mov	r20, r22
 29a:	50 e0       	ldi	r21, 0x00	; 0
 29c:	fa 01       	movw	r30, r20
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	e4 0f       	add	r30, r20
 2a8:	f5 1f       	adc	r31, r21
 2aa:	ef 59       	subi	r30, 0x9F	; 159
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	90 70       	andi	r25, 0x00	; 0
 2b2:	a9 01       	movw	r20, r18
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DanieServo_Port+0xc4>
 2b6:	44 0f       	add	r20, r20
 2b8:	55 1f       	adc	r21, r21
 2ba:	8a 95       	dec	r24
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DanieServo_Port+0xc0>
 2be:	ca 01       	movw	r24, r20
 2c0:	40 81       	ld	r20, Z
 2c2:	48 27       	eor	r20, r24
 2c4:	40 83       	st	Z, r20
 2c6:	47 c0       	rjmp	.+142    	; 0x356 <DanieServo_Port+0x160>
		case 0xB0: Servo_W[DD].Servo_portB_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуB		           			          
 2c8:	46 2f       	mov	r20, r22
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	fa 01       	movw	r30, r20
 2ce:	ee 0f       	add	r30, r30
 2d0:	ff 1f       	adc	r31, r31
 2d2:	ee 0f       	add	r30, r30
 2d4:	ff 1f       	adc	r31, r31
 2d6:	e4 0f       	add	r30, r20
 2d8:	f5 1f       	adc	r31, r21
 2da:	ef 59       	subi	r30, 0x9F	; 159
 2dc:	ff 4f       	sbci	r31, 0xFF	; 255
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	90 70       	andi	r25, 0x00	; 0
 2e2:	a9 01       	movw	r20, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DanieServo_Port+0xf4>
 2e6:	44 0f       	add	r20, r20
 2e8:	55 1f       	adc	r21, r21
 2ea:	8a 95       	dec	r24
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DanieServo_Port+0xf0>
 2ee:	ca 01       	movw	r24, r20
 2f0:	42 81       	ldd	r20, Z+2	; 0x02
 2f2:	48 27       	eor	r20, r24
 2f4:	42 83       	std	Z+2, r20	; 0x02
 2f6:	2f c0       	rjmp	.+94     	; 0x356 <DanieServo_Port+0x160>
		case 0xC0: Servo_W[DD].Servo_portC_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуC
 2f8:	46 2f       	mov	r20, r22
 2fa:	50 e0       	ldi	r21, 0x00	; 0
 2fc:	fa 01       	movw	r30, r20
 2fe:	ee 0f       	add	r30, r30
 300:	ff 1f       	adc	r31, r31
 302:	ee 0f       	add	r30, r30
 304:	ff 1f       	adc	r31, r31
 306:	e4 0f       	add	r30, r20
 308:	f5 1f       	adc	r31, r21
 30a:	ef 59       	subi	r30, 0x9F	; 159
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	8f 70       	andi	r24, 0x0F	; 15
 310:	90 70       	andi	r25, 0x00	; 0
 312:	a9 01       	movw	r20, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DanieServo_Port+0x124>
 316:	44 0f       	add	r20, r20
 318:	55 1f       	adc	r21, r21
 31a:	8a 95       	dec	r24
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DanieServo_Port+0x120>
 31e:	ca 01       	movw	r24, r20
 320:	41 81       	ldd	r20, Z+1	; 0x01
 322:	48 27       	eor	r20, r24
 324:	41 83       	std	Z+1, r20	; 0x01
 326:	17 c0       	rjmp	.+46     	; 0x356 <DanieServo_Port+0x160>
		case 0xD0: Servo_W[DD].Servo_portD_ ^= (1<<(Temp & 0b00001111)); break;	//устанавливаем бит в ноль на портуD
 328:	46 2f       	mov	r20, r22
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	fa 01       	movw	r30, r20
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	ee 0f       	add	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	e4 0f       	add	r30, r20
 338:	f5 1f       	adc	r31, r21
 33a:	ef 59       	subi	r30, 0x9F	; 159
 33c:	ff 4f       	sbci	r31, 0xFF	; 255
 33e:	8f 70       	andi	r24, 0x0F	; 15
 340:	90 70       	andi	r25, 0x00	; 0
 342:	a9 01       	movw	r20, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DanieServo_Port+0x154>
 346:	44 0f       	add	r20, r20
 348:	55 1f       	adc	r21, r21
 34a:	8a 95       	dec	r24
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DanieServo_Port+0x150>
 34e:	ca 01       	movw	r24, r20
 350:	43 81       	ldd	r20, Z+3	; 0x03
 352:	48 27       	eor	r20, r24
 354:	43 83       	std	Z+3, r20	; 0x03
		}
	 i++;
	 if ( i == MaxServo )
 356:	51 e0       	ldi	r21, 0x01	; 1
 358:	a8 31       	cpi	r26, 0x18	; 24
 35a:	b5 07       	cpc	r27, r21
 35c:	41 f1       	breq	.+80     	; 0x3ae <DanieServo_Port+0x1b8>
 35e:	12 96       	adiw	r26, 0x02	; 2
		break;				
	 if (!(Servo_[S]->Position == Servo_[i]->Position))     //проверяем следующие данные такиеже или нет
 360:	e8 81       	ld	r30, Y
 362:	f9 81       	ldd	r31, Y+1	; 0x01
 364:	40 81       	ld	r20, Z
 366:	ed 91       	ld	r30, X+
 368:	fc 91       	ld	r31, X
 36a:	11 97       	sbiw	r26, 0x01	; 1
 36c:	80 81       	ld	r24, Z
 36e:	48 17       	cp	r20, r24
 370:	09 f4       	brne	.+2      	; 0x374 <DanieServo_Port+0x17e>
 372:	76 cf       	rjmp	.-276    	; 0x260 <DanieServo_Port+0x6a>
	  {
		Servo_W[DD].Servo_Position_ = Servo_[S]->Position; //сохраняем угол сдвига	к выставленым портам	
 374:	86 2f       	mov	r24, r22
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	fc 01       	movw	r30, r24
 37a:	ee 0f       	add	r30, r30
 37c:	ff 1f       	adc	r31, r31
 37e:	ee 0f       	add	r30, r30
 380:	ff 1f       	adc	r31, r31
 382:	e8 0f       	add	r30, r24
 384:	f9 1f       	adc	r31, r25
 386:	ef 59       	subi	r30, 0x9F	; 159
 388:	ff 4f       	sbci	r31, 0xFF	; 255
 38a:	44 83       	std	Z+4, r20	; 0x04
		DD++;						
 38c:	6f 5f       	subi	r22, 0xFF	; 255
		Servo_W[DD].Servo_portA_ = 255;  
 38e:	86 2f       	mov	r24, r22
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	fc 01       	movw	r30, r24
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	ee 0f       	add	r30, r30
 39a:	ff 1f       	adc	r31, r31
 39c:	e8 0f       	add	r30, r24
 39e:	f9 1f       	adc	r31, r25
 3a0:	ef 59       	subi	r30, 0x9F	; 159
 3a2:	ff 4f       	sbci	r31, 0xFF	; 255
 3a4:	70 83       	st	Z, r23
		Servo_W[DD].Servo_portB_ = 255;
 3a6:	72 83       	std	Z+2, r23	; 0x02
		Servo_W[DD].Servo_portC_ = 255;
 3a8:	71 83       	std	Z+1, r23	; 0x01
		Servo_W[DD].Servo_portD_ = 255;	 				 				 												 
 3aa:	73 83       	std	Z+3, r23	; 0x03
 3ac:	59 cf       	rjmp	.-334    	; 0x260 <DanieServo_Port+0x6a>
	  }		 			 			  				  		
	 S++; 	   		   		   		 				    				    	     			      		  
    } 	 	 
	   if ( DD < MaxServo ) 
 3ae:	64 31       	cpi	r22, 0x14	; 20
 3b0:	f8 f4       	brcc	.+62     	; 0x3f0 <DanieServo_Port+0x1fa>
		{
		Servo_W[DD].Servo_Position_ = Servo_[S]->Position; //сохраняем угол сдвига	к выставленым портам 
 3b2:	26 2f       	mov	r18, r22
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	f9 01       	movw	r30, r18
 3b8:	ee 0f       	add	r30, r30
 3ba:	ff 1f       	adc	r31, r31
 3bc:	ee 0f       	add	r30, r30
 3be:	ff 1f       	adc	r31, r31
 3c0:	e2 0f       	add	r30, r18
 3c2:	f3 1f       	adc	r31, r19
 3c4:	ef 59       	subi	r30, 0x9F	; 159
 3c6:	ff 4f       	sbci	r31, 0xFF	; 255
 3c8:	a0 91 18 01 	lds	r26, 0x0118
 3cc:	b0 91 19 01 	lds	r27, 0x0119
 3d0:	8c 91       	ld	r24, X
 3d2:	84 83       	std	Z+4, r24	; 0x04
		DD++; 
 3d4:	6f 5f       	subi	r22, 0xFF	; 255
		Servo_W[DD].Servo_Position_ = 0xFF;
 3d6:	86 2f       	mov	r24, r22
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	fc 01       	movw	r30, r24
 3dc:	ee 0f       	add	r30, r30
 3de:	ff 1f       	adc	r31, r31
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	e8 0f       	add	r30, r24
 3e6:	f9 1f       	adc	r31, r25
 3e8:	ef 59       	subi	r30, 0x9F	; 159
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	84 83       	std	Z+4, r24	; 0x04
		}
	Servo_Dan |=(1<<0);
 3f0:	80 91 c9 00 	lds	r24, 0x00C9
 3f4:	81 60       	ori	r24, 0x01	; 1
 3f6:	80 93 c9 00 	sts	0x00C9, r24
	asm("sei"); 	 	 	  	 		   	  	
 3fa:	78 94       	sei
 }
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <Servo_Port_Ustanovki>:
 //********************************//      
void Servo_Port_Ustanovki(void)
  {
 402:	a2 ef       	ldi	r26, 0xF2	; 242
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	eb ec       	ldi	r30, 0xCB	; 203
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	20 e0       	ldi	r18, 0x00	; 0
 40c:	30 e0       	ldi	r19, 0x00	; 0
				PORTB &=~ Temp;                  //сброс порта в ноль
				DDRB |= Temp;                    //переопределяем порт на выход
				Servo_Uctanovka[1] |=Temp;	     //устанавливаем какие биты портаВ нужно вкл. каждые 20милесикунд 
			    break;			           			          
			case 0xC0 ... 0xC7: 
				Temp = (1<<(Temp & 0b00001111)); //определяем какой бит выставить на порту 
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	90 e0       	ldi	r25, 0x00	; 0
  {
	register uint8_t Temp,i = 0;		
	//=================// 	 	 
   while ( i < MaxServo )      
	 {
        Servo_[i]= &Servo[i];	   	
 412:	a9 01       	movw	r20, r18
 414:	44 0f       	add	r20, r20
 416:	55 1f       	adc	r21, r21
 418:	46 53       	subi	r20, 0x36	; 54
 41a:	5f 4f       	sbci	r21, 0xFF	; 255
 41c:	4d 93       	st	X+, r20
 41e:	5d 93       	st	X+, r21
		Temp = Servo[i].BitPorta;      //узнаем привязку даного сервопривода (какой порт и бит )		 	
 420:	40 81       	ld	r20, Z
		switch ( Temp )                //определяем с каким портом будем работать 
 422:	48 3b       	cpi	r20, 0xB8	; 184
 424:	40 f4       	brcc	.+16     	; 0x436 <Servo_Port_Ustanovki+0x34>
 426:	40 3b       	cpi	r20, 0xB0	; 176
 428:	38 f5       	brcc	.+78     	; 0x478 <__stack+0x19>
 42a:	54 2f       	mov	r21, r20
 42c:	50 5a       	subi	r21, 0xA0	; 160
 42e:	58 30       	cpi	r21, 0x08	; 8
 430:	08 f0       	brcs	.+2      	; 0x434 <Servo_Port_Ustanovki+0x32>
 432:	63 c0       	rjmp	.+198    	; 0x4fa <__stack+0x9b>
 434:	0b c0       	rjmp	.+22     	; 0x44c <Servo_Port_Ustanovki+0x4a>
 436:	40 3c       	cpi	r20, 0xC0	; 192
 438:	08 f4       	brcc	.+2      	; 0x43c <Servo_Port_Ustanovki+0x3a>
 43a:	5f c0       	rjmp	.+190    	; 0x4fa <__stack+0x9b>
 43c:	48 3c       	cpi	r20, 0xC8	; 200
 43e:	90 f1       	brcs	.+100    	; 0x4a4 <__stack+0x45>
 440:	54 2f       	mov	r21, r20
 442:	50 5d       	subi	r21, 0xD0	; 208
 444:	58 30       	cpi	r21, 0x08	; 8
 446:	08 f0       	brcs	.+2      	; 0x44a <Servo_Port_Ustanovki+0x48>
 448:	58 c0       	rjmp	.+176    	; 0x4fa <__stack+0x9b>
 44a:	42 c0       	rjmp	.+132    	; 0x4d0 <__stack+0x71>
		 {
			case 0xA0 ... 0xA7:  
				Temp = (1<<(Temp & 0b00001111)); //определяем какой бит выставить на порту 
 44c:	4f 70       	andi	r20, 0x0F	; 15
 44e:	bc 01       	movw	r22, r24
 450:	02 c0       	rjmp	.+4      	; 0x456 <Servo_Port_Ustanovki+0x54>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	4a 95       	dec	r20
 458:	e2 f7       	brpl	.-8      	; 0x452 <Servo_Port_Ustanovki+0x50>
 45a:	ab 01       	movw	r20, r22
				PORTA &=~ Temp;                  //сброс порта в ноль
 45c:	6b b3       	in	r22, 0x1b	; 27
 45e:	54 2f       	mov	r21, r20
 460:	50 95       	com	r21
 462:	56 23       	and	r21, r22
 464:	5b bb       	out	0x1b, r21	; 27
				DDRA |= Temp;                    //переопределяем порт на выход
 466:	5a b3       	in	r21, 0x1a	; 26
 468:	54 2b       	or	r21, r20
 46a:	5a bb       	out	0x1a, r21	; 26
				Servo_Uctanovka[0] |=Temp;    	 //устанавливаем какие биты портаА нужно вкл. каждые 20милесикунд 						 
 46c:	50 91 c5 00 	lds	r21, 0x00C5
 470:	54 2b       	or	r21, r20
 472:	50 93 c5 00 	sts	0x00C5, r21
			    break;			          			         			           
 476:	41 c0       	rjmp	.+130    	; 0x4fa <__stack+0x9b>
			case 0xB0 ... 0xB7:  
				Temp = (1<<(Temp & 0b00001111)); //определяем какой бит выставить на порту 
 478:	4f 70       	andi	r20, 0x0F	; 15
 47a:	bc 01       	movw	r22, r24
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__stack+0x23>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	4a 95       	dec	r20
 484:	e2 f7       	brpl	.-8      	; 0x47e <__stack+0x1f>
 486:	ab 01       	movw	r20, r22
				PORTB &=~ Temp;                  //сброс порта в ноль
 488:	68 b3       	in	r22, 0x18	; 24
 48a:	54 2f       	mov	r21, r20
 48c:	50 95       	com	r21
 48e:	56 23       	and	r21, r22
 490:	58 bb       	out	0x18, r21	; 24
				DDRB |= Temp;                    //переопределяем порт на выход
 492:	57 b3       	in	r21, 0x17	; 23
 494:	54 2b       	or	r21, r20
 496:	57 bb       	out	0x17, r21	; 23
				Servo_Uctanovka[1] |=Temp;	     //устанавливаем какие биты портаВ нужно вкл. каждые 20милесикунд 
 498:	50 91 c6 00 	lds	r21, 0x00C6
 49c:	54 2b       	or	r21, r20
 49e:	50 93 c6 00 	sts	0x00C6, r21
			    break;			           			          
 4a2:	2b c0       	rjmp	.+86     	; 0x4fa <__stack+0x9b>
			case 0xC0 ... 0xC7: 
				Temp = (1<<(Temp & 0b00001111)); //определяем какой бит выставить на порту 
 4a4:	4f 70       	andi	r20, 0x0F	; 15
 4a6:	bc 01       	movw	r22, r24
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__stack+0x4f>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	4a 95       	dec	r20
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__stack+0x4b>
 4b2:	ab 01       	movw	r20, r22
				PORTC &=~ Temp;                  //сброс порта в ноль                   
 4b4:	65 b3       	in	r22, 0x15	; 21
 4b6:	54 2f       	mov	r21, r20
 4b8:	50 95       	com	r21
 4ba:	56 23       	and	r21, r22
 4bc:	55 bb       	out	0x15, r21	; 21
				DDRC |= Temp;                    //переопределяем порт на выход
 4be:	54 b3       	in	r21, 0x14	; 20
 4c0:	54 2b       	or	r21, r20
 4c2:	54 bb       	out	0x14, r21	; 20
				Servo_Uctanovka[2] |=Temp;	     //устанавливаем какие биты портаC нужно вкл. каждые 20милесикунд 
 4c4:	50 91 c7 00 	lds	r21, 0x00C7
 4c8:	54 2b       	or	r21, r20
 4ca:	50 93 c7 00 	sts	0x00C7, r21
			    break;	
 4ce:	15 c0       	rjmp	.+42     	; 0x4fa <__stack+0x9b>
			case 0xD0 ... 0xD7:  
				Temp = (1<<(Temp & 0b00001111)); //определяем какой бит выставить на порту 
 4d0:	4f 70       	andi	r20, 0x0F	; 15
 4d2:	bc 01       	movw	r22, r24
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__stack+0x7b>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	4a 95       	dec	r20
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <__stack+0x77>
 4de:	ab 01       	movw	r20, r22
				PORTD &=~ Temp;                  //сброс порта в ноль 
 4e0:	62 b3       	in	r22, 0x12	; 18
 4e2:	54 2f       	mov	r21, r20
 4e4:	50 95       	com	r21
 4e6:	56 23       	and	r21, r22
 4e8:	52 bb       	out	0x12, r21	; 18
				DDRD |= Temp;                    //переопределяем порт на выход
 4ea:	51 b3       	in	r21, 0x11	; 17
 4ec:	54 2b       	or	r21, r20
 4ee:	51 bb       	out	0x11, r21	; 17
				Servo_Uctanovka[3] |=Temp;	     //устанавливаем какие биты портаD нужно вкл. каждые 20милесикунд 
 4f0:	50 91 c8 00 	lds	r21, 0x00C8
 4f4:	54 2b       	or	r21, r20
 4f6:	50 93 c8 00 	sts	0x00C8, r21
			    break;	
 4fa:	2f 5f       	subi	r18, 0xFF	; 255
 4fc:	3f 4f       	sbci	r19, 0xFF	; 255
 4fe:	32 96       	adiw	r30, 0x02	; 2
 //********************************//      
void Servo_Port_Ustanovki(void)
  {
	register uint8_t Temp,i = 0;		
	//=================// 	 	 
   while ( i < MaxServo )      
 500:	24 31       	cpi	r18, 0x14	; 20
 502:	31 05       	cpc	r19, r1
 504:	09 f0       	breq	.+2      	; 0x508 <__stack+0xa9>
 506:	85 cf       	rjmp	.-246    	; 0x412 <Servo_Port_Ustanovki+0x10>
				Servo_Uctanovka[3] |=Temp;	     //устанавливаем какие биты портаD нужно вкл. каждые 20милесикунд 
			    break;	
		}
	   i++;			
	 }	
	ICR1 = 2500;//5000 формеруем 20мс. для 16Мгц. //2500 формеруем 20мс. для 8Мгц.		 
 508:	84 ec       	ldi	r24, 0xC4	; 196
 50a:	99 e0       	ldi	r25, 0x09	; 9
 50c:	97 bd       	out	0x27, r25	; 39
 50e:	86 bd       	out	0x26, r24	; 38
	TCCR1B |= (1 << ICES1)|(1<<CS10)|(1<<CS11)|(1<<WGM12)|(1<<WGM13);
 510:	8e b5       	in	r24, 0x2e	; 46
 512:	8b 65       	ori	r24, 0x5B	; 91
 514:	8e bd       	out	0x2e, r24	; 46
	TIMSK |=(1<<TOIE1)|(1<<OCIE1A);
 516:	89 b7       	in	r24, 0x39	; 57
 518:	84 61       	ori	r24, 0x14	; 20
 51a:	89 bf       	out	0x39, r24	; 57
	TCCR1A |=(1<<WGM11);  				 	  	  	  
 51c:	8f b5       	in	r24, 0x2f	; 47
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	8f bd       	out	0x2f, r24	; 47
 522:	08 95       	ret

00000524 <main>:
#include "Servo_Privod.c"  
#include "Servo_Privod.h"
//************************//
//************************//	
 void main()
  { 			
 524:	1f 93       	push	r17
	Servo[0].BitPorta =  0xA6;    //1 - серводвигатель подключаем к портуA, 6-пину	
 526:	86 ea       	ldi	r24, 0xA6	; 166
 528:	80 93 cb 00 	sts	0x00CB, r24
	Servo[1].BitPorta =  0xB0;	  //2 - серводвигатель подключаем к портуB, 0-пину	
 52c:	80 eb       	ldi	r24, 0xB0	; 176
 52e:	80 93 cd 00 	sts	0x00CD, r24
	Servo[2].BitPorta =  0xC6;    //3 - серводвигатель подключаем к портуC, 6-пину	
 532:	86 ec       	ldi	r24, 0xC6	; 198
 534:	80 93 cf 00 	sts	0x00CF, r24
	Servo[3].BitPorta =  0xD0;    
 538:	80 ed       	ldi	r24, 0xD0	; 208
 53a:	80 93 d1 00 	sts	0x00D1, r24
	Servo[4].BitPorta =  0xA7;	
 53e:	87 ea       	ldi	r24, 0xA7	; 167
 540:	80 93 d3 00 	sts	0x00D3, r24
	Servo[5].BitPorta =  0xC7;	
 544:	87 ec       	ldi	r24, 0xC7	; 199
 546:	80 93 d5 00 	sts	0x00D5, r24
	Servo[6].BitPorta =  0xD1;
 54a:	81 ed       	ldi	r24, 0xD1	; 209
 54c:	80 93 d7 00 	sts	0x00D7, r24
	Servo[7].BitPorta =  0xB1;
 550:	81 eb       	ldi	r24, 0xB1	; 177
 552:	80 93 d9 00 	sts	0x00D9, r24
	Servo[8].BitPorta =  0xA2;	
 556:	82 ea       	ldi	r24, 0xA2	; 162
 558:	80 93 db 00 	sts	0x00DB, r24
	Servo[9].BitPorta =  0xC2;	
 55c:	82 ec       	ldi	r24, 0xC2	; 194
 55e:	80 93 dd 00 	sts	0x00DD, r24
	Servo[10].BitPorta = 0xB2;
 562:	82 eb       	ldi	r24, 0xB2	; 178
 564:	80 93 df 00 	sts	0x00DF, r24
	Servo[11].BitPorta = 0xD2;
 568:	82 ed       	ldi	r24, 0xD2	; 210
 56a:	80 93 e1 00 	sts	0x00E1, r24
	Servo[12].BitPorta = 0xA3;	
 56e:	83 ea       	ldi	r24, 0xA3	; 163
 570:	80 93 e3 00 	sts	0x00E3, r24
	Servo[13].BitPorta = 0xC3;	
 574:	83 ec       	ldi	r24, 0xC3	; 195
 576:	80 93 e5 00 	sts	0x00E5, r24
	Servo[14].BitPorta = 0xB3;
 57a:	83 eb       	ldi	r24, 0xB3	; 179
 57c:	80 93 e7 00 	sts	0x00E7, r24
	Servo[15].BitPorta = 0xD3;
 580:	83 ed       	ldi	r24, 0xD3	; 211
 582:	80 93 e9 00 	sts	0x00E9, r24
	Servo[16].BitPorta = 0xA4;
 586:	84 ea       	ldi	r24, 0xA4	; 164
 588:	80 93 eb 00 	sts	0x00EB, r24
	Servo[17].BitPorta = 0xC4;	
 58c:	84 ec       	ldi	r24, 0xC4	; 196
 58e:	80 93 ed 00 	sts	0x00ED, r24
	Servo[18].BitPorta = 0xB4;	
 592:	84 eb       	ldi	r24, 0xB4	; 180
 594:	80 93 ef 00 	sts	0x00EF, r24
	Servo[19].BitPorta = 0xD4;	
 598:	84 ed       	ldi	r24, 0xD4	; 212
 59a:	80 93 f1 00 	sts	0x00F1, r24
 //===========================//
    Servo[0].Position = 125;
 59e:	ea ec       	ldi	r30, 0xCA	; 202
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	8d e7       	ldi	r24, 0x7D	; 125
 5a4:	80 93 ca 00 	sts	0x00CA, r24
    Servo[1].Position = 125;
 5a8:	82 83       	std	Z+2, r24	; 0x02
    Servo[2].Position = 100;
 5aa:	94 e6       	ldi	r25, 0x64	; 100
 5ac:	94 83       	std	Z+4, r25	; 0x04
    Servo[3].Position = 80;
 5ae:	80 e5       	ldi	r24, 0x50	; 80
 5b0:	86 83       	std	Z+6, r24	; 0x06
    Servo[4].Position = 75;
 5b2:	2b e4       	ldi	r18, 0x4B	; 75
 5b4:	20 87       	std	Z+8, r18	; 0x08
    Servo[5].Position = 75;
 5b6:	22 87       	std	Z+10, r18	; 0x0a
    Servo[6].Position = 70;
 5b8:	26 e4       	ldi	r18, 0x46	; 70
 5ba:	24 87       	std	Z+12, r18	; 0x0c
    Servo[7].Position = 70;
 5bc:	26 87       	std	Z+14, r18	; 0x0e
    Servo[8].Position = 110;
 5be:	2e e6       	ldi	r18, 0x6E	; 110
 5c0:	20 8b       	std	Z+16, r18	; 0x10
    Servo[9].Position = 110;
 5c2:	22 8b       	std	Z+18, r18	; 0x12
    Servo[10].Position = 105;
 5c4:	29 e6       	ldi	r18, 0x69	; 105
 5c6:	24 8b       	std	Z+20, r18	; 0x14
    Servo[11].Position = 105;
 5c8:	26 8b       	std	Z+22, r18	; 0x16
    Servo[12].Position = 100;
 5ca:	90 8f       	std	Z+24, r25	; 0x18
    Servo[13].Position = 80;
 5cc:	82 8f       	std	Z+26, r24	; 0x1a
    Servo[14].Position = 130;
 5ce:	82 e8       	ldi	r24, 0x82	; 130
 5d0:	84 8f       	std	Z+28, r24	; 0x1c
    Servo[15].Position = 135;
 5d2:	87 e8       	ldi	r24, 0x87	; 135
 5d4:	86 8f       	std	Z+30, r24	; 0x1e
    Servo[16].Position = 140;
 5d6:	8c e8       	ldi	r24, 0x8C	; 140
 5d8:	80 a3       	std	Z+32, r24	; 0x20
    Servo[17].Position = 145;
 5da:	81 e9       	ldi	r24, 0x91	; 145
 5dc:	82 a3       	std	Z+34, r24	; 0x22
    Servo[18].Position = 150;
 5de:	86 e9       	ldi	r24, 0x96	; 150
 5e0:	84 a3       	std	Z+36, r24	; 0x24
    Servo[19].Position = 155;
 5e2:	8b e9       	ldi	r24, 0x9B	; 155
 5e4:	86 a3       	std	Z+38, r24	; 0x26
 //===========================//			 	
   Servo_Port_Ustanovki(); //переопределяем порты,начальное положение сервы,   
 5e6:	0e 94 01 02 	call	0x402	; 0x402 <Servo_Port_Ustanovki>
   asm("sei");
 5ea:	78 94       	sei
//=====================//			
   while(1)
	{ 
	  DanieServo_Port();
	  //----------
	   Servo[2].Position = 100;
 5ec:	14 e6       	ldi	r17, 0x64	; 100
   Servo_Port_Ustanovki(); //переопределяем порты,начальное положение сервы,   
   asm("sei");
//=====================//			
   while(1)
	{ 
	  DanieServo_Port();
 5ee:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DanieServo_Port>
	  //----------
	   Servo[2].Position = 100;
 5f2:	10 93 ce 00 	sts	0x00CE, r17
	  
	  //-----------
	  asm("nop");	  
 5f6:	00 00       	nop
 5f8:	fa cf       	rjmp	.-12     	; 0x5ee <main+0xca>

000005fa <_exit>:
 5fa:	f8 94       	cli

000005fc <__stop_program>:
 5fc:	ff cf       	rjmp	.-2      	; 0x5fc <__stop_program>


Matrix_KeyBoard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000064c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  0000064c  000006e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  008000ae  008000ae  0000072e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c41  00000000  00000000  000009c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c86  00000000  00000000  00002605  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ce  00000000  00000000  0000328b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000588  00000000  00000000  0000485c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000786  00000000  00000000  00004de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014c9  00000000  00000000  0000556a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00006a33  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_3>
  10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__vector_4>
  14:	0c 94 24 01 	jmp	0x248	; 0x248 <__vector_5>
  18:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_6>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_8>
  24:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_9>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	5c 01       	movw	r10, r24
  56:	5f 01       	movw	r10, r30
  58:	63 01       	movw	r12, r6
  5a:	67 01       	movw	r12, r14
  5c:	6b 01       	movw	r12, r22
  5e:	6f 01       	movw	r12, r30
  60:	73 01       	movw	r14, r6
  62:	8a 01       	movw	r16, r20
  64:	8d 01       	movw	r16, r26
  66:	91 01       	movw	r18, r2
  68:	95 01       	movw	r18, r10
  6a:	99 01       	movw	r18, r18
  6c:	9d 01       	movw	r18, r26
  6e:	a1 01       	movw	r20, r2

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf e5       	ldi	r28, 0x5F	; 95
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	10 e0       	ldi	r17, 0x00	; 0
  7e:	a0 e6       	ldi	r26, 0x60	; 96
  80:	b0 e0       	ldi	r27, 0x00	; 0
  82:	ec e4       	ldi	r30, 0x4C	; 76
  84:	f6 e0       	ldi	r31, 0x06	; 6
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 3a       	cpi	r26, 0xAE	; 174
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	ae ea       	ldi	r26, 0xAE	; 174
  96:	b0 e0       	ldi	r27, 0x00	; 0
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 3b       	cpi	r26, 0xB8	; 184
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 81 02 	call	0x502	; 0x502 <main>
  a6:	0c 94 24 03 	jmp	0x648	; 0x648 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_9>:
 void SelectFreqDel(char flag);
//==========================Прерывания================================

//--------------------------------TIMER0------------------------------------
ISR(TIMER0_OVF_vect)
{
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	2f 93       	push	r18
  ba:	3f 93       	push	r19
  bc:	4f 93       	push	r20
  be:	5f 93       	push	r21
  c0:	6f 93       	push	r22
  c2:	7f 93       	push	r23
  c4:	8f 93       	push	r24
  c6:	9f 93       	push	r25
  c8:	af 93       	push	r26
  ca:	bf 93       	push	r27
  cc:	cf 93       	push	r28
  ce:	ef 93       	push	r30
  d0:	ff 93       	push	r31
//=========Операции=============
//----------------------------------Обработка матричной клавиатуры
	unsigned char i,j;

	//конфигурируе столбцы
	DDRC&=~((1<<PC4)|(1<<PC5)|(1<<PC6));
  d2:	84 b3       	in	r24, 0x14	; 20
  d4:	8f 78       	andi	r24, 0x8F	; 143
  d6:	84 bb       	out	0x14, r24	; 20
	PORTC|=(1<<PC4)|(1<<PC5)|(1<<PC6);
  d8:	85 b3       	in	r24, 0x15	; 21
  da:	80 67       	ori	r24, 0x70	; 112
  dc:	85 bb       	out	0x15, r24	; 21
	//конфигурируем строки
	DDRC|=(1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3);
  de:	84 b3       	in	r24, 0x14	; 20
  e0:	8f 60       	ori	r24, 0x0F	; 15
  e2:	84 bb       	out	0x14, r24	; 20
	PORTC&=~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
  e4:	85 b3       	in	r24, 0x15	; 21
  e6:	80 7f       	andi	r24, 0xF0	; 240
  e8:	85 bb       	out	0x15, r24	; 21

	

	pause(10);
  ea:	8a e0       	ldi	r24, 0x0A	; 10
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <pause>
	i=3;
	//проверяем значение на ногах по столбцам
	if (!(PINC&(1<<PC4)))
  f2:	9c 99       	sbic	0x13, 4	; 19
  f4:	02 c0       	rjmp	.+4      	; 0xfa <__vector_9+0x4c>
	{
		i=0;
  f6:	c0 e0       	ldi	r28, 0x00	; 0
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_9+0x4e>
	PORTC&=~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));

	

	pause(10);
	i=3;
  fa:	c3 e0       	ldi	r28, 0x03	; 3
	//проверяем значение на ногах по столбцам
	if (!(PINC&(1<<PC4)))
	{
		i=0;
	}
	if (!(PINC&(1<<PC5)))
  fc:	9d 9b       	sbis	0x13, 5	; 19
	{
		i=1;
  fe:	c1 e0       	ldi	r28, 0x01	; 1
	}
	if (!(PINC&(1<<PC6)))
 100:	9e 9b       	sbis	0x13, 6	; 19
	{
		i=2;
 102:	c2 e0       	ldi	r28, 0x02	; 2
	}

	//конфигурируем столбцы
	DDRC|=((1<<PC4)|(1<<PC5)|(1<<PC6));
 104:	84 b3       	in	r24, 0x14	; 20
 106:	80 67       	ori	r24, 0x70	; 112
 108:	84 bb       	out	0x14, r24	; 20
	PORTC&=~((1<<PC4)|(1<<PC5)|(1<<PC6));
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	8f 78       	andi	r24, 0x8F	; 143
 10e:	85 bb       	out	0x15, r24	; 21
	//конфигурируем строки
	DDRC&=~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
 110:	84 b3       	in	r24, 0x14	; 20
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	84 bb       	out	0x14, r24	; 20
	PORTC|=((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
 116:	85 b3       	in	r24, 0x15	; 21
 118:	8f 60       	ori	r24, 0x0F	; 15
 11a:	85 bb       	out	0x15, r24	; 21

	pause(10);
 11c:	8a e0       	ldi	r24, 0x0A	; 10
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <pause>
	j=4;
	//проверяем значение по строкам
	if (!(PINC&(1<<PC0)))
 124:	98 99       	sbic	0x13, 0	; 19
 126:	02 c0       	rjmp	.+4      	; 0x12c <__vector_9+0x7e>
	{
		j=0;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	01 c0       	rjmp	.+2      	; 0x12e <__vector_9+0x80>
	//конфигурируем строки
	DDRC&=~((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));
	PORTC|=((1<<PC0)|(1<<PC1)|(1<<PC2)|(1<<PC3));

	pause(10);
	j=4;
 12c:	84 e0       	ldi	r24, 0x04	; 4
	//проверяем значение по строкам
	if (!(PINC&(1<<PC0)))
	{
		j=0;
	}
	if (!(PINC&(1<<PC1)))
 12e:	99 9b       	sbis	0x13, 1	; 19
	{
		j=1;
 130:	81 e0       	ldi	r24, 0x01	; 1
	}
	if (!(PINC&(1<<PC2)))
 132:	9a 9b       	sbis	0x13, 2	; 19
	{
		j=2;
 134:	82 e0       	ldi	r24, 0x02	; 2
	}
	if (!(PINC&(1<<PC3)))
 136:	9b 9b       	sbis	0x13, 3	; 19
 138:	22 c0       	rjmp	.+68     	; 0x17e <__vector_9+0xd0>
	{
		j=3;
	}


	if((i!=3)&&(j!=4))
 13a:	c3 30       	cpi	r28, 0x03	; 3
 13c:	11 f1       	breq	.+68     	; 0x182 <__vector_9+0xd4>
 13e:	84 30       	cpi	r24, 0x04	; 4
 140:	11 f4       	brne	.+4      	; 0x146 <__vector_9+0x98>
 142:	1f c0       	rjmp	.+62     	; 0x182 <__vector_9+0xd4>
	{
		j=2;
	}
	if (!(PINC&(1<<PC3)))
	{
		j=3;
 144:	83 e0       	ldi	r24, 0x03	; 3
	}


	if((i!=3)&&(j!=4))
	{
		while (!(PINC&(1<<j)));
 146:	48 2f       	mov	r20, r24
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <__vector_9+0xa6>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <__vector_9+0xa2>
 158:	83 b3       	in	r24, 0x13	; 19
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	82 23       	and	r24, r18
 15e:	93 23       	and	r25, r19
 160:	89 2b       	or	r24, r25
 162:	d1 f3       	breq	.-12     	; 0x158 <__vector_9+0xaa>
		
		
		valueKeyboard=key_code[j][i];
 164:	fa 01       	movw	r30, r20
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	e4 0f       	add	r30, r20
 16c:	f5 1f       	adc	r31, r21
 16e:	ec 0f       	add	r30, r28
 170:	f1 1d       	adc	r31, r1
 172:	e0 5a       	subi	r30, 0xA0	; 160
 174:	ff 4f       	sbci	r31, 0xFF	; 255
 176:	80 81       	ld	r24, Z
 178:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <valueKeyboard>
 17c:	02 c0       	rjmp	.+4      	; 0x182 <__vector_9+0xd4>
	{
		j=3;
	}


	if((i!=3)&&(j!=4))
 17e:	c3 30       	cpi	r28, 0x03	; 3
 180:	09 f7       	brne	.-62     	; 0x144 <__vector_9+0x96>

//----------------------------------------------------------
//=============================


}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	cf 91       	pop	r28
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_19>:


ISR(TIMER0_COMP_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25

//=========Операции=============

	PORTD^=(1<<PD0);
 1b4:	92 b3       	in	r25, 0x12	; 18
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	89 27       	eor	r24, r25
 1ba:	82 bb       	out	0x12, r24	; 18
//=============================

}
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__vector_4>:

//---------------------------------------TIMER2--------------------------------------

ISR(TIMER2_OVF_vect)
{
 1ca:	1f 92       	push	r1
 1cc:	0f 92       	push	r0
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	0f 92       	push	r0
 1d2:	11 24       	eor	r1, r1
 1d4:	8f 93       	push	r24
 1d6:	9f 93       	push	r25
	//=========Операции=============
	PORTD^=(1<<PD1);
 1d8:	92 b3       	in	r25, 0x12	; 18
 1da:	82 e0       	ldi	r24, 0x02	; 2
 1dc:	89 27       	eor	r24, r25
 1de:	82 bb       	out	0x12, r24	; 18
	TCNT2=valInter2;
 1e0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <valInter2>
 1e4:	84 bd       	out	0x24, r24	; 36

	//=============================

}
 1e6:	9f 91       	pop	r25
 1e8:	8f 91       	pop	r24
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_3>:

ISR(TIMER2_COMP_vect)
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
	
	PORTD^=(1<<PD1);
 202:	92 b3       	in	r25, 0x12	; 18
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	89 27       	eor	r24, r25
 208:	82 bb       	out	0x12, r24	; 18

}
 20a:	9f 91       	pop	r25
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <__vector_8>:
//------------------------------TIMER1-----------------------------------
ISR(TIMER1_OVF_vect)
{
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	8f 93       	push	r24
 224:	9f 93       	push	r25
	PORTD^=(1<<PD2);
 226:	92 b3       	in	r25, 0x12	; 18
 228:	84 e0       	ldi	r24, 0x04	; 4
 22a:	89 27       	eor	r24, r25
 22c:	82 bb       	out	0x12, r24	; 18
	TCNT1=valInter1;
 22e:	80 91 af 00 	lds	r24, 0x00AF	; 0x8000af <valInter1>
 232:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <valInter1+0x1>
 236:	9d bd       	out	0x2d, r25	; 45
 238:	8c bd       	out	0x2c, r24	; 44

}
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <__vector_5>:

ISR(TIMER1_CAPT_vect)
{
 248:	1f 92       	push	r1
 24a:	0f 92       	push	r0
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	0f 92       	push	r0
 250:	11 24       	eor	r1, r1
 252:	8f 93       	push	r24
 254:	9f 93       	push	r25
	
	PORTD^=(1<<PD2);
 256:	92 b3       	in	r25, 0x12	; 18
 258:	84 e0       	ldi	r24, 0x04	; 4
 25a:	89 27       	eor	r24, r25
 25c:	82 bb       	out	0x12, r24	; 18

}
 25e:	9f 91       	pop	r25
 260:	8f 91       	pop	r24
 262:	0f 90       	pop	r0
 264:	0f be       	out	0x3f, r0	; 63
 266:	0f 90       	pop	r0
 268:	1f 90       	pop	r1
 26a:	18 95       	reti

0000026c <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 26c:	1f 92       	push	r1
 26e:	0f 92       	push	r0
 270:	0f b6       	in	r0, 0x3f	; 63
 272:	0f 92       	push	r0
 274:	11 24       	eor	r1, r1
 276:	8f 93       	push	r24
 278:	9f 93       	push	r25
	PORTD^=(1<<PD2);
 27a:	92 b3       	in	r25, 0x12	; 18
 27c:	84 e0       	ldi	r24, 0x04	; 4
 27e:	89 27       	eor	r24, r25
 280:	82 bb       	out	0x12, r24	; 18

}
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <Timer0_init>:

//функция инициализации таймера/счетчика timer0/8-bit
void Timer0_init(char starVal,char flagMode, char freq,char flagDel )
{
	
	valInter=starVal;
 290:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <valInter>
	cli();
 294:	f8 94       	cli
	if (flagMode==NORMAL_MODE)
 296:	61 30       	cpi	r22, 0x01	; 1
 298:	59 f5       	brne	.+86     	; 0x2f0 <Timer0_init+0x60>
	{
		TCCR0|=(0<<WGM00)|(0<<WGM01);
 29a:	93 b7       	in	r25, 0x33	; 51
 29c:	93 bf       	out	0x33, r25	; 51
		TIMSK|=(1<<TOIE0);
 29e:	99 b7       	in	r25, 0x39	; 57
 2a0:	91 60       	ori	r25, 0x01	; 1
 2a2:	99 bf       	out	0x39, r25	; 57

		
		switch(flagDel)
 2a4:	42 2f       	mov	r20, r18
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	47 30       	cpi	r20, 0x07	; 7
 2aa:	51 05       	cpc	r21, r1
 2ac:	f8 f4       	brcc	.+62     	; 0x2ec <Timer0_init+0x5c>
 2ae:	fa 01       	movw	r30, r20
 2b0:	e6 5d       	subi	r30, 0xD6	; 214
 2b2:	ff 4f       	sbci	r31, 0xFF	; 255
 2b4:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__tablejump2__>
		{

			case 0:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(0<<CS02);
 2b8:	93 b7       	in	r25, 0x33	; 51
 2ba:	93 bf       	out	0x33, r25	; 51
				break;
 2bc:	17 c0       	rjmp	.+46     	; 0x2ec <Timer0_init+0x5c>
			}

			case 1:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(0<<CS02);
 2be:	93 b7       	in	r25, 0x33	; 51
 2c0:	91 60       	ori	r25, 0x01	; 1
 2c2:	93 bf       	out	0x33, r25	; 51
				break;
 2c4:	13 c0       	rjmp	.+38     	; 0x2ec <Timer0_init+0x5c>
			}
			case 2:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(0<<CS02);
 2c6:	93 b7       	in	r25, 0x33	; 51
 2c8:	92 60       	ori	r25, 0x02	; 2
 2ca:	93 bf       	out	0x33, r25	; 51
				break;
 2cc:	0f c0       	rjmp	.+30     	; 0x2ec <Timer0_init+0x5c>
			}

			case 3:
			{
				TCCR0|=(1<<CS00)|(1<<CS01)|(0<<CS02);
 2ce:	93 b7       	in	r25, 0x33	; 51
 2d0:	93 60       	ori	r25, 0x03	; 3
 2d2:	93 bf       	out	0x33, r25	; 51
				break;
 2d4:	0b c0       	rjmp	.+22     	; 0x2ec <Timer0_init+0x5c>
			}
			case 4:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(1<<CS02);
 2d6:	93 b7       	in	r25, 0x33	; 51
 2d8:	94 60       	ori	r25, 0x04	; 4
 2da:	93 bf       	out	0x33, r25	; 51
				break;
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <Timer0_init+0x5c>
			}

			case 5:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(1<<CS02);
 2de:	93 b7       	in	r25, 0x33	; 51
 2e0:	95 60       	ori	r25, 0x05	; 5
 2e2:	93 bf       	out	0x33, r25	; 51
				break;
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <Timer0_init+0x5c>
			}
			case 6:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(1<<CS02);
 2e6:	93 b7       	in	r25, 0x33	; 51
 2e8:	96 60       	ori	r25, 0x06	; 6
 2ea:	93 bf       	out	0x33, r25	; 51
				break;
			}

		}

		TCNT0=starVal;
 2ec:	82 bf       	out	0x32, r24	; 50
 2ee:	2f c0       	rjmp	.+94     	; 0x34e <Timer0_init+0xbe>
	}
	else if (flagMode==CTC_MODE)
 2f0:	62 30       	cpi	r22, 0x02	; 2
 2f2:	69 f5       	brne	.+90     	; 0x34e <Timer0_init+0xbe>
	{
		TCCR0|=(0<<WGM00)|(1<<WGM01);
 2f4:	83 b7       	in	r24, 0x33	; 51
 2f6:	88 60       	ori	r24, 0x08	; 8
 2f8:	83 bf       	out	0x33, r24	; 51
		TIMSK|=(0<<TOIE0)|(1<<OCIE0);
 2fa:	89 b7       	in	r24, 0x39	; 57
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	89 bf       	out	0x39, r24	; 57
		
		
		
		switch(flagDel)
 300:	82 2f       	mov	r24, r18
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	87 30       	cpi	r24, 0x07	; 7
 306:	91 05       	cpc	r25, r1
 308:	f8 f4       	brcc	.+62     	; 0x348 <Timer0_init+0xb8>
 30a:	fc 01       	movw	r30, r24
 30c:	ef 5c       	subi	r30, 0xCF	; 207
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__tablejump2__>
		{

			case 0:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(0<<CS02);
 314:	83 b7       	in	r24, 0x33	; 51
 316:	83 bf       	out	0x33, r24	; 51
				
				break;
 318:	17 c0       	rjmp	.+46     	; 0x348 <Timer0_init+0xb8>
			}

			case 1:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(0<<CS02);
 31a:	83 b7       	in	r24, 0x33	; 51
 31c:	81 60       	ori	r24, 0x01	; 1
 31e:	83 bf       	out	0x33, r24	; 51
				
				break;
 320:	13 c0       	rjmp	.+38     	; 0x348 <Timer0_init+0xb8>
			}
			case 2:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(0<<CS02);
 322:	83 b7       	in	r24, 0x33	; 51
 324:	82 60       	ori	r24, 0x02	; 2
 326:	83 bf       	out	0x33, r24	; 51
				
				break;
 328:	0f c0       	rjmp	.+30     	; 0x348 <Timer0_init+0xb8>
			}

			case 3:
			{
				TCCR0|=(1<<CS00)|(1<<CS01)|(0<<CS02);
 32a:	83 b7       	in	r24, 0x33	; 51
 32c:	83 60       	ori	r24, 0x03	; 3
 32e:	83 bf       	out	0x33, r24	; 51
				
				break;
 330:	0b c0       	rjmp	.+22     	; 0x348 <Timer0_init+0xb8>
			}
			case 4:
			{
				TCCR0|=(0<<CS00)|(0<<CS01)|(1<<CS02);
 332:	83 b7       	in	r24, 0x33	; 51
 334:	84 60       	ori	r24, 0x04	; 4
 336:	83 bf       	out	0x33, r24	; 51
				
				break;
 338:	07 c0       	rjmp	.+14     	; 0x348 <Timer0_init+0xb8>
			}

			case 5:
			{
				TCCR0|=(1<<CS00)|(0<<CS01)|(1<<CS02);
 33a:	83 b7       	in	r24, 0x33	; 51
 33c:	85 60       	ori	r24, 0x05	; 5
 33e:	83 bf       	out	0x33, r24	; 51
				
				break;
 340:	03 c0       	rjmp	.+6      	; 0x348 <Timer0_init+0xb8>
			}
			case 6:
			{
				TCCR0|=(0<<CS00)|(1<<CS01)|(1<<CS02);
 342:	83 b7       	in	r24, 0x33	; 51
 344:	86 60       	ori	r24, 0x06	; 6
 346:	83 bf       	out	0x33, r24	; 51
				
				break;
			}

		}
		 valcomp=freq;
 348:	40 93 ae 00 	sts	0x00AE, r20	; 0x8000ae <__data_end>
		 OCR0=valcomp;
 34c:	4c bf       	out	0x3c, r20	; 60
	}

	sei();
 34e:	78 94       	sei
 350:	08 95       	ret

00000352 <OutPin>:
{
	LCDcommand(0b1000);
}
void LCDnblank(void)		//Сделать видимой инфо на дисплее + отключить видимые курсоры.
{
	LCDcommand(0b1100);
 352:	8a b3       	in	r24, 0x1a	; 26
 354:	80 6f       	ori	r24, 0xF0	; 240
 356:	8a bb       	out	0x1a, r24	; 26
 358:	8b b3       	in	r24, 0x1b	; 27
 35a:	8f 70       	andi	r24, 0x0F	; 15
 35c:	8b bb       	out	0x1b, r24	; 27
 35e:	08 95       	ret

00000360 <Strob>:
 360:	da 9a       	sbi	0x1b, 2	; 27
 362:	82 e0       	ldi	r24, 0x02	; 2
 364:	8a 95       	dec	r24
 366:	f1 f7       	brne	.-4      	; 0x364 <Strob+0x4>
 368:	00 c0       	rjmp	.+0      	; 0x36a <Strob+0xa>
 36a:	da 98       	cbi	0x1b, 2	; 27
 36c:	08 95       	ret

0000036e <Busy_flag>:
 36e:	cf 93       	push	r28
 370:	8a b3       	in	r24, 0x1a	; 26
 372:	8f 70       	andi	r24, 0x0F	; 15
 374:	8a bb       	out	0x1a, r24	; 26
 376:	8b b3       	in	r24, 0x1b	; 27
 378:	80 6f       	ori	r24, 0xF0	; 240
 37a:	8b bb       	out	0x1b, r24	; 27
 37c:	d9 9a       	sbi	0x1b, 1	; 27
 37e:	da 9a       	sbi	0x1b, 2	; 27
 380:	00 00       	nop
 382:	00 00       	nop
 384:	c9 b3       	in	r28, 0x19	; 25
 386:	da 98       	cbi	0x1b, 2	; 27
 388:	00 00       	nop
 38a:	00 00       	nop
 38c:	0e 94 b0 01 	call	0x360	; 0x360 <Strob>
 390:	00 00       	nop
 392:	00 00       	nop
 394:	cc 23       	and	r28, r28
 396:	9c f3       	brlt	.-26     	; 0x37e <Busy_flag+0x10>
 398:	d9 98       	cbi	0x1b, 1	; 27
 39a:	cf 91       	pop	r28
 39c:	08 95       	ret

0000039e <Send_byte>:
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	d8 2f       	mov	r29, r24
 3a4:	0e 94 a9 01 	call	0x352	; 0x352 <OutPin>
 3a8:	9d 2f       	mov	r25, r29
 3aa:	92 95       	swap	r25
 3ac:	9f 70       	andi	r25, 0x0F	; 15
 3ae:	cd 2f       	mov	r28, r29
 3b0:	cf 70       	andi	r28, 0x0F	; 15
 3b2:	90 fd       	sbrc	r25, 0
 3b4:	dc 9a       	sbi	0x1b, 4	; 27
 3b6:	96 95       	lsr	r25
 3b8:	90 fd       	sbrc	r25, 0
 3ba:	dd 9a       	sbi	0x1b, 5	; 27
 3bc:	96 95       	lsr	r25
 3be:	90 fd       	sbrc	r25, 0
 3c0:	de 9a       	sbi	0x1b, 6	; 27
 3c2:	96 95       	lsr	r25
 3c4:	09 f0       	breq	.+2      	; 0x3c8 <Send_byte+0x2a>
 3c6:	df 9a       	sbi	0x1b, 7	; 27
 3c8:	0e 94 b0 01 	call	0x360	; 0x360 <Strob>
 3cc:	0e 94 a9 01 	call	0x352	; 0x352 <OutPin>
 3d0:	d0 fd       	sbrc	r29, 0
 3d2:	dc 9a       	sbi	0x1b, 4	; 27
 3d4:	8c 2f       	mov	r24, r28
 3d6:	86 95       	lsr	r24
 3d8:	80 fd       	sbrc	r24, 0
 3da:	dd 9a       	sbi	0x1b, 5	; 27
 3dc:	86 95       	lsr	r24
 3de:	80 fd       	sbrc	r24, 0
 3e0:	de 9a       	sbi	0x1b, 6	; 27
 3e2:	86 95       	lsr	r24
 3e4:	09 f0       	breq	.+2      	; 0x3e8 <Send_byte+0x4a>
 3e6:	df 9a       	sbi	0x1b, 7	; 27
 3e8:	0e 94 b0 01 	call	0x360	; 0x360 <Strob>
 3ec:	8a b3       	in	r24, 0x1a	; 26
 3ee:	8f 70       	andi	r24, 0x0F	; 15
 3f0:	8a bb       	out	0x1a, r24	; 26
 3f2:	8b b3       	in	r24, 0x1b	; 27
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	8b bb       	out	0x1b, r24	; 27
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	08 95       	ret

000003fe <LCDcommand>:
 3fe:	cf 93       	push	r28
 400:	c8 2f       	mov	r28, r24
 402:	0e 94 b7 01 	call	0x36e	; 0x36e <Busy_flag>
 406:	8c 2f       	mov	r24, r28
 408:	0e 94 cf 01 	call	0x39e	; 0x39e <Send_byte>
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <LCDdata>:
 410:	cf 93       	push	r28
 412:	c8 2f       	mov	r28, r24
 414:	0e 94 b7 01 	call	0x36e	; 0x36e <Busy_flag>
 418:	d8 9a       	sbi	0x1b, 0	; 27
 41a:	8c 2f       	mov	r24, r28
 41c:	0e 94 cf 01 	call	0x39e	; 0x39e <Send_byte>
 420:	d8 98       	cbi	0x1b, 0	; 27
 422:	cf 91       	pop	r28
 424:	08 95       	ret

00000426 <LCDGotoXY>:
 426:	62 30       	cpi	r22, 0x02	; 2
 428:	31 f0       	breq	.+12     	; 0x436 <LCDGotoXY+0x10>
 42a:	63 30       	cpi	r22, 0x03	; 3
 42c:	31 f0       	breq	.+12     	; 0x43a <LCDGotoXY+0x14>
 42e:	61 30       	cpi	r22, 0x01	; 1
 430:	29 f4       	brne	.+10     	; 0x43c <LCDGotoXY+0x16>
 432:	80 5c       	subi	r24, 0xC0	; 192
 434:	03 c0       	rjmp	.+6      	; 0x43c <LCDGotoXY+0x16>
 436:	8c 5e       	subi	r24, 0xEC	; 236
 438:	01 c0       	rjmp	.+2      	; 0x43c <LCDGotoXY+0x16>
 43a:	8c 5a       	subi	r24, 0xAC	; 172
 43c:	80 68       	ori	r24, 0x80	; 128
 43e:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 442:	08 95       	ret

00000444 <LCDdataXY>:
 444:	cf 93       	push	r28
 446:	c8 2f       	mov	r28, r24
 448:	86 2f       	mov	r24, r22
 44a:	64 2f       	mov	r22, r20
 44c:	0e 94 13 02 	call	0x426	; 0x426 <LCDGotoXY>
 450:	8c 2f       	mov	r24, r28
 452:	0e 94 08 02 	call	0x410	; 0x410 <LCDdata>
 456:	cf 91       	pop	r28
 458:	08 95       	ret

0000045a <LCDstringXY>:
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
 460:	86 2f       	mov	r24, r22
 462:	64 2f       	mov	r22, r20
 464:	0e 94 13 02 	call	0x426	; 0x426 <LCDGotoXY>
 468:	88 81       	ld	r24, Y
 46a:	88 23       	and	r24, r24
 46c:	31 f0       	breq	.+12     	; 0x47a <__stack+0x1b>
 46e:	21 96       	adiw	r28, 0x01	; 1
 470:	0e 94 08 02 	call	0x410	; 0x410 <LCDdata>
 474:	89 91       	ld	r24, Y+
 476:	81 11       	cpse	r24, r1
 478:	fb cf       	rjmp	.-10     	; 0x470 <__stack+0x11>
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	08 95       	ret

00000480 <LCDinit>:
 480:	cf 93       	push	r28
 482:	2f ef       	ldi	r18, 0xFF	; 255
 484:	80 e7       	ldi	r24, 0x70	; 112
 486:	92 e0       	ldi	r25, 0x02	; 2
 488:	21 50       	subi	r18, 0x01	; 1
 48a:	80 40       	sbci	r24, 0x00	; 0
 48c:	90 40       	sbci	r25, 0x00	; 0
 48e:	e1 f7       	brne	.-8      	; 0x488 <LCDinit+0x8>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCDinit+0x12>
 492:	00 00       	nop
 494:	8a b3       	in	r24, 0x1a	; 26
 496:	87 60       	ori	r24, 0x07	; 7
 498:	8a bb       	out	0x1a, r24	; 26
 49a:	8b b3       	in	r24, 0x1b	; 27
 49c:	88 7f       	andi	r24, 0xF8	; 248
 49e:	8b bb       	out	0x1b, r24	; 27
 4a0:	0e 94 a9 01 	call	0x352	; 0x352 <OutPin>
 4a4:	c3 e0       	ldi	r28, 0x03	; 3
 4a6:	8b b3       	in	r24, 0x1b	; 27
 4a8:	80 63       	ori	r24, 0x30	; 48
 4aa:	8b bb       	out	0x1b, r24	; 27
 4ac:	0e 94 b0 01 	call	0x360	; 0x360 <Strob>
 4b0:	8f e0       	ldi	r24, 0x0F	; 15
 4b2:	97 e2       	ldi	r25, 0x27	; 39
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <LCDinit+0x34>
 4b8:	00 c0       	rjmp	.+0      	; 0x4ba <LCDinit+0x3a>
 4ba:	00 00       	nop
 4bc:	c1 50       	subi	r28, 0x01	; 1
 4be:	99 f7       	brne	.-26     	; 0x4a6 <LCDinit+0x26>
 4c0:	0e 94 b7 01 	call	0x36e	; 0x36e <Busy_flag>
 4c4:	0e 94 a9 01 	call	0x352	; 0x352 <OutPin>
 4c8:	dd 9a       	sbi	0x1b, 5	; 27
 4ca:	0e 94 b0 01 	call	0x360	; 0x360 <Strob>
 4ce:	88 e2       	ldi	r24, 0x28	; 40
 4d0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 4d4:	8c e0       	ldi	r24, 0x0C	; 12
 4d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 4da:	86 e0       	ldi	r24, 0x06	; 6
 4dc:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <LCDclear>:
}
void LCDclear(void)			//Очистка дисплея + курсор на позицию 0,0
{
	LCDcommand(0b1);
 4f0:	81 e0       	ldi	r24, 0x01	; 1
 4f2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCDcommand>
 4f6:	08 95       	ret

000004f8 <pause>:


void pause(unsigned int a)
{
	unsigned int i;
	for(i=a;i>0;i--);
 4f8:	00 97       	sbiw	r24, 0x00	; 0
 4fa:	11 f0       	breq	.+4      	; 0x500 <pause+0x8>
 4fc:	01 97       	sbiw	r24, 0x01	; 1
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <pause+0x4>
 500:	08 95       	ret

00000502 <main>:
}

int main(void)
{

    LCDinit();
 502:	0e 94 40 02 	call	0x480	; 0x480 <LCDinit>
	LCDstringXY("Hello",0,0);
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	8d e6       	ldi	r24, 0x6D	; 109
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 2d 02 	call	0x45a	; 0x45a <LCDstringXY>
	Timer0_init(0,NORMAL_MODE,0,FLAG_DEL_64);
 512:	23 e0       	ldi	r18, 0x03	; 3
 514:	40 e0       	ldi	r20, 0x00	; 0
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	80 e0       	ldi	r24, 0x00	; 0
 51a:	0e 94 48 01 	call	0x290	; 0x290 <Timer0_init>
    while (1) 
    {
		Password_Print_Confim();
 51e:	0e 94 92 02 	call	0x524	; 0x524 <Password_Print_Confim>
    }
 522:	fd cf       	rjmp	.-6      	; 0x51e <main+0x1c>

00000524 <Password_Print_Confim>:
 char passconfim[4];

 //получаем значение с матричной клавиатуры
unsigned char GetMatrixValue(void)
{
		return valueKeyboard;
 524:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <valueKeyboard>

//Функция проверки пороля и вывод результата
void Password_Print_Confim(void)
{
	unsigned char flag_compare=0;
	if (GetMatrixValue()!=' ' && GetMatrixValue()!='*'&& GetMatrixValue()!='#')
 528:	80 32       	cpi	r24, 0x20	; 32
 52a:	09 f4       	brne	.+2      	; 0x52e <Password_Print_Confim+0xa>
 52c:	86 c0       	rjmp	.+268    	; 0x63a <Password_Print_Confim+0x116>
 52e:	8a 32       	cpi	r24, 0x2A	; 42
 530:	01 f1       	breq	.+64     	; 0x572 <Password_Print_Confim+0x4e>
 532:	83 32       	cpi	r24, 0x23	; 35
 534:	09 f4       	brne	.+2      	; 0x538 <Password_Print_Confim+0x14>
 536:	63 c0       	rjmp	.+198    	; 0x5fe <Password_Print_Confim+0xda>
	{
		passconfim[cnt]=GetMatrixValue();
 538:	60 91 b3 00 	lds	r22, 0x00B3	; 0x8000b3 <cnt>
 53c:	e6 2f       	mov	r30, r22
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	ec 54       	subi	r30, 0x4C	; 76
 542:	ff 4f       	sbci	r31, 0xFF	; 255
 544:	80 83       	st	Z, r24
		LCDdataXY('*',cnt,1);
 546:	41 e0       	ldi	r20, 0x01	; 1
 548:	8a e2       	ldi	r24, 0x2A	; 42
 54a:	0e 94 22 02 	call	0x444	; 0x444 <LCDdataXY>
		cnt++;
 54e:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <cnt>
 552:	8f 5f       	subi	r24, 0xFF	; 255
 554:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <cnt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 558:	2f e7       	ldi	r18, 0x7F	; 127
 55a:	8a e1       	ldi	r24, 0x1A	; 26
 55c:	96 e0       	ldi	r25, 0x06	; 6
 55e:	21 50       	subi	r18, 0x01	; 1
 560:	80 40       	sbci	r24, 0x00	; 0
 562:	90 40       	sbci	r25, 0x00	; 0
 564:	e1 f7       	brne	.-8      	; 0x55e <Password_Print_Confim+0x3a>
 566:	00 c0       	rjmp	.+0      	; 0x568 <Password_Print_Confim+0x44>
 568:	00 00       	nop
		_delay_ms(250);
		valueKeyboard=' ';
 56a:	80 e2       	ldi	r24, 0x20	; 32
 56c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <valueKeyboard>
 570:	08 95       	ret
	}
	else if (GetMatrixValue()=='*')
	{
		if (cnt==4)
 572:	80 91 b3 00 	lds	r24, 0x00B3	; 0x8000b3 <cnt>
 576:	84 30       	cpi	r24, 0x04	; 4
 578:	d9 f5       	brne	.+118    	; 0x5f0 <Password_Print_Confim+0xcc>
		{
			if (passconfim[0]=='1')	//первая цифра пороля
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 91 b4 00 	lds	r25, 0x00B4	; 0x8000b4 <passconfim>
 580:	91 33       	cpi	r25, 0x31	; 49
 582:	09 f0       	breq	.+2      	; 0x586 <Password_Print_Confim+0x62>
 584:	80 e0       	ldi	r24, 0x00	; 0
			{
				flag_compare++;
			}
			if (passconfim[1]=='2')//вторая  цифра пороля
 586:	90 91 b5 00 	lds	r25, 0x00B5	; 0x8000b5 <passconfim+0x1>
 58a:	92 33       	cpi	r25, 0x32	; 50
 58c:	09 f4       	brne	.+2      	; 0x590 <Password_Print_Confim+0x6c>
			{
				flag_compare++;
 58e:	8f 5f       	subi	r24, 0xFF	; 255
			}
			if (passconfim[2]=='3')//третья цифра пороля
 590:	90 91 b6 00 	lds	r25, 0x00B6	; 0x8000b6 <passconfim+0x2>
 594:	93 33       	cpi	r25, 0x33	; 51
 596:	09 f4       	brne	.+2      	; 0x59a <Password_Print_Confim+0x76>
			{
				flag_compare++;
 598:	8f 5f       	subi	r24, 0xFF	; 255
			}
			if (passconfim[3]=='4')//четвертая цифра пороля
 59a:	90 91 b7 00 	lds	r25, 0x00B7	; 0x8000b7 <passconfim+0x3>
 59e:	94 33       	cpi	r25, 0x34	; 52
 5a0:	09 f4       	brne	.+2      	; 0x5a4 <Password_Print_Confim+0x80>
			{
				flag_compare++;
 5a2:	8f 5f       	subi	r24, 0xFF	; 255
			}
			

			if (flag_compare==4)
 5a4:	84 30       	cpi	r24, 0x04	; 4
 5a6:	39 f4       	brne	.+14     	; 0x5b6 <Password_Print_Confim+0x92>
			{
				LCDstringXY("Password OK   ",1,2);
 5a8:	42 e0       	ldi	r20, 0x02	; 2
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	83 e7       	ldi	r24, 0x73	; 115
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	0e 94 2d 02 	call	0x45a	; 0x45a <LCDstringXY>
 5b4:	08 95       	ret
				//-------------------------------------------------------------------------------------------
				
			}
			else{

				LCDstringXY("Password Error",1,2);
 5b6:	42 e0       	ldi	r20, 0x02	; 2
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	82 e8       	ldi	r24, 0x82	; 130
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 2d 02 	call	0x45a	; 0x45a <LCDstringXY>
				cnt=0;
 5c2:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <cnt>
				valueKeyboard=' ';
 5c6:	80 e2       	ldi	r24, 0x20	; 32
 5c8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <valueKeyboard>
				flag_compare=0;
				for(int i=0;i<4;i++)
				{
					passconfim[i]=0;
 5cc:	e4 eb       	ldi	r30, 0xB4	; 180
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	10 82       	st	Z, r1
 5d2:	11 82       	std	Z+1, r1	; 0x01
 5d4:	12 82       	std	Z+2, r1	; 0x02
 5d6:	13 82       	std	Z+3, r1	; 0x03
 5d8:	2f ef       	ldi	r18, 0xFF	; 255
 5da:	89 e6       	ldi	r24, 0x69	; 105
 5dc:	98 e1       	ldi	r25, 0x18	; 24
 5de:	21 50       	subi	r18, 0x01	; 1
 5e0:	80 40       	sbci	r24, 0x00	; 0
 5e2:	90 40       	sbci	r25, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <Password_Print_Confim+0xba>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <Password_Print_Confim+0xc4>
 5e8:	00 00       	nop
				}
				_delay_ms(1000);
				LCDclear();
 5ea:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCDclear>
 5ee:	08 95       	ret
			
			
		}
		else
		{
			LCDstringXY("Error !!password!!!",1,3);
 5f0:	43 e0       	ldi	r20, 0x03	; 3
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	81 e9       	ldi	r24, 0x91	; 145
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 2d 02 	call	0x45a	; 0x45a <LCDstringXY>
 5fc:	08 95       	ret
			//-------------------------------------------------------------------------------------------
		}
	}
	else if (GetMatrixValue()=='#')
	{
		cnt=0;
 5fe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <cnt>
		valueKeyboard=' ';
 602:	80 e2       	ldi	r24, 0x20	; 32
 604:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <valueKeyboard>
		flag_compare=0;
		for(int i=0;i<4;i++)
		{
			passconfim[i]=0;
 608:	e4 eb       	ldi	r30, 0xB4	; 180
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	10 82       	st	Z, r1
 60e:	11 82       	std	Z+1, r1	; 0x01
 610:	12 82       	std	Z+2, r1	; 0x02
 612:	13 82       	std	Z+3, r1	; 0x03
		}

		LCDclear();
 614:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCDclear>
		LCDstringXY("reset !!",1,3);
 618:	43 e0       	ldi	r20, 0x03	; 3
 61a:	61 e0       	ldi	r22, 0x01	; 1
 61c:	85 ea       	ldi	r24, 0xA5	; 165
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	0e 94 2d 02 	call	0x45a	; 0x45a <LCDstringXY>
 624:	2f ef       	ldi	r18, 0xFF	; 255
 626:	89 e6       	ldi	r24, 0x69	; 105
 628:	98 e1       	ldi	r25, 0x18	; 24
 62a:	21 50       	subi	r18, 0x01	; 1
 62c:	80 40       	sbci	r24, 0x00	; 0
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <Password_Print_Confim+0x106>
 632:	00 c0       	rjmp	.+0      	; 0x634 <Password_Print_Confim+0x110>
 634:	00 00       	nop
		_delay_ms(1000);
		LCDclear();
 636:	0e 94 78 02 	call	0x4f0	; 0x4f0 <LCDclear>
 63a:	08 95       	ret

0000063c <__tablejump2__>:
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	05 90       	lpm	r0, Z+
 642:	f4 91       	lpm	r31, Z
 644:	e0 2d       	mov	r30, r0
 646:	09 94       	ijmp

00000648 <_exit>:
 648:	f8 94       	cli

0000064a <__stop_program>:
 64a:	ff cf       	rjmp	.-2      	; 0x64a <__stop_program>

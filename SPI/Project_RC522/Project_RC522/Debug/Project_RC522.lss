
Project_RC522.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000c62  00000cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000084  00800082  00800082  00000d18  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d18  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cf3  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cc9  00000000  00000000  00002c3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e12  00000000  00000000  00003904  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b4  00000000  00000000  00004718  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006dd  00000000  00000000  00004bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001506  00000000  00000000  000052a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000067af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 54 00 	jmp	0xa8	; 0xa8 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e6       	ldi	r30, 0x62	; 98
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 30       	cpi	r26, 0x06	; 6
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  8a:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <InBuffer>:
	//
	//-------------------------------------------------------------------------

	void InBuffer(char val)
	{
		IndexIN++;
  92:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <IndexIN>
  96:	ef 5f       	subi	r30, 0xFF	; 255
		IndexIN &= BUFFER_MASK;
  98:	ef 77       	andi	r30, 0x7F	; 127
  9a:	e0 93 85 00 	sts	0x0085, r30	; 0x800085 <IndexIN>
		buffer[IndexIN] = val;
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	ea 57       	subi	r30, 0x7A	; 122
  a2:	ff 4f       	sbci	r31, 0xFF	; 255
  a4:	80 83       	st	Z, r24
  a6:	08 95       	ret

000000a8 <__vector_11>:
//-------------------------------------------------------------------------
//					Функция прерывания USART при получении данных
//-------------------------------------------------------------------------

ISR(USART_RXC_vect)
{
  a8:	1f 92       	push	r1
  aa:	0f 92       	push	r0
  ac:	0f b6       	in	r0, 0x3f	; 63
  ae:	0f 92       	push	r0
  b0:	11 24       	eor	r1, r1
  b2:	2f 93       	push	r18
  b4:	3f 93       	push	r19
  b6:	4f 93       	push	r20
  b8:	5f 93       	push	r21
  ba:	6f 93       	push	r22
  bc:	7f 93       	push	r23
  be:	8f 93       	push	r24
  c0:	9f 93       	push	r25
  c2:	af 93       	push	r26
  c4:	bf 93       	push	r27
  c6:	ef 93       	push	r30
  c8:	ff 93       	push	r31
	uart_old = UDR;
  ca:	8c b1       	in	r24, 0x0c	; 12
  cc:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
	uart_flag = 1;
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <uart_flag>
	InBuffer(uart_old);
  d6:	0e 94 49 00 	call	0x92	; 0x92 <InBuffer>
}
  da:	ff 91       	pop	r31
  dc:	ef 91       	pop	r30
  de:	bf 91       	pop	r27
  e0:	af 91       	pop	r26
  e2:	9f 91       	pop	r25
  e4:	8f 91       	pop	r24
  e6:	7f 91       	pop	r23
  e8:	6f 91       	pop	r22
  ea:	5f 91       	pop	r21
  ec:	4f 91       	pop	r20
  ee:	3f 91       	pop	r19
  f0:	2f 91       	pop	r18
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <main>:

char buffer[BUFFER_SIZE];


int main(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <main+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <main+0x8>
 104:	1f 92       	push	r1
 106:	cd b7       	in	r28, 0x3d	; 61
 108:	de b7       	in	r29, 0x3e	; 62
	unsigned char card_num[5];
	unsigned char i;
   //lcd_init(0);
   Usart_Init(9600);
 10a:	60 e8       	ldi	r22, 0x80	; 128
 10c:	75 e2       	ldi	r23, 0x25	; 37
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 f6 02 	call	0x5ec	; 0x5ec <Usart_Init>
   sei();
 116:	78 94       	sei
   SPI_Master_Init(MASTER,DEL_16);
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_Master_Init>
   
	MFCR522_Init();
 120:	0e 94 ad 02 	call	0x55a	; 0x55a <MFCR522_Init>
	Usart_PrintString("RC522 started\r\n");
 124:	80 e6       	ldi	r24, 0x60	; 96
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 15 03 	call	0x62a	; 0x62a <Usart_PrintString>
	
	
		//Usart_str_rn("hrllo");
		//Usart_PrintString("Transmit\r\n");
		_delay_ms(500);
		if ( MFRC522_Request( PICC_REQIDL, card_num ) == MI_OK )
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	4c 01       	movw	r8, r24
 132:	68 2e       	mov	r6, r24
 134:	79 2c       	mov	r7, r9
 136:	5e 01       	movw	r10, r28
 138:	96 e0       	ldi	r25, 0x06	; 6
 13a:	a9 0e       	add	r10, r25
 13c:	b1 1c       	adc	r11, r1
			if ( MFRC522_Anticoll( card_num ) == MI_OK )
			{
				Usart_PrintString("Card number:\r\n");
				for (i=0;i<5;i++)
				{
					sprintf(buffer,"%x",card_num[i]);
 13e:	0f 2e       	mov	r0, r31
 140:	ff e7       	ldi	r31, 0x7F	; 127
 142:	cf 2e       	mov	r12, r31
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	df 2e       	mov	r13, r31
 148:	f0 2d       	mov	r31, r0
 14a:	0f 2e       	mov	r0, r31
 14c:	f6 e8       	ldi	r31, 0x86	; 134
 14e:	ef 2e       	mov	r14, r31
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	ff 2e       	mov	r15, r31
 154:	f0 2d       	mov	r31, r0
 156:	4e 2c       	mov	r4, r14
 158:	5f 2c       	mov	r5, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	ef ef       	ldi	r30, 0xFF	; 255
 15c:	f4 e3       	ldi	r31, 0x34	; 52
 15e:	2c e0       	ldi	r18, 0x0C	; 12
 160:	e1 50       	subi	r30, 0x01	; 1
 162:	f0 40       	sbci	r31, 0x00	; 0
 164:	20 40       	sbci	r18, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x64>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x6e>
 16a:	00 00       	nop
	
	
		//Usart_str_rn("hrllo");
		//Usart_PrintString("Transmit\r\n");
		_delay_ms(500);
		if ( MFRC522_Request( PICC_REQIDL, card_num ) == MI_OK )
 16c:	66 2d       	mov	r22, r6
 16e:	77 2d       	mov	r23, r7
 170:	86 e2       	ldi	r24, 0x26	; 38
 172:	0e 94 80 02 	call	0x500	; 0x500 <MFRC522_Request>
 176:	81 11       	cpse	r24, r1
 178:	f0 cf       	rjmp	.-32     	; 0x15a <main+0x5e>
		{
			if ( MFRC522_Anticoll( card_num ) == MI_OK )
 17a:	86 2d       	mov	r24, r6
 17c:	97 2d       	mov	r25, r7
 17e:	0e 94 4b 02 	call	0x496	; 0x496 <MFRC522_Anticoll>
 182:	81 11       	cpse	r24, r1
 184:	ea cf       	rjmp	.-44     	; 0x15a <main+0x5e>
			{
				Usart_PrintString("Card number:\r\n");
 186:	80 e7       	ldi	r24, 0x70	; 112
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 15 03 	call	0x62a	; 0x62a <Usart_PrintString>
 18e:	84 01       	movw	r16, r8
				for (i=0;i<5;i++)
				{
					sprintf(buffer,"%x",card_num[i]);
 190:	f8 01       	movw	r30, r16
 192:	21 91       	ld	r18, Z+
 194:	8f 01       	movw	r16, r30
 196:	1f 92       	push	r1
 198:	2f 93       	push	r18
 19a:	df 92       	push	r13
 19c:	cf 92       	push	r12
 19e:	ff 92       	push	r15
 1a0:	ef 92       	push	r14
 1a2:	0e 94 57 03 	call	0x6ae	; 0x6ae <sprintf>
					Usart_PrintString(buffer);
 1a6:	84 2d       	mov	r24, r4
 1a8:	95 2d       	mov	r25, r5
 1aa:	0e 94 15 03 	call	0x62a	; 0x62a <Usart_PrintString>
		if ( MFRC522_Request( PICC_REQIDL, card_num ) == MI_OK )
		{
			if ( MFRC522_Anticoll( card_num ) == MI_OK )
			{
				Usart_PrintString("Card number:\r\n");
				for (i=0;i<5;i++)
 1ae:	0f 90       	pop	r0
 1b0:	0f 90       	pop	r0
 1b2:	0f 90       	pop	r0
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0a 15       	cp	r16, r10
 1bc:	1b 05       	cpc	r17, r11
 1be:	41 f7       	brne	.-48     	; 0x190 <main+0x94>
				{
					sprintf(buffer,"%x",card_num[i]);
					Usart_PrintString(buffer);
				}
				Usart_PrintString("\r\n");
 1c0:	8c e7       	ldi	r24, 0x7C	; 124
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 15 03 	call	0x62a	; 0x62a <Usart_PrintString>
 1c8:	c8 cf       	rjmp	.-112    	; 0x15a <main+0x5e>

000001ca <Write_MFRC522>:
unsigned char buff[4];
buff[0] = PICC_HALT;
buff[1] = 0;
MFRC522_CalulateCRC(buff, 2, &buff[2]);
status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}
 1ca:	cf 93       	push	r28
 1cc:	c6 2f       	mov	r28, r22
 1ce:	c4 98       	cbi	0x18, 4	; 24
 1d0:	88 0f       	add	r24, r24
 1d2:	8e 77       	andi	r24, 0x7E	; 126
 1d4:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_SendByte>
 1d8:	8c 2f       	mov	r24, r28
 1da:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_SendByte>
 1de:	c4 9a       	sbi	0x18, 4	; 24
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <Read_MFRC522>:
 1e4:	c4 98       	cbi	0x18, 4	; 24
 1e6:	88 0f       	add	r24, r24
 1e8:	8e 77       	andi	r24, 0x7E	; 126
 1ea:	80 68       	ori	r24, 0x80	; 128
 1ec:	0e 94 ed 02 	call	0x5da	; 0x5da <SPI_SendByte>
 1f0:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <spi_read_byte>
 1f4:	c4 9a       	sbi	0x18, 4	; 24
 1f6:	08 95       	ret

000001f8 <MFRC522_Reset>:
 1f8:	6f e0       	ldi	r22, 0x0F	; 15
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 200:	08 95       	ret

00000202 <MFRC522_SetBitMask>:
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	d8 2f       	mov	r29, r24
 208:	c6 2f       	mov	r28, r22
 20a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 20e:	68 2f       	mov	r22, r24
 210:	6c 2b       	or	r22, r28
 212:	8d 2f       	mov	r24, r29
 214:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 218:	df 91       	pop	r29
 21a:	cf 91       	pop	r28
 21c:	08 95       	ret

0000021e <MFRC522_AntennaOn>:
 21e:	84 e1       	ldi	r24, 0x14	; 20
 220:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 224:	83 70       	andi	r24, 0x03	; 3
 226:	21 f4       	brne	.+8      	; 0x230 <MFRC522_AntennaOn+0x12>
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	84 e1       	ldi	r24, 0x14	; 20
 22c:	0e 94 01 01 	call	0x202	; 0x202 <MFRC522_SetBitMask>
 230:	08 95       	ret

00000232 <MFRC522_ClearBitMask>:
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	d8 2f       	mov	r29, r24
 238:	c6 2f       	mov	r28, r22
 23a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 23e:	c0 95       	com	r28
 240:	68 2f       	mov	r22, r24
 242:	6c 23       	and	r22, r28
 244:	8d 2f       	mov	r24, r29
 246:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <MFRC522_ToCard>:
 250:	7f 92       	push	r7
 252:	8f 92       	push	r8
 254:	9f 92       	push	r9
 256:	af 92       	push	r10
 258:	bf 92       	push	r11
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	b8 2e       	mov	r11, r24
 26c:	c6 2f       	mov	r28, r22
 26e:	d7 2f       	mov	r29, r23
 270:	c4 2e       	mov	r12, r20
 272:	a2 2e       	mov	r10, r18
 274:	93 2e       	mov	r9, r19
 276:	78 01       	movw	r14, r16
 278:	8c e0       	ldi	r24, 0x0C	; 12
 27a:	b8 16       	cp	r11, r24
 27c:	09 f4       	brne	.+2      	; 0x280 <MFRC522_ToCard+0x30>
 27e:	b3 c0       	rjmp	.+358    	; 0x3e6 <MFRC522_ToCard+0x196>
 280:	ee e0       	ldi	r30, 0x0E	; 14
 282:	be 16       	cp	r11, r30
 284:	09 f4       	brne	.+2      	; 0x288 <MFRC522_ToCard+0x38>
 286:	d1 c0       	rjmp	.+418    	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 288:	60 e8       	ldi	r22, 0x80	; 128
 28a:	82 e0       	ldi	r24, 0x02	; 2
 28c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 290:	60 e8       	ldi	r22, 0x80	; 128
 292:	84 e0       	ldi	r24, 0x04	; 4
 294:	0e 94 19 01 	call	0x232	; 0x232 <MFRC522_ClearBitMask>
 298:	60 e8       	ldi	r22, 0x80	; 128
 29a:	8a e0       	ldi	r24, 0x0A	; 10
 29c:	0e 94 01 01 	call	0x202	; 0x202 <MFRC522_SetBitMask>
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 2a8:	d1 2c       	mov	r13, r1
 2aa:	c1 14       	cp	r12, r1
 2ac:	d1 04       	cpc	r13, r1
 2ae:	11 f1       	breq	.+68     	; 0x2f4 <MFRC522_ToCard+0xa4>
 2b0:	71 2c       	mov	r7, r1
 2b2:	81 2c       	mov	r8, r1
 2b4:	10 c0       	rjmp	.+32     	; 0x2d6 <MFRC522_ToCard+0x86>
 2b6:	0f 2e       	mov	r0, r31
 2b8:	f0 e3       	ldi	r31, 0x30	; 48
 2ba:	7f 2e       	mov	r7, r31
 2bc:	f0 2d       	mov	r31, r0
 2be:	0f 2e       	mov	r0, r31
 2c0:	f7 e7       	ldi	r31, 0x77	; 119
 2c2:	8f 2e       	mov	r8, r31
 2c4:	f0 2d       	mov	r31, r0
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <MFRC522_ToCard+0x86>
 2c8:	68 94       	set
 2ca:	77 24       	eor	r7, r7
 2cc:	74 f8       	bld	r7, 4
 2ce:	0f 2e       	mov	r0, r31
 2d0:	f2 e1       	ldi	r31, 0x12	; 18
 2d2:	8f 2e       	mov	r8, r31
 2d4:	f0 2d       	mov	r31, r0
 2d6:	0c 2f       	mov	r16, r28
 2d8:	1d 2f       	mov	r17, r29
 2da:	c0 e0       	ldi	r28, 0x00	; 0
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	f8 01       	movw	r30, r16
 2e0:	61 91       	ld	r22, Z+
 2e2:	8f 01       	movw	r16, r30
 2e4:	89 e0       	ldi	r24, 0x09	; 9
 2e6:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 2ea:	21 96       	adiw	r28, 0x01	; 1
 2ec:	cc 15       	cp	r28, r12
 2ee:	dd 05       	cpc	r29, r13
 2f0:	b0 f3       	brcs	.-20     	; 0x2de <MFRC522_ToCard+0x8e>
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <MFRC522_ToCard+0xa8>
 2f4:	71 2c       	mov	r7, r1
 2f6:	81 2c       	mov	r8, r1
 2f8:	6b 2d       	mov	r22, r11
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 300:	fc e0       	ldi	r31, 0x0C	; 12
 302:	bf 12       	cpse	r11, r31
 304:	04 c0       	rjmp	.+8      	; 0x30e <MFRC522_ToCard+0xbe>
 306:	60 e8       	ldi	r22, 0x80	; 128
 308:	8d e0       	ldi	r24, 0x0D	; 13
 30a:	0e 94 01 01 	call	0x202	; 0x202 <MFRC522_SetBitMask>
 30e:	84 e0       	ldi	r24, 0x04	; 4
 310:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 314:	18 2f       	mov	r17, r24
 316:	cf ec       	ldi	r28, 0xCF	; 207
 318:	d7 e0       	ldi	r29, 0x07	; 7
 31a:	07 2d       	mov	r16, r7
 31c:	01 60       	ori	r16, 0x01	; 1
 31e:	07 c0       	rjmp	.+14     	; 0x32e <MFRC522_ToCard+0xde>
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 326:	18 2f       	mov	r17, r24
 328:	21 97       	sbiw	r28, 0x01	; 1
 32a:	09 f4       	brne	.+2      	; 0x32e <MFRC522_ToCard+0xde>
 32c:	94 c0       	rjmp	.+296    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 32e:	91 2f       	mov	r25, r17
 330:	90 23       	and	r25, r16
 332:	b1 f3       	breq	.-20     	; 0x320 <MFRC522_ToCard+0xd0>
 334:	96 c0       	rjmp	.+300    	; 0x462 <__stack+0x3>
 336:	88 2d       	mov	r24, r8
 338:	81 70       	andi	r24, 0x01	; 1
 33a:	18 23       	and	r17, r24
 33c:	c1 e0       	ldi	r28, 0x01	; 1
 33e:	09 f4       	brne	.+2      	; 0x342 <MFRC522_ToCard+0xf2>
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	8c e0       	ldi	r24, 0x0C	; 12
 344:	b8 12       	cpse	r11, r24
 346:	98 c0       	rjmp	.+304    	; 0x478 <__stack+0x19>
 348:	8a e0       	ldi	r24, 0x0A	; 10
 34a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 34e:	d8 2f       	mov	r29, r24
 350:	8c e0       	ldi	r24, 0x0C	; 12
 352:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 356:	28 2f       	mov	r18, r24
 358:	27 70       	andi	r18, 0x07	; 7
 35a:	79 f0       	breq	.+30     	; 0x37a <MFRC522_ToCard+0x12a>
 35c:	8d 2f       	mov	r24, r29
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	01 97       	sbiw	r24, 0x01	; 1
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	82 0f       	add	r24, r18
 370:	91 1d       	adc	r25, r1
 372:	f7 01       	movw	r30, r14
 374:	91 83       	std	Z+1, r25	; 0x01
 376:	80 83       	st	Z, r24
 378:	0b c0       	rjmp	.+22     	; 0x390 <MFRC522_ToCard+0x140>
 37a:	8d 2f       	mov	r24, r29
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	88 0f       	add	r24, r24
 380:	99 1f       	adc	r25, r25
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	f7 01       	movw	r30, r14
 38c:	91 83       	std	Z+1, r25	; 0x01
 38e:	80 83       	st	Z, r24
 390:	dd 23       	and	r29, r29
 392:	49 f0       	breq	.+18     	; 0x3a6 <MFRC522_ToCard+0x156>
 394:	d1 31       	cpi	r29, 0x11	; 17
 396:	08 f0       	brcs	.+2      	; 0x39a <MFRC522_ToCard+0x14a>
 398:	d0 e1       	ldi	r29, 0x10	; 16
 39a:	ed 2e       	mov	r14, r29
 39c:	f1 2c       	mov	r15, r1
 39e:	e1 14       	cp	r14, r1
 3a0:	f1 04       	cpc	r15, r1
 3a2:	21 f4       	brne	.+8      	; 0x3ac <MFRC522_ToCard+0x15c>
 3a4:	69 c0       	rjmp	.+210    	; 0x478 <__stack+0x19>
 3a6:	ee 24       	eor	r14, r14
 3a8:	e3 94       	inc	r14
 3aa:	f1 2c       	mov	r15, r1
 3ac:	ca 2c       	mov	r12, r10
 3ae:	d9 2c       	mov	r13, r9
 3b0:	00 e0       	ldi	r16, 0x00	; 0
 3b2:	10 e0       	ldi	r17, 0x00	; 0
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 3ba:	f6 01       	movw	r30, r12
 3bc:	81 93       	st	Z+, r24
 3be:	6f 01       	movw	r12, r30
 3c0:	0f 5f       	subi	r16, 0xFF	; 255
 3c2:	1f 4f       	sbci	r17, 0xFF	; 255
 3c4:	0e 15       	cp	r16, r14
 3c6:	1f 05       	cpc	r17, r15
 3c8:	a8 f3       	brcs	.-22     	; 0x3b4 <MFRC522_ToCard+0x164>
 3ca:	56 c0       	rjmp	.+172    	; 0x478 <__stack+0x19>
 3cc:	6c e0       	ldi	r22, 0x0C	; 12
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 3d4:	0f 2e       	mov	r0, r31
 3d6:	f0 e3       	ldi	r31, 0x30	; 48
 3d8:	7f 2e       	mov	r7, r31
 3da:	f0 2d       	mov	r31, r0
 3dc:	0f 2e       	mov	r0, r31
 3de:	f7 e7       	ldi	r31, 0x77	; 119
 3e0:	8f 2e       	mov	r8, r31
 3e2:	f0 2d       	mov	r31, r0
 3e4:	90 cf       	rjmp	.-224    	; 0x306 <MFRC522_ToCard+0xb6>
 3e6:	67 ef       	ldi	r22, 0xF7	; 247
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 3ee:	60 e8       	ldi	r22, 0x80	; 128
 3f0:	84 e0       	ldi	r24, 0x04	; 4
 3f2:	0e 94 19 01 	call	0x232	; 0x232 <MFRC522_ClearBitMask>
 3f6:	60 e8       	ldi	r22, 0x80	; 128
 3f8:	8a e0       	ldi	r24, 0x0A	; 10
 3fa:	0e 94 01 01 	call	0x202	; 0x202 <MFRC522_SetBitMask>
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 406:	d1 2c       	mov	r13, r1
 408:	c1 14       	cp	r12, r1
 40a:	d1 04       	cpc	r13, r1
 40c:	09 f0       	breq	.+2      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40e:	53 cf       	rjmp	.-346    	; 0x2b6 <MFRC522_ToCard+0x66>
 410:	dd cf       	rjmp	.-70     	; 0x3cc <MFRC522_ToCard+0x17c>
 412:	6e e0       	ldi	r22, 0x0E	; 14
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 41a:	68 94       	set
 41c:	77 24       	eor	r7, r7
 41e:	74 f8       	bld	r7, 4
 420:	0f 2e       	mov	r0, r31
 422:	f2 e1       	ldi	r31, 0x12	; 18
 424:	8f 2e       	mov	r8, r31
 426:	f0 2d       	mov	r31, r0
 428:	72 cf       	rjmp	.-284    	; 0x30e <MFRC522_ToCard+0xbe>
 42a:	62 e9       	ldi	r22, 0x92	; 146
 42c:	82 e0       	ldi	r24, 0x02	; 2
 42e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 432:	60 e8       	ldi	r22, 0x80	; 128
 434:	84 e0       	ldi	r24, 0x04	; 4
 436:	0e 94 19 01 	call	0x232	; 0x232 <MFRC522_ClearBitMask>
 43a:	60 e8       	ldi	r22, 0x80	; 128
 43c:	8a e0       	ldi	r24, 0x0A	; 10
 43e:	0e 94 01 01 	call	0x202	; 0x202 <MFRC522_SetBitMask>
 442:	60 e0       	ldi	r22, 0x00	; 0
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 44a:	d1 2c       	mov	r13, r1
 44c:	c1 14       	cp	r12, r1
 44e:	d1 04       	cpc	r13, r1
 450:	09 f0       	breq	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	3a cf       	rjmp	.-396    	; 0x2c8 <MFRC522_ToCard+0x78>
 454:	de cf       	rjmp	.-68     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 456:	60 e8       	ldi	r22, 0x80	; 128
 458:	8d e0       	ldi	r24, 0x0D	; 13
 45a:	0e 94 19 01 	call	0x232	; 0x232 <MFRC522_ClearBitMask>
 45e:	c2 e0       	ldi	r28, 0x02	; 2
 460:	0b c0       	rjmp	.+22     	; 0x478 <__stack+0x19>
 462:	60 e8       	ldi	r22, 0x80	; 128
 464:	8d e0       	ldi	r24, 0x0D	; 13
 466:	0e 94 19 01 	call	0x232	; 0x232 <MFRC522_ClearBitMask>
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Read_MFRC522>
 470:	8b 71       	andi	r24, 0x1B	; 27
 472:	09 f4       	brne	.+2      	; 0x476 <__stack+0x17>
 474:	60 cf       	rjmp	.-320    	; 0x336 <MFRC522_ToCard+0xe6>
 476:	c2 e0       	ldi	r28, 0x02	; 2
 478:	8c 2f       	mov	r24, r28
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	df 90       	pop	r13
 488:	cf 90       	pop	r12
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	9f 90       	pop	r9
 490:	8f 90       	pop	r8
 492:	7f 90       	pop	r7
 494:	08 95       	ret

00000496 <MFRC522_Anticoll>:
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <MFRC522_Anticoll+0xe>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	7c 01       	movw	r14, r24
 4aa:	60 e0       	ldi	r22, 0x00	; 0
 4ac:	8d e0       	ldi	r24, 0x0D	; 13
 4ae:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
 4b2:	83 e9       	ldi	r24, 0x93	; 147
 4b4:	f7 01       	movw	r30, r14
 4b6:	80 83       	st	Z, r24
 4b8:	80 e2       	ldi	r24, 0x20	; 32
 4ba:	81 83       	std	Z+1, r24	; 0x01
 4bc:	8e 01       	movw	r16, r28
 4be:	0f 5f       	subi	r16, 0xFF	; 255
 4c0:	1f 4f       	sbci	r17, 0xFF	; 255
 4c2:	97 01       	movw	r18, r14
 4c4:	42 e0       	ldi	r20, 0x02	; 2
 4c6:	b7 01       	movw	r22, r14
 4c8:	8c e0       	ldi	r24, 0x0C	; 12
 4ca:	0e 94 28 01 	call	0x250	; 0x250 <MFRC522_ToCard>
 4ce:	81 11       	cpse	r24, r1
 4d0:	0e c0       	rjmp	.+28     	; 0x4ee <MFRC522_Anticoll+0x58>
 4d2:	f7 01       	movw	r30, r14
 4d4:	a7 01       	movw	r20, r14
 4d6:	4c 5f       	subi	r20, 0xFC	; 252
 4d8:	5f 4f       	sbci	r21, 0xFF	; 255
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	21 91       	ld	r18, Z+
 4de:	92 27       	eor	r25, r18
 4e0:	e4 17       	cp	r30, r20
 4e2:	f5 07       	cpc	r31, r21
 4e4:	d9 f7       	brne	.-10     	; 0x4dc <MFRC522_Anticoll+0x46>
 4e6:	f7 01       	movw	r30, r14
 4e8:	24 81       	ldd	r18, Z+4	; 0x04
 4ea:	29 13       	cpse	r18, r25
 4ec:	82 e0       	ldi	r24, 0x02	; 2
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	ef 90       	pop	r14
 4fe:	08 95       	ret

00000500 <MFRC522_Request>:
* 0x0800 = Mifare_Pro(X)
* 0x4403 = Mifare_DESFire
* return:return MI_OK if successed
*/
unsigned char MFRC522_Request(unsigned char reqMode, unsigned char *TagType)
{
 500:	ef 92       	push	r14
 502:	ff 92       	push	r15
 504:	0f 93       	push	r16
 506:	1f 93       	push	r17
 508:	cf 93       	push	r28
 50a:	df 93       	push	r29
 50c:	00 d0       	rcall	.+0      	; 0x50e <MFRC522_Request+0xe>
 50e:	cd b7       	in	r28, 0x3d	; 61
 510:	de b7       	in	r29, 0x3e	; 62
 512:	18 2f       	mov	r17, r24
 514:	7b 01       	movw	r14, r22
	unsigned char status;
	unsigned int backBits;	//the data bits that received
	Write_MFRC522(BitFramingReg, 0x07);	//TxLastBists = BitFramingReg[2..0] ???
 516:	67 e0       	ldi	r22, 0x07	; 7
 518:	8d e0       	ldi	r24, 0x0D	; 13
 51a:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	TagType[0] = reqMode;
 51e:	f7 01       	movw	r30, r14
 520:	10 83       	st	Z, r17
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 522:	8e 01       	movw	r16, r28
 524:	0f 5f       	subi	r16, 0xFF	; 255
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	97 01       	movw	r18, r14
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	b7 01       	movw	r22, r14
 52e:	8c e0       	ldi	r24, 0x0C	; 12
 530:	0e 94 28 01 	call	0x250	; 0x250 <MFRC522_ToCard>
	if ((status != MI_OK) || (backBits != 0x10)){
 534:	81 11       	cpse	r24, r1
 536:	07 c0       	rjmp	.+14     	; 0x546 <MFRC522_Request+0x46>
 538:	29 81       	ldd	r18, Y+1	; 0x01
 53a:	3a 81       	ldd	r19, Y+2	; 0x02
 53c:	20 31       	cpi	r18, 0x10	; 16
 53e:	31 05       	cpc	r19, r1
 540:	19 f0       	breq	.+6      	; 0x548 <MFRC522_Request+0x48>
		status = MI_ERR;
 542:	82 e0       	ldi	r24, 0x02	; 2
 544:	01 c0       	rjmp	.+2      	; 0x548 <MFRC522_Request+0x48>
 546:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	return status;
}
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	08 95       	ret

0000055a <MFCR522_Init>:


void MFCR522_Init(void)
{

	SPI_Master_Init(MASTER,DEL_16);
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <SPI_Master_Init>
	pinSlaveSelect_OUTPUT; // Set digital pin 10 as OUTPUT to connect it to the RFID /ENABLE pin
 562:	bc 9a       	sbi	0x17, 4	; 23
	pinSlaveSelect_LOW; // Activate the RFID reader
 564:	c4 98       	cbi	0x18, 4	; 24
	pinReset_OUTPUT; // Set digital pin 10 , Not Reset and Power-down
 566:	d1 9a       	sbi	0x1a, 1	; 26
	pinReset_LOW;
 568:	d9 98       	cbi	0x1b, 1	; 27
	//_delay_ms(1);
	// activate
	pinReset_HIGH;
 56a:	d9 9a       	sbi	0x1b, 1	; 27

	MFRC522_Reset();
 56c:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <MFRC522_Reset>
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);	//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 570:	6d e8       	ldi	r22, 0x8D	; 141
 572:	8a e2       	ldi	r24, 0x2A	; 42
 574:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 578:	6e e3       	ldi	r22, 0x3E	; 62
 57a:	8b e2       	ldi	r24, 0x2B	; 43
 57c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 580:	6e e1       	ldi	r22, 0x1E	; 30
 582:	8d e2       	ldi	r24, 0x2D	; 45
 584:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 588:	60 e0       	ldi	r22, 0x00	; 0
 58a:	8c e2       	ldi	r24, 0x2C	; 44
 58c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	Write_MFRC522(TxAutoReg, 0x40);	//100%ASK
 590:	60 e4       	ldi	r22, 0x40	; 64
 592:	85 e1       	ldi	r24, 0x15	; 21
 594:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);	//CRC initilizate value 0x6363 ???
 598:	6d e3       	ldi	r22, 0x3D	; 61
 59a:	81 e1       	ldi	r24, 0x11	; 17
 59c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <Write_MFRC522>
	//ClearBitMask(Status2Reg, 0x08); //MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86); //RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F); //RxGain = 48dB
	//Write_MFRC522(GsNReg, 0xFF);
	//Write_MFRC522(CWGsPReg, 0xFF);
	MFRC522_AntennaOn();	//turn on antenna
 5a0:	0e 94 0f 01 	call	0x21e	; 0x21e <MFRC522_AntennaOn>
 5a4:	08 95       	ret

000005a6 <SPI_Master_Init>:
#include "SPI.h"

void SPI_Master_Init(char flagMode,char del)
{
	if (flagMode==MASTER)
 5a6:	81 30       	cpi	r24, 0x01	; 1
 5a8:	b9 f4       	brne	.+46     	; 0x5d8 <SPI_Master_Init+0x32>
	{
		/*¬ыставим на выход ножки дл¤ SPI интерфейса*/
	DDR_SPI|=(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
 5aa:	87 b3       	in	r24, 0x17	; 23
 5ac:	80 6b       	ori	r24, 0xB0	; 176
 5ae:	87 bb       	out	0x17, r24	; 23
	PORT_SPI&=~((1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS));
 5b0:	88 b3       	in	r24, 0x18	; 24
 5b2:	8f 74       	andi	r24, 0x4F	; 79
 5b4:	88 bb       	out	0x18, r24	; 24
	MSTR (Master/Slave Select) Ч бит, который назначает устройство ведущим либо ведомым. ѕри установке данного бита 1 устройство будет ведущим.

	*/
	/*(вкл. режим мастера)|(вкл.SPI)|(устанавливаем предделитель 16)*/
	//SPCR|=(1<<MSTR)|(1<<SPE);
	switch(del)
 5b6:	61 30       	cpi	r22, 0x01	; 1
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <SPI_Master_Init+0x2c>
 5ba:	18 f0       	brcs	.+6      	; 0x5c2 <SPI_Master_Init+0x1c>
 5bc:	62 30       	cpi	r22, 0x02	; 2
 5be:	29 f0       	breq	.+10     	; 0x5ca <SPI_Master_Init+0x24>
 5c0:	08 95       	ret
	{
		case DEL_16:
		{
			SPCR|=(1<<SPR0)|(1<<MSTR)|(1<<SPE);		
 5c2:	8d b1       	in	r24, 0x0d	; 13
 5c4:	81 65       	ori	r24, 0x51	; 81
 5c6:	8d b9       	out	0x0d, r24	; 13
			break;
 5c8:	08 95       	ret
		}
		case  DEL_64:
		{
			SPCR|=(1<<SPR1)|(1<<MSTR)|(1<<SPE);
 5ca:	8d b1       	in	r24, 0x0d	; 13
 5cc:	82 65       	ori	r24, 0x52	; 82
 5ce:	8d b9       	out	0x0d, r24	; 13
			break;
 5d0:	08 95       	ret
		}
		case DEL_128:
		{
			SPCR|=(1<<SPR1)|(1<<SPR0)|(1<<MSTR)|(1<<SPE);
 5d2:	8d b1       	in	r24, 0x0d	; 13
 5d4:	83 65       	ori	r24, 0x53	; 83
 5d6:	8d b9       	out	0x0d, r24	; 13
 5d8:	08 95       	ret

000005da <SPI_SendByte>:
}

void SPI_SendByte(char byte)
{

	SPDR = byte;
 5da:	8f b9       	out	0x0f, r24	; 15
	while (!(SPSR & (1 << SPIF)));
 5dc:	77 9b       	sbis	0x0e, 7	; 14
 5de:	fe cf       	rjmp	.-4      	; 0x5dc <SPI_SendByte+0x2>
}
 5e0:	08 95       	ret

000005e2 <spi_read_byte>:

uint8_t spi_read_byte(void){
	SPDR = 0x00;
 5e2:	1f b8       	out	0x0f, r1	; 15
	while(!(SPSR & (1<<SPIF)));
 5e4:	77 9b       	sbis	0x0e, 7	; 14
 5e6:	fe cf       	rjmp	.-4      	; 0x5e4 <spi_read_byte+0x2>
	return SPDR;
 5e8:	8f b1       	in	r24, 0x0f	; 15
 5ea:	08 95       	ret

000005ec <Usart_Init>:
		str++;
		i++;

	}

}
 5ec:	9b 01       	movw	r18, r22
 5ee:	ac 01       	movw	r20, r24
 5f0:	60 e2       	ldi	r22, 0x20	; 32
 5f2:	71 ea       	ldi	r23, 0xA1	; 161
 5f4:	87 e0       	ldi	r24, 0x07	; 7
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodsi4>
 5fc:	da 01       	movw	r26, r20
 5fe:	c9 01       	movw	r24, r18
 600:	01 97       	sbiw	r24, 0x01	; 1
 602:	a1 09       	sbc	r26, r1
 604:	b1 09       	sbc	r27, r1
 606:	89 2f       	mov	r24, r25
 608:	9a 2f       	mov	r25, r26
 60a:	ab 2f       	mov	r26, r27
 60c:	bb 27       	eor	r27, r27
 60e:	80 bd       	out	0x20, r24	; 32
 610:	21 50       	subi	r18, 0x01	; 1
 612:	29 b9       	out	0x09, r18	; 9
 614:	1b b8       	out	0x0b, r1	; 11
 616:	8a b1       	in	r24, 0x0a	; 10
 618:	88 69       	ori	r24, 0x98	; 152
 61a:	8a b9       	out	0x0a, r24	; 10
 61c:	86 e8       	ldi	r24, 0x86	; 134
 61e:	80 bd       	out	0x20, r24	; 32
 620:	08 95       	ret

00000622 <Usart_char_out>:
 622:	5d 9b       	sbis	0x0b, 5	; 11
 624:	fe cf       	rjmp	.-4      	; 0x622 <Usart_char_out>
 626:	8c b9       	out	0x0c, r24	; 12
 628:	08 95       	ret

0000062a <Usart_PrintString>:

void Usart_PrintString(char *str)
{
 62a:	0f 93       	push	r16
 62c:	1f 93       	push	r17
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	8c 01       	movw	r16, r24

	char i=0;
	while(str[i])
 634:	fc 01       	movw	r30, r24
 636:	80 81       	ld	r24, Z
 638:	88 23       	and	r24, r24
 63a:	61 f0       	breq	.+24     	; 0x654 <Usart_PrintString+0x2a>
 63c:	e8 01       	movw	r28, r16
	{
		Usart_char_out(*str);
 63e:	89 91       	ld	r24, Y+
 640:	0e 94 11 03 	call	0x622	; 0x622 <Usart_char_out>
 644:	9c 2f       	mov	r25, r28
 646:	90 1b       	sub	r25, r16

void Usart_PrintString(char *str)
{

	char i=0;
	while(str[i])
 648:	fe 01       	movw	r30, r28
 64a:	e9 0f       	add	r30, r25
 64c:	f1 1d       	adc	r31, r1
 64e:	90 81       	ld	r25, Z
 650:	91 11       	cpse	r25, r1
 652:	f5 cf       	rjmp	.-22     	; 0x63e <Usart_PrintString+0x14>
		Usart_char_out(*str);
		str++;
		i++;

	}
	Usart_char_out(0x0D);
 654:	8d e0       	ldi	r24, 0x0D	; 13
 656:	0e 94 11 03 	call	0x622	; 0x622 <Usart_char_out>
	Usart_char_out(0x0A);
 65a:	8a e0       	ldi	r24, 0x0A	; 10
 65c:	0e 94 11 03 	call	0x622	; 0x622 <Usart_char_out>
}
 660:	df 91       	pop	r29
 662:	cf 91       	pop	r28
 664:	1f 91       	pop	r17
 666:	0f 91       	pop	r16
 668:	08 95       	ret

0000066a <__udivmodsi4>:
 66a:	a1 e2       	ldi	r26, 0x21	; 33
 66c:	1a 2e       	mov	r1, r26
 66e:	aa 1b       	sub	r26, r26
 670:	bb 1b       	sub	r27, r27
 672:	fd 01       	movw	r30, r26
 674:	0d c0       	rjmp	.+26     	; 0x690 <__udivmodsi4_ep>

00000676 <__udivmodsi4_loop>:
 676:	aa 1f       	adc	r26, r26
 678:	bb 1f       	adc	r27, r27
 67a:	ee 1f       	adc	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	a2 17       	cp	r26, r18
 680:	b3 07       	cpc	r27, r19
 682:	e4 07       	cpc	r30, r20
 684:	f5 07       	cpc	r31, r21
 686:	20 f0       	brcs	.+8      	; 0x690 <__udivmodsi4_ep>
 688:	a2 1b       	sub	r26, r18
 68a:	b3 0b       	sbc	r27, r19
 68c:	e4 0b       	sbc	r30, r20
 68e:	f5 0b       	sbc	r31, r21

00000690 <__udivmodsi4_ep>:
 690:	66 1f       	adc	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a 94       	dec	r1
 69a:	69 f7       	brne	.-38     	; 0x676 <__udivmodsi4_loop>
 69c:	60 95       	com	r22
 69e:	70 95       	com	r23
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	9b 01       	movw	r18, r22
 6a6:	ac 01       	movw	r20, r24
 6a8:	bd 01       	movw	r22, r26
 6aa:	cf 01       	movw	r24, r30
 6ac:	08 95       	ret

000006ae <sprintf>:
 6ae:	ae e0       	ldi	r26, 0x0E	; 14
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	ed e5       	ldi	r30, 0x5D	; 93
 6b4:	f3 e0       	ldi	r31, 0x03	; 3
 6b6:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__prologue_saves__+0x1c>
 6ba:	0d 89       	ldd	r16, Y+21	; 0x15
 6bc:	1e 89       	ldd	r17, Y+22	; 0x16
 6be:	86 e0       	ldi	r24, 0x06	; 6
 6c0:	8c 83       	std	Y+4, r24	; 0x04
 6c2:	1a 83       	std	Y+2, r17	; 0x02
 6c4:	09 83       	std	Y+1, r16	; 0x01
 6c6:	8f ef       	ldi	r24, 0xFF	; 255
 6c8:	9f e7       	ldi	r25, 0x7F	; 127
 6ca:	9e 83       	std	Y+6, r25	; 0x06
 6cc:	8d 83       	std	Y+5, r24	; 0x05
 6ce:	ae 01       	movw	r20, r28
 6d0:	47 5e       	subi	r20, 0xE7	; 231
 6d2:	5f 4f       	sbci	r21, 0xFF	; 255
 6d4:	6f 89       	ldd	r22, Y+23	; 0x17
 6d6:	78 8d       	ldd	r23, Y+24	; 0x18
 6d8:	ce 01       	movw	r24, r28
 6da:	01 96       	adiw	r24, 0x01	; 1
 6dc:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <vfprintf>
 6e0:	2f 81       	ldd	r18, Y+7	; 0x07
 6e2:	38 85       	ldd	r19, Y+8	; 0x08
 6e4:	f8 01       	movw	r30, r16
 6e6:	e2 0f       	add	r30, r18
 6e8:	f3 1f       	adc	r31, r19
 6ea:	10 82       	st	Z, r1
 6ec:	2e 96       	adiw	r28, 0x0e	; 14
 6ee:	e4 e0       	ldi	r30, 0x04	; 4
 6f0:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__epilogue_restores__+0x1c>

000006f4 <vfprintf>:
 6f4:	ac e0       	ldi	r26, 0x0C	; 12
 6f6:	b0 e0       	ldi	r27, 0x00	; 0
 6f8:	e0 e8       	ldi	r30, 0x80	; 128
 6fa:	f3 e0       	ldi	r31, 0x03	; 3
 6fc:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__prologue_saves__>
 700:	7c 01       	movw	r14, r24
 702:	6b 01       	movw	r12, r22
 704:	8a 01       	movw	r16, r20
 706:	fc 01       	movw	r30, r24
 708:	17 82       	std	Z+7, r1	; 0x07
 70a:	16 82       	std	Z+6, r1	; 0x06
 70c:	83 81       	ldd	r24, Z+3	; 0x03
 70e:	81 ff       	sbrs	r24, 1
 710:	bd c1       	rjmp	.+890    	; 0xa8c <vfprintf+0x398>
 712:	ce 01       	movw	r24, r28
 714:	01 96       	adiw	r24, 0x01	; 1
 716:	4c 01       	movw	r8, r24
 718:	f7 01       	movw	r30, r14
 71a:	93 81       	ldd	r25, Z+3	; 0x03
 71c:	f6 01       	movw	r30, r12
 71e:	93 fd       	sbrc	r25, 3
 720:	85 91       	lpm	r24, Z+
 722:	93 ff       	sbrs	r25, 3
 724:	81 91       	ld	r24, Z+
 726:	6f 01       	movw	r12, r30
 728:	88 23       	and	r24, r24
 72a:	09 f4       	brne	.+2      	; 0x72e <vfprintf+0x3a>
 72c:	ab c1       	rjmp	.+854    	; 0xa84 <vfprintf+0x390>
 72e:	85 32       	cpi	r24, 0x25	; 37
 730:	39 f4       	brne	.+14     	; 0x740 <vfprintf+0x4c>
 732:	93 fd       	sbrc	r25, 3
 734:	85 91       	lpm	r24, Z+
 736:	93 ff       	sbrs	r25, 3
 738:	81 91       	ld	r24, Z+
 73a:	6f 01       	movw	r12, r30
 73c:	85 32       	cpi	r24, 0x25	; 37
 73e:	29 f4       	brne	.+10     	; 0x74a <vfprintf+0x56>
 740:	b7 01       	movw	r22, r14
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 748:	e7 cf       	rjmp	.-50     	; 0x718 <vfprintf+0x24>
 74a:	51 2c       	mov	r5, r1
 74c:	31 2c       	mov	r3, r1
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	20 32       	cpi	r18, 0x20	; 32
 752:	a0 f4       	brcc	.+40     	; 0x77c <vfprintf+0x88>
 754:	8b 32       	cpi	r24, 0x2B	; 43
 756:	69 f0       	breq	.+26     	; 0x772 <vfprintf+0x7e>
 758:	30 f4       	brcc	.+12     	; 0x766 <vfprintf+0x72>
 75a:	80 32       	cpi	r24, 0x20	; 32
 75c:	59 f0       	breq	.+22     	; 0x774 <vfprintf+0x80>
 75e:	83 32       	cpi	r24, 0x23	; 35
 760:	69 f4       	brne	.+26     	; 0x77c <vfprintf+0x88>
 762:	20 61       	ori	r18, 0x10	; 16
 764:	2c c0       	rjmp	.+88     	; 0x7be <vfprintf+0xca>
 766:	8d 32       	cpi	r24, 0x2D	; 45
 768:	39 f0       	breq	.+14     	; 0x778 <vfprintf+0x84>
 76a:	80 33       	cpi	r24, 0x30	; 48
 76c:	39 f4       	brne	.+14     	; 0x77c <vfprintf+0x88>
 76e:	21 60       	ori	r18, 0x01	; 1
 770:	26 c0       	rjmp	.+76     	; 0x7be <vfprintf+0xca>
 772:	22 60       	ori	r18, 0x02	; 2
 774:	24 60       	ori	r18, 0x04	; 4
 776:	23 c0       	rjmp	.+70     	; 0x7be <vfprintf+0xca>
 778:	28 60       	ori	r18, 0x08	; 8
 77a:	21 c0       	rjmp	.+66     	; 0x7be <vfprintf+0xca>
 77c:	27 fd       	sbrc	r18, 7
 77e:	27 c0       	rjmp	.+78     	; 0x7ce <vfprintf+0xda>
 780:	30 ed       	ldi	r19, 0xD0	; 208
 782:	38 0f       	add	r19, r24
 784:	3a 30       	cpi	r19, 0x0A	; 10
 786:	78 f4       	brcc	.+30     	; 0x7a6 <vfprintf+0xb2>
 788:	26 ff       	sbrs	r18, 6
 78a:	06 c0       	rjmp	.+12     	; 0x798 <vfprintf+0xa4>
 78c:	fa e0       	ldi	r31, 0x0A	; 10
 78e:	5f 9e       	mul	r5, r31
 790:	30 0d       	add	r19, r0
 792:	11 24       	eor	r1, r1
 794:	53 2e       	mov	r5, r19
 796:	13 c0       	rjmp	.+38     	; 0x7be <vfprintf+0xca>
 798:	8a e0       	ldi	r24, 0x0A	; 10
 79a:	38 9e       	mul	r3, r24
 79c:	30 0d       	add	r19, r0
 79e:	11 24       	eor	r1, r1
 7a0:	33 2e       	mov	r3, r19
 7a2:	20 62       	ori	r18, 0x20	; 32
 7a4:	0c c0       	rjmp	.+24     	; 0x7be <vfprintf+0xca>
 7a6:	8e 32       	cpi	r24, 0x2E	; 46
 7a8:	21 f4       	brne	.+8      	; 0x7b2 <vfprintf+0xbe>
 7aa:	26 fd       	sbrc	r18, 6
 7ac:	6b c1       	rjmp	.+726    	; 0xa84 <vfprintf+0x390>
 7ae:	20 64       	ori	r18, 0x40	; 64
 7b0:	06 c0       	rjmp	.+12     	; 0x7be <vfprintf+0xca>
 7b2:	8c 36       	cpi	r24, 0x6C	; 108
 7b4:	11 f4       	brne	.+4      	; 0x7ba <vfprintf+0xc6>
 7b6:	20 68       	ori	r18, 0x80	; 128
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <vfprintf+0xca>
 7ba:	88 36       	cpi	r24, 0x68	; 104
 7bc:	41 f4       	brne	.+16     	; 0x7ce <vfprintf+0xda>
 7be:	f6 01       	movw	r30, r12
 7c0:	93 fd       	sbrc	r25, 3
 7c2:	85 91       	lpm	r24, Z+
 7c4:	93 ff       	sbrs	r25, 3
 7c6:	81 91       	ld	r24, Z+
 7c8:	6f 01       	movw	r12, r30
 7ca:	81 11       	cpse	r24, r1
 7cc:	c1 cf       	rjmp	.-126    	; 0x750 <vfprintf+0x5c>
 7ce:	98 2f       	mov	r25, r24
 7d0:	9f 7d       	andi	r25, 0xDF	; 223
 7d2:	95 54       	subi	r25, 0x45	; 69
 7d4:	93 30       	cpi	r25, 0x03	; 3
 7d6:	28 f4       	brcc	.+10     	; 0x7e2 <vfprintf+0xee>
 7d8:	0c 5f       	subi	r16, 0xFC	; 252
 7da:	1f 4f       	sbci	r17, 0xFF	; 255
 7dc:	ff e3       	ldi	r31, 0x3F	; 63
 7de:	f9 83       	std	Y+1, r31	; 0x01
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x108>
 7e2:	83 36       	cpi	r24, 0x63	; 99
 7e4:	31 f0       	breq	.+12     	; 0x7f2 <vfprintf+0xfe>
 7e6:	83 37       	cpi	r24, 0x73	; 115
 7e8:	71 f0       	breq	.+28     	; 0x806 <vfprintf+0x112>
 7ea:	83 35       	cpi	r24, 0x53	; 83
 7ec:	09 f0       	breq	.+2      	; 0x7f0 <vfprintf+0xfc>
 7ee:	5b c0       	rjmp	.+182    	; 0x8a6 <vfprintf+0x1b2>
 7f0:	22 c0       	rjmp	.+68     	; 0x836 <vfprintf+0x142>
 7f2:	f8 01       	movw	r30, r16
 7f4:	80 81       	ld	r24, Z
 7f6:	89 83       	std	Y+1, r24	; 0x01
 7f8:	0e 5f       	subi	r16, 0xFE	; 254
 7fa:	1f 4f       	sbci	r17, 0xFF	; 255
 7fc:	44 24       	eor	r4, r4
 7fe:	43 94       	inc	r4
 800:	51 2c       	mov	r5, r1
 802:	54 01       	movw	r10, r8
 804:	15 c0       	rjmp	.+42     	; 0x830 <vfprintf+0x13c>
 806:	38 01       	movw	r6, r16
 808:	f2 e0       	ldi	r31, 0x02	; 2
 80a:	6f 0e       	add	r6, r31
 80c:	71 1c       	adc	r7, r1
 80e:	f8 01       	movw	r30, r16
 810:	a0 80       	ld	r10, Z
 812:	b1 80       	ldd	r11, Z+1	; 0x01
 814:	26 ff       	sbrs	r18, 6
 816:	03 c0       	rjmp	.+6      	; 0x81e <vfprintf+0x12a>
 818:	65 2d       	mov	r22, r5
 81a:	70 e0       	ldi	r23, 0x00	; 0
 81c:	02 c0       	rjmp	.+4      	; 0x822 <vfprintf+0x12e>
 81e:	6f ef       	ldi	r22, 0xFF	; 255
 820:	7f ef       	ldi	r23, 0xFF	; 255
 822:	c5 01       	movw	r24, r10
 824:	2c 87       	std	Y+12, r18	; 0x0c
 826:	0e 94 57 05 	call	0xaae	; 0xaae <strnlen>
 82a:	2c 01       	movw	r4, r24
 82c:	83 01       	movw	r16, r6
 82e:	2c 85       	ldd	r18, Y+12	; 0x0c
 830:	2f 77       	andi	r18, 0x7F	; 127
 832:	22 2e       	mov	r2, r18
 834:	17 c0       	rjmp	.+46     	; 0x864 <vfprintf+0x170>
 836:	38 01       	movw	r6, r16
 838:	f2 e0       	ldi	r31, 0x02	; 2
 83a:	6f 0e       	add	r6, r31
 83c:	71 1c       	adc	r7, r1
 83e:	f8 01       	movw	r30, r16
 840:	a0 80       	ld	r10, Z
 842:	b1 80       	ldd	r11, Z+1	; 0x01
 844:	26 ff       	sbrs	r18, 6
 846:	03 c0       	rjmp	.+6      	; 0x84e <vfprintf+0x15a>
 848:	65 2d       	mov	r22, r5
 84a:	70 e0       	ldi	r23, 0x00	; 0
 84c:	02 c0       	rjmp	.+4      	; 0x852 <vfprintf+0x15e>
 84e:	6f ef       	ldi	r22, 0xFF	; 255
 850:	7f ef       	ldi	r23, 0xFF	; 255
 852:	c5 01       	movw	r24, r10
 854:	2c 87       	std	Y+12, r18	; 0x0c
 856:	0e 94 4c 05 	call	0xa98	; 0xa98 <strnlen_P>
 85a:	2c 01       	movw	r4, r24
 85c:	2c 85       	ldd	r18, Y+12	; 0x0c
 85e:	20 68       	ori	r18, 0x80	; 128
 860:	22 2e       	mov	r2, r18
 862:	83 01       	movw	r16, r6
 864:	23 fc       	sbrc	r2, 3
 866:	1b c0       	rjmp	.+54     	; 0x89e <vfprintf+0x1aa>
 868:	83 2d       	mov	r24, r3
 86a:	90 e0       	ldi	r25, 0x00	; 0
 86c:	48 16       	cp	r4, r24
 86e:	59 06       	cpc	r5, r25
 870:	b0 f4       	brcc	.+44     	; 0x89e <vfprintf+0x1aa>
 872:	b7 01       	movw	r22, r14
 874:	80 e2       	ldi	r24, 0x20	; 32
 876:	90 e0       	ldi	r25, 0x00	; 0
 878:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 87c:	3a 94       	dec	r3
 87e:	f4 cf       	rjmp	.-24     	; 0x868 <vfprintf+0x174>
 880:	f5 01       	movw	r30, r10
 882:	27 fc       	sbrc	r2, 7
 884:	85 91       	lpm	r24, Z+
 886:	27 fe       	sbrs	r2, 7
 888:	81 91       	ld	r24, Z+
 88a:	5f 01       	movw	r10, r30
 88c:	b7 01       	movw	r22, r14
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 894:	31 10       	cpse	r3, r1
 896:	3a 94       	dec	r3
 898:	f1 e0       	ldi	r31, 0x01	; 1
 89a:	4f 1a       	sub	r4, r31
 89c:	51 08       	sbc	r5, r1
 89e:	41 14       	cp	r4, r1
 8a0:	51 04       	cpc	r5, r1
 8a2:	71 f7       	brne	.-36     	; 0x880 <vfprintf+0x18c>
 8a4:	e5 c0       	rjmp	.+458    	; 0xa70 <vfprintf+0x37c>
 8a6:	84 36       	cpi	r24, 0x64	; 100
 8a8:	11 f0       	breq	.+4      	; 0x8ae <vfprintf+0x1ba>
 8aa:	89 36       	cpi	r24, 0x69	; 105
 8ac:	39 f5       	brne	.+78     	; 0x8fc <vfprintf+0x208>
 8ae:	f8 01       	movw	r30, r16
 8b0:	27 ff       	sbrs	r18, 7
 8b2:	07 c0       	rjmp	.+14     	; 0x8c2 <vfprintf+0x1ce>
 8b4:	60 81       	ld	r22, Z
 8b6:	71 81       	ldd	r23, Z+1	; 0x01
 8b8:	82 81       	ldd	r24, Z+2	; 0x02
 8ba:	93 81       	ldd	r25, Z+3	; 0x03
 8bc:	0c 5f       	subi	r16, 0xFC	; 252
 8be:	1f 4f       	sbci	r17, 0xFF	; 255
 8c0:	08 c0       	rjmp	.+16     	; 0x8d2 <vfprintf+0x1de>
 8c2:	60 81       	ld	r22, Z
 8c4:	71 81       	ldd	r23, Z+1	; 0x01
 8c6:	07 2e       	mov	r0, r23
 8c8:	00 0c       	add	r0, r0
 8ca:	88 0b       	sbc	r24, r24
 8cc:	99 0b       	sbc	r25, r25
 8ce:	0e 5f       	subi	r16, 0xFE	; 254
 8d0:	1f 4f       	sbci	r17, 0xFF	; 255
 8d2:	2f 76       	andi	r18, 0x6F	; 111
 8d4:	72 2e       	mov	r7, r18
 8d6:	97 ff       	sbrs	r25, 7
 8d8:	09 c0       	rjmp	.+18     	; 0x8ec <vfprintf+0x1f8>
 8da:	90 95       	com	r25
 8dc:	80 95       	com	r24
 8de:	70 95       	com	r23
 8e0:	61 95       	neg	r22
 8e2:	7f 4f       	sbci	r23, 0xFF	; 255
 8e4:	8f 4f       	sbci	r24, 0xFF	; 255
 8e6:	9f 4f       	sbci	r25, 0xFF	; 255
 8e8:	20 68       	ori	r18, 0x80	; 128
 8ea:	72 2e       	mov	r7, r18
 8ec:	2a e0       	ldi	r18, 0x0A	; 10
 8ee:	30 e0       	ldi	r19, 0x00	; 0
 8f0:	a4 01       	movw	r20, r8
 8f2:	0e 94 9a 05 	call	0xb34	; 0xb34 <__ultoa_invert>
 8f6:	a8 2e       	mov	r10, r24
 8f8:	a8 18       	sub	r10, r8
 8fa:	44 c0       	rjmp	.+136    	; 0x984 <vfprintf+0x290>
 8fc:	85 37       	cpi	r24, 0x75	; 117
 8fe:	29 f4       	brne	.+10     	; 0x90a <vfprintf+0x216>
 900:	2f 7e       	andi	r18, 0xEF	; 239
 902:	b2 2e       	mov	r11, r18
 904:	2a e0       	ldi	r18, 0x0A	; 10
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	25 c0       	rjmp	.+74     	; 0x954 <vfprintf+0x260>
 90a:	f2 2f       	mov	r31, r18
 90c:	f9 7f       	andi	r31, 0xF9	; 249
 90e:	bf 2e       	mov	r11, r31
 910:	8f 36       	cpi	r24, 0x6F	; 111
 912:	c1 f0       	breq	.+48     	; 0x944 <vfprintf+0x250>
 914:	18 f4       	brcc	.+6      	; 0x91c <vfprintf+0x228>
 916:	88 35       	cpi	r24, 0x58	; 88
 918:	79 f0       	breq	.+30     	; 0x938 <vfprintf+0x244>
 91a:	b4 c0       	rjmp	.+360    	; 0xa84 <vfprintf+0x390>
 91c:	80 37       	cpi	r24, 0x70	; 112
 91e:	19 f0       	breq	.+6      	; 0x926 <vfprintf+0x232>
 920:	88 37       	cpi	r24, 0x78	; 120
 922:	21 f0       	breq	.+8      	; 0x92c <vfprintf+0x238>
 924:	af c0       	rjmp	.+350    	; 0xa84 <vfprintf+0x390>
 926:	2f 2f       	mov	r18, r31
 928:	20 61       	ori	r18, 0x10	; 16
 92a:	b2 2e       	mov	r11, r18
 92c:	b4 fe       	sbrs	r11, 4
 92e:	0d c0       	rjmp	.+26     	; 0x94a <vfprintf+0x256>
 930:	8b 2d       	mov	r24, r11
 932:	84 60       	ori	r24, 0x04	; 4
 934:	b8 2e       	mov	r11, r24
 936:	09 c0       	rjmp	.+18     	; 0x94a <vfprintf+0x256>
 938:	24 ff       	sbrs	r18, 4
 93a:	0a c0       	rjmp	.+20     	; 0x950 <vfprintf+0x25c>
 93c:	9f 2f       	mov	r25, r31
 93e:	96 60       	ori	r25, 0x06	; 6
 940:	b9 2e       	mov	r11, r25
 942:	06 c0       	rjmp	.+12     	; 0x950 <vfprintf+0x25c>
 944:	28 e0       	ldi	r18, 0x08	; 8
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	05 c0       	rjmp	.+10     	; 0x954 <vfprintf+0x260>
 94a:	20 e1       	ldi	r18, 0x10	; 16
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	02 c0       	rjmp	.+4      	; 0x954 <vfprintf+0x260>
 950:	20 e1       	ldi	r18, 0x10	; 16
 952:	32 e0       	ldi	r19, 0x02	; 2
 954:	f8 01       	movw	r30, r16
 956:	b7 fe       	sbrs	r11, 7
 958:	07 c0       	rjmp	.+14     	; 0x968 <vfprintf+0x274>
 95a:	60 81       	ld	r22, Z
 95c:	71 81       	ldd	r23, Z+1	; 0x01
 95e:	82 81       	ldd	r24, Z+2	; 0x02
 960:	93 81       	ldd	r25, Z+3	; 0x03
 962:	0c 5f       	subi	r16, 0xFC	; 252
 964:	1f 4f       	sbci	r17, 0xFF	; 255
 966:	06 c0       	rjmp	.+12     	; 0x974 <vfprintf+0x280>
 968:	60 81       	ld	r22, Z
 96a:	71 81       	ldd	r23, Z+1	; 0x01
 96c:	80 e0       	ldi	r24, 0x00	; 0
 96e:	90 e0       	ldi	r25, 0x00	; 0
 970:	0e 5f       	subi	r16, 0xFE	; 254
 972:	1f 4f       	sbci	r17, 0xFF	; 255
 974:	a4 01       	movw	r20, r8
 976:	0e 94 9a 05 	call	0xb34	; 0xb34 <__ultoa_invert>
 97a:	a8 2e       	mov	r10, r24
 97c:	a8 18       	sub	r10, r8
 97e:	fb 2d       	mov	r31, r11
 980:	ff 77       	andi	r31, 0x7F	; 127
 982:	7f 2e       	mov	r7, r31
 984:	76 fe       	sbrs	r7, 6
 986:	0b c0       	rjmp	.+22     	; 0x99e <vfprintf+0x2aa>
 988:	37 2d       	mov	r19, r7
 98a:	3e 7f       	andi	r19, 0xFE	; 254
 98c:	a5 14       	cp	r10, r5
 98e:	50 f4       	brcc	.+20     	; 0x9a4 <vfprintf+0x2b0>
 990:	74 fe       	sbrs	r7, 4
 992:	0a c0       	rjmp	.+20     	; 0x9a8 <vfprintf+0x2b4>
 994:	72 fc       	sbrc	r7, 2
 996:	08 c0       	rjmp	.+16     	; 0x9a8 <vfprintf+0x2b4>
 998:	37 2d       	mov	r19, r7
 99a:	3e 7e       	andi	r19, 0xEE	; 238
 99c:	05 c0       	rjmp	.+10     	; 0x9a8 <vfprintf+0x2b4>
 99e:	ba 2c       	mov	r11, r10
 9a0:	37 2d       	mov	r19, r7
 9a2:	03 c0       	rjmp	.+6      	; 0x9aa <vfprintf+0x2b6>
 9a4:	ba 2c       	mov	r11, r10
 9a6:	01 c0       	rjmp	.+2      	; 0x9aa <vfprintf+0x2b6>
 9a8:	b5 2c       	mov	r11, r5
 9aa:	34 ff       	sbrs	r19, 4
 9ac:	0d c0       	rjmp	.+26     	; 0x9c8 <vfprintf+0x2d4>
 9ae:	fe 01       	movw	r30, r28
 9b0:	ea 0d       	add	r30, r10
 9b2:	f1 1d       	adc	r31, r1
 9b4:	80 81       	ld	r24, Z
 9b6:	80 33       	cpi	r24, 0x30	; 48
 9b8:	11 f4       	brne	.+4      	; 0x9be <vfprintf+0x2ca>
 9ba:	39 7e       	andi	r19, 0xE9	; 233
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <vfprintf+0x2dc>
 9be:	32 ff       	sbrs	r19, 2
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <vfprintf+0x2da>
 9c2:	b3 94       	inc	r11
 9c4:	b3 94       	inc	r11
 9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <vfprintf+0x2dc>
 9c8:	83 2f       	mov	r24, r19
 9ca:	86 78       	andi	r24, 0x86	; 134
 9cc:	09 f0       	breq	.+2      	; 0x9d0 <vfprintf+0x2dc>
 9ce:	b3 94       	inc	r11
 9d0:	33 fd       	sbrc	r19, 3
 9d2:	13 c0       	rjmp	.+38     	; 0x9fa <vfprintf+0x306>
 9d4:	30 ff       	sbrs	r19, 0
 9d6:	06 c0       	rjmp	.+12     	; 0x9e4 <vfprintf+0x2f0>
 9d8:	5a 2c       	mov	r5, r10
 9da:	b3 14       	cp	r11, r3
 9dc:	18 f4       	brcc	.+6      	; 0x9e4 <vfprintf+0x2f0>
 9de:	53 0c       	add	r5, r3
 9e0:	5b 18       	sub	r5, r11
 9e2:	b3 2c       	mov	r11, r3
 9e4:	b3 14       	cp	r11, r3
 9e6:	68 f4       	brcc	.+26     	; 0xa02 <vfprintf+0x30e>
 9e8:	b7 01       	movw	r22, r14
 9ea:	80 e2       	ldi	r24, 0x20	; 32
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	3c 87       	std	Y+12, r19	; 0x0c
 9f0:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 9f4:	b3 94       	inc	r11
 9f6:	3c 85       	ldd	r19, Y+12	; 0x0c
 9f8:	f5 cf       	rjmp	.-22     	; 0x9e4 <vfprintf+0x2f0>
 9fa:	b3 14       	cp	r11, r3
 9fc:	10 f4       	brcc	.+4      	; 0xa02 <vfprintf+0x30e>
 9fe:	3b 18       	sub	r3, r11
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <vfprintf+0x310>
 a02:	31 2c       	mov	r3, r1
 a04:	34 ff       	sbrs	r19, 4
 a06:	12 c0       	rjmp	.+36     	; 0xa2c <vfprintf+0x338>
 a08:	b7 01       	movw	r22, r14
 a0a:	80 e3       	ldi	r24, 0x30	; 48
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	3c 87       	std	Y+12, r19	; 0x0c
 a10:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 a14:	3c 85       	ldd	r19, Y+12	; 0x0c
 a16:	32 ff       	sbrs	r19, 2
 a18:	17 c0       	rjmp	.+46     	; 0xa48 <vfprintf+0x354>
 a1a:	31 fd       	sbrc	r19, 1
 a1c:	03 c0       	rjmp	.+6      	; 0xa24 <vfprintf+0x330>
 a1e:	88 e7       	ldi	r24, 0x78	; 120
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <vfprintf+0x334>
 a24:	88 e5       	ldi	r24, 0x58	; 88
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	b7 01       	movw	r22, r14
 a2a:	0c c0       	rjmp	.+24     	; 0xa44 <vfprintf+0x350>
 a2c:	83 2f       	mov	r24, r19
 a2e:	86 78       	andi	r24, 0x86	; 134
 a30:	59 f0       	breq	.+22     	; 0xa48 <vfprintf+0x354>
 a32:	31 ff       	sbrs	r19, 1
 a34:	02 c0       	rjmp	.+4      	; 0xa3a <vfprintf+0x346>
 a36:	8b e2       	ldi	r24, 0x2B	; 43
 a38:	01 c0       	rjmp	.+2      	; 0xa3c <vfprintf+0x348>
 a3a:	80 e2       	ldi	r24, 0x20	; 32
 a3c:	37 fd       	sbrc	r19, 7
 a3e:	8d e2       	ldi	r24, 0x2D	; 45
 a40:	b7 01       	movw	r22, r14
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 a48:	a5 14       	cp	r10, r5
 a4a:	38 f4       	brcc	.+14     	; 0xa5a <vfprintf+0x366>
 a4c:	b7 01       	movw	r22, r14
 a4e:	80 e3       	ldi	r24, 0x30	; 48
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 a56:	5a 94       	dec	r5
 a58:	f7 cf       	rjmp	.-18     	; 0xa48 <vfprintf+0x354>
 a5a:	aa 94       	dec	r10
 a5c:	f4 01       	movw	r30, r8
 a5e:	ea 0d       	add	r30, r10
 a60:	f1 1d       	adc	r31, r1
 a62:	80 81       	ld	r24, Z
 a64:	b7 01       	movw	r22, r14
 a66:	90 e0       	ldi	r25, 0x00	; 0
 a68:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 a6c:	a1 10       	cpse	r10, r1
 a6e:	f5 cf       	rjmp	.-22     	; 0xa5a <vfprintf+0x366>
 a70:	33 20       	and	r3, r3
 a72:	09 f4       	brne	.+2      	; 0xa76 <vfprintf+0x382>
 a74:	51 ce       	rjmp	.-862    	; 0x718 <vfprintf+0x24>
 a76:	b7 01       	movw	r22, r14
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 62 05 	call	0xac4	; 0xac4 <fputc>
 a80:	3a 94       	dec	r3
 a82:	f6 cf       	rjmp	.-20     	; 0xa70 <vfprintf+0x37c>
 a84:	f7 01       	movw	r30, r14
 a86:	86 81       	ldd	r24, Z+6	; 0x06
 a88:	97 81       	ldd	r25, Z+7	; 0x07
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <vfprintf+0x39c>
 a8c:	8f ef       	ldi	r24, 0xFF	; 255
 a8e:	9f ef       	ldi	r25, 0xFF	; 255
 a90:	2c 96       	adiw	r28, 0x0c	; 12
 a92:	e2 e1       	ldi	r30, 0x12	; 18
 a94:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__epilogue_restores__>

00000a98 <strnlen_P>:
 a98:	fc 01       	movw	r30, r24
 a9a:	05 90       	lpm	r0, Z+
 a9c:	61 50       	subi	r22, 0x01	; 1
 a9e:	70 40       	sbci	r23, 0x00	; 0
 aa0:	01 10       	cpse	r0, r1
 aa2:	d8 f7       	brcc	.-10     	; 0xa9a <strnlen_P+0x2>
 aa4:	80 95       	com	r24
 aa6:	90 95       	com	r25
 aa8:	8e 0f       	add	r24, r30
 aaa:	9f 1f       	adc	r25, r31
 aac:	08 95       	ret

00000aae <strnlen>:
 aae:	fc 01       	movw	r30, r24
 ab0:	61 50       	subi	r22, 0x01	; 1
 ab2:	70 40       	sbci	r23, 0x00	; 0
 ab4:	01 90       	ld	r0, Z+
 ab6:	01 10       	cpse	r0, r1
 ab8:	d8 f7       	brcc	.-10     	; 0xab0 <strnlen+0x2>
 aba:	80 95       	com	r24
 abc:	90 95       	com	r25
 abe:	8e 0f       	add	r24, r30
 ac0:	9f 1f       	adc	r25, r31
 ac2:	08 95       	ret

00000ac4 <fputc>:
 ac4:	0f 93       	push	r16
 ac6:	1f 93       	push	r17
 ac8:	cf 93       	push	r28
 aca:	df 93       	push	r29
 acc:	fb 01       	movw	r30, r22
 ace:	23 81       	ldd	r18, Z+3	; 0x03
 ad0:	21 fd       	sbrc	r18, 1
 ad2:	03 c0       	rjmp	.+6      	; 0xada <fputc+0x16>
 ad4:	8f ef       	ldi	r24, 0xFF	; 255
 ad6:	9f ef       	ldi	r25, 0xFF	; 255
 ad8:	28 c0       	rjmp	.+80     	; 0xb2a <fputc+0x66>
 ada:	22 ff       	sbrs	r18, 2
 adc:	16 c0       	rjmp	.+44     	; 0xb0a <fputc+0x46>
 ade:	46 81       	ldd	r20, Z+6	; 0x06
 ae0:	57 81       	ldd	r21, Z+7	; 0x07
 ae2:	24 81       	ldd	r18, Z+4	; 0x04
 ae4:	35 81       	ldd	r19, Z+5	; 0x05
 ae6:	42 17       	cp	r20, r18
 ae8:	53 07       	cpc	r21, r19
 aea:	44 f4       	brge	.+16     	; 0xafc <fputc+0x38>
 aec:	a0 81       	ld	r26, Z
 aee:	b1 81       	ldd	r27, Z+1	; 0x01
 af0:	9d 01       	movw	r18, r26
 af2:	2f 5f       	subi	r18, 0xFF	; 255
 af4:	3f 4f       	sbci	r19, 0xFF	; 255
 af6:	31 83       	std	Z+1, r19	; 0x01
 af8:	20 83       	st	Z, r18
 afa:	8c 93       	st	X, r24
 afc:	26 81       	ldd	r18, Z+6	; 0x06
 afe:	37 81       	ldd	r19, Z+7	; 0x07
 b00:	2f 5f       	subi	r18, 0xFF	; 255
 b02:	3f 4f       	sbci	r19, 0xFF	; 255
 b04:	37 83       	std	Z+7, r19	; 0x07
 b06:	26 83       	std	Z+6, r18	; 0x06
 b08:	10 c0       	rjmp	.+32     	; 0xb2a <fputc+0x66>
 b0a:	eb 01       	movw	r28, r22
 b0c:	09 2f       	mov	r16, r25
 b0e:	18 2f       	mov	r17, r24
 b10:	00 84       	ldd	r0, Z+8	; 0x08
 b12:	f1 85       	ldd	r31, Z+9	; 0x09
 b14:	e0 2d       	mov	r30, r0
 b16:	09 95       	icall
 b18:	89 2b       	or	r24, r25
 b1a:	e1 f6       	brne	.-72     	; 0xad4 <fputc+0x10>
 b1c:	8e 81       	ldd	r24, Y+6	; 0x06
 b1e:	9f 81       	ldd	r25, Y+7	; 0x07
 b20:	01 96       	adiw	r24, 0x01	; 1
 b22:	9f 83       	std	Y+7, r25	; 0x07
 b24:	8e 83       	std	Y+6, r24	; 0x06
 b26:	81 2f       	mov	r24, r17
 b28:	90 2f       	mov	r25, r16
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	1f 91       	pop	r17
 b30:	0f 91       	pop	r16
 b32:	08 95       	ret

00000b34 <__ultoa_invert>:
 b34:	fa 01       	movw	r30, r20
 b36:	aa 27       	eor	r26, r26
 b38:	28 30       	cpi	r18, 0x08	; 8
 b3a:	51 f1       	breq	.+84     	; 0xb90 <__ultoa_invert+0x5c>
 b3c:	20 31       	cpi	r18, 0x10	; 16
 b3e:	81 f1       	breq	.+96     	; 0xba0 <__ultoa_invert+0x6c>
 b40:	e8 94       	clt
 b42:	6f 93       	push	r22
 b44:	6e 7f       	andi	r22, 0xFE	; 254
 b46:	6e 5f       	subi	r22, 0xFE	; 254
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	af 4f       	sbci	r26, 0xFF	; 255
 b50:	b1 e0       	ldi	r27, 0x01	; 1
 b52:	3e d0       	rcall	.+124    	; 0xbd0 <__ultoa_invert+0x9c>
 b54:	b4 e0       	ldi	r27, 0x04	; 4
 b56:	3c d0       	rcall	.+120    	; 0xbd0 <__ultoa_invert+0x9c>
 b58:	67 0f       	add	r22, r23
 b5a:	78 1f       	adc	r23, r24
 b5c:	89 1f       	adc	r24, r25
 b5e:	9a 1f       	adc	r25, r26
 b60:	a1 1d       	adc	r26, r1
 b62:	68 0f       	add	r22, r24
 b64:	79 1f       	adc	r23, r25
 b66:	8a 1f       	adc	r24, r26
 b68:	91 1d       	adc	r25, r1
 b6a:	a1 1d       	adc	r26, r1
 b6c:	6a 0f       	add	r22, r26
 b6e:	71 1d       	adc	r23, r1
 b70:	81 1d       	adc	r24, r1
 b72:	91 1d       	adc	r25, r1
 b74:	a1 1d       	adc	r26, r1
 b76:	20 d0       	rcall	.+64     	; 0xbb8 <__ultoa_invert+0x84>
 b78:	09 f4       	brne	.+2      	; 0xb7c <__ultoa_invert+0x48>
 b7a:	68 94       	set
 b7c:	3f 91       	pop	r19
 b7e:	2a e0       	ldi	r18, 0x0A	; 10
 b80:	26 9f       	mul	r18, r22
 b82:	11 24       	eor	r1, r1
 b84:	30 19       	sub	r19, r0
 b86:	30 5d       	subi	r19, 0xD0	; 208
 b88:	31 93       	st	Z+, r19
 b8a:	de f6       	brtc	.-74     	; 0xb42 <__ultoa_invert+0xe>
 b8c:	cf 01       	movw	r24, r30
 b8e:	08 95       	ret
 b90:	46 2f       	mov	r20, r22
 b92:	47 70       	andi	r20, 0x07	; 7
 b94:	40 5d       	subi	r20, 0xD0	; 208
 b96:	41 93       	st	Z+, r20
 b98:	b3 e0       	ldi	r27, 0x03	; 3
 b9a:	0f d0       	rcall	.+30     	; 0xbba <__ultoa_invert+0x86>
 b9c:	c9 f7       	brne	.-14     	; 0xb90 <__ultoa_invert+0x5c>
 b9e:	f6 cf       	rjmp	.-20     	; 0xb8c <__ultoa_invert+0x58>
 ba0:	46 2f       	mov	r20, r22
 ba2:	4f 70       	andi	r20, 0x0F	; 15
 ba4:	40 5d       	subi	r20, 0xD0	; 208
 ba6:	4a 33       	cpi	r20, 0x3A	; 58
 ba8:	18 f0       	brcs	.+6      	; 0xbb0 <__ultoa_invert+0x7c>
 baa:	49 5d       	subi	r20, 0xD9	; 217
 bac:	31 fd       	sbrc	r19, 1
 bae:	40 52       	subi	r20, 0x20	; 32
 bb0:	41 93       	st	Z+, r20
 bb2:	02 d0       	rcall	.+4      	; 0xbb8 <__ultoa_invert+0x84>
 bb4:	a9 f7       	brne	.-22     	; 0xba0 <__ultoa_invert+0x6c>
 bb6:	ea cf       	rjmp	.-44     	; 0xb8c <__ultoa_invert+0x58>
 bb8:	b4 e0       	ldi	r27, 0x04	; 4
 bba:	a6 95       	lsr	r26
 bbc:	97 95       	ror	r25
 bbe:	87 95       	ror	r24
 bc0:	77 95       	ror	r23
 bc2:	67 95       	ror	r22
 bc4:	ba 95       	dec	r27
 bc6:	c9 f7       	brne	.-14     	; 0xbba <__ultoa_invert+0x86>
 bc8:	00 97       	sbiw	r24, 0x00	; 0
 bca:	61 05       	cpc	r22, r1
 bcc:	71 05       	cpc	r23, r1
 bce:	08 95       	ret
 bd0:	9b 01       	movw	r18, r22
 bd2:	ac 01       	movw	r20, r24
 bd4:	0a 2e       	mov	r0, r26
 bd6:	06 94       	lsr	r0
 bd8:	57 95       	ror	r21
 bda:	47 95       	ror	r20
 bdc:	37 95       	ror	r19
 bde:	27 95       	ror	r18
 be0:	ba 95       	dec	r27
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0xa2>
 be4:	62 0f       	add	r22, r18
 be6:	73 1f       	adc	r23, r19
 be8:	84 1f       	adc	r24, r20
 bea:	95 1f       	adc	r25, r21
 bec:	a0 1d       	adc	r26, r0
 bee:	08 95       	ret

00000bf0 <__prologue_saves__>:
 bf0:	2f 92       	push	r2
 bf2:	3f 92       	push	r3
 bf4:	4f 92       	push	r4
 bf6:	5f 92       	push	r5
 bf8:	6f 92       	push	r6
 bfa:	7f 92       	push	r7
 bfc:	8f 92       	push	r8
 bfe:	9f 92       	push	r9
 c00:	af 92       	push	r10
 c02:	bf 92       	push	r11
 c04:	cf 92       	push	r12
 c06:	df 92       	push	r13
 c08:	ef 92       	push	r14
 c0a:	ff 92       	push	r15
 c0c:	0f 93       	push	r16
 c0e:	1f 93       	push	r17
 c10:	cf 93       	push	r28
 c12:	df 93       	push	r29
 c14:	cd b7       	in	r28, 0x3d	; 61
 c16:	de b7       	in	r29, 0x3e	; 62
 c18:	ca 1b       	sub	r28, r26
 c1a:	db 0b       	sbc	r29, r27
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	09 94       	ijmp

00000c28 <__epilogue_restores__>:
 c28:	2a 88       	ldd	r2, Y+18	; 0x12
 c2a:	39 88       	ldd	r3, Y+17	; 0x11
 c2c:	48 88       	ldd	r4, Y+16	; 0x10
 c2e:	5f 84       	ldd	r5, Y+15	; 0x0f
 c30:	6e 84       	ldd	r6, Y+14	; 0x0e
 c32:	7d 84       	ldd	r7, Y+13	; 0x0d
 c34:	8c 84       	ldd	r8, Y+12	; 0x0c
 c36:	9b 84       	ldd	r9, Y+11	; 0x0b
 c38:	aa 84       	ldd	r10, Y+10	; 0x0a
 c3a:	b9 84       	ldd	r11, Y+9	; 0x09
 c3c:	c8 84       	ldd	r12, Y+8	; 0x08
 c3e:	df 80       	ldd	r13, Y+7	; 0x07
 c40:	ee 80       	ldd	r14, Y+6	; 0x06
 c42:	fd 80       	ldd	r15, Y+5	; 0x05
 c44:	0c 81       	ldd	r16, Y+4	; 0x04
 c46:	1b 81       	ldd	r17, Y+3	; 0x03
 c48:	aa 81       	ldd	r26, Y+2	; 0x02
 c4a:	b9 81       	ldd	r27, Y+1	; 0x01
 c4c:	ce 0f       	add	r28, r30
 c4e:	d1 1d       	adc	r29, r1
 c50:	0f b6       	in	r0, 0x3f	; 63
 c52:	f8 94       	cli
 c54:	de bf       	out	0x3e, r29	; 62
 c56:	0f be       	out	0x3f, r0	; 63
 c58:	cd bf       	out	0x3d, r28	; 61
 c5a:	ed 01       	movw	r28, r26
 c5c:	08 95       	ret

00000c5e <_exit>:
 c5e:	f8 94       	cli

00000c60 <__stop_program>:
 c60:	ff cf       	rjmp	.-2      	; 0xc60 <__stop_program>
